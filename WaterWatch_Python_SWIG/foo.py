# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _foo
else:
    import _foo

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _foo.delete_SwigPyIterator

    def value(self):
        return _foo.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _foo.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _foo.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _foo.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _foo.SwigPyIterator_equal(self, x)

    def copy(self):
        return _foo.SwigPyIterator_copy(self)

    def next(self):
        return _foo.SwigPyIterator_next(self)

    def __next__(self):
        return _foo.SwigPyIterator___next__(self)

    def previous(self):
        return _foo.SwigPyIterator_previous(self)

    def advance(self, n):
        return _foo.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _foo.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _foo.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _foo.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _foo.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _foo.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _foo.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _foo:
_foo.SwigPyIterator_swigregister(SwigPyIterator)

def cdata(ptr, nelements=1):
    return _foo.cdata(ptr, nelements)

def memmove(data, indata):
    return _foo.memmove(data, indata)
SHARED_PTR_DISOWN = _foo.SHARED_PTR_DISOWN
RED = _foo.RED
BLUE = _foo.BLUE
GREEN = _foo.GREEN
LEFT = _foo.LEFT
RIGHT = _foo.RIGHT
LINEAR = _foo.LINEAR
SPLINE = _foo.SPLINE
class cweeDateTime(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _foo.cweeDateTime_swiginit(self, _foo.new_cweeDateTime(*args))
    unixTime = property(_foo.cweeDateTime_unixTime_get, _foo.cweeDateTime_unixTime_set)
    year = property(_foo.cweeDateTime_year_get, _foo.cweeDateTime_year_set)
    month = property(_foo.cweeDateTime_month_get, _foo.cweeDateTime_month_set)
    day = property(_foo.cweeDateTime_day_get, _foo.cweeDateTime_day_set)
    hour = property(_foo.cweeDateTime_hour_get, _foo.cweeDateTime_hour_set)
    minute = property(_foo.cweeDateTime_minute_get, _foo.cweeDateTime_minute_set)
    second = property(_foo.cweeDateTime_second_get, _foo.cweeDateTime_second_set)
    milliseconds = property(_foo.cweeDateTime_milliseconds_get, _foo.cweeDateTime_milliseconds_set)
    __swig_destroy__ = _foo.delete_cweeDateTime

# Register cweeDateTime in _foo:
_foo.cweeDateTime_swigregister(cweeDateTime)
class Awaiter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _foo.Awaiter_swiginit(self, _foo.new_Awaiter())

    def IsFinished(self):
        return _foo.Awaiter_IsFinished(self)

    def Result(self):
        return _foo.Awaiter_Result(self)
    data_m = property(_foo.Awaiter_data_m_get, _foo.Awaiter_data_m_set)
    isFinished_m = property(_foo.Awaiter_isFinished_m_get, _foo.Awaiter_isFinished_m_set)
    __swig_destroy__ = _foo.delete_Awaiter

# Register Awaiter in _foo:
_foo.Awaiter_swigregister(Awaiter)
class SharedMatrix(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _foo.SharedMatrix_swiginit(self, _foo.new_SharedMatrix(*args))
    __swig_destroy__ = _foo.delete_SharedMatrix

    def Clear(self):
        return _foo.SharedMatrix_Clear(self)

    def AppendData(self, X, Y, value):
        return _foo.SharedMatrix_AppendData(self, X, Y, value)

    def GetValue(self, X, Y):
        return _foo.SharedMatrix_GetValue(self, X, Y)

    def GetKnotSeries(self, Left, Top, Right, Bottom, numColumns, numRows):
        return _foo.SharedMatrix_GetKnotSeries(self, Left, Top, Right, Bottom, numColumns, numRows)

    def GetTimeSeries(self, Left, Top, Right, Bottom, numColumns, numRows):
        return _foo.SharedMatrix_GetTimeSeries(self, Left, Top, Right, Bottom, numColumns, numRows)

    def GetMinX(self):
        return _foo.SharedMatrix_GetMinX(self)

    def GetMaxX(self):
        return _foo.SharedMatrix_GetMaxX(self)

    def GetMinY(self):
        return _foo.SharedMatrix_GetMinY(self)

    def GetMaxY(self):
        return _foo.SharedMatrix_GetMaxY(self)

    def GetMinValue(self):
        return _foo.SharedMatrix_GetMinValue(self)

    def GetMaxValue(self):
        return _foo.SharedMatrix_GetMaxValue(self)

    def GetNumValues(self):
        return _foo.SharedMatrix_GetNumValues(self)

    def Index(self):
        return _foo.SharedMatrix_Index(self)

# Register SharedMatrix in _foo:
_foo.SharedMatrix_swigregister(SharedMatrix)
class SharedTimeSeriesPattern(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _foo.SharedTimeSeriesPattern_swiginit(self, _foo.new_SharedTimeSeriesPattern(*args))
    __swig_destroy__ = _foo.delete_SharedTimeSeriesPattern

    def Clear(self):
        return _foo.SharedTimeSeriesPattern_Clear(self)

    def AppendData(self, time, value):
        return _foo.SharedTimeSeriesPattern_AppendData(self, time, value)

    def GetValue(self, time):
        return _foo.SharedTimeSeriesPattern_GetValue(self, time)

    def GetAvgValue(self, time1, time2):
        return _foo.SharedTimeSeriesPattern_GetAvgValue(self, time1, time2)

    def GetTimeSeries(self):
        return _foo.SharedTimeSeriesPattern_GetTimeSeries(self)

    def GetMinTime(self):
        return _foo.SharedTimeSeriesPattern_GetMinTime(self)

    def GetMaxTime(self):
        return _foo.SharedTimeSeriesPattern_GetMaxTime(self)

    def GetNumValues(self):
        return _foo.SharedTimeSeriesPattern_GetNumValues(self)

    def GetInterpolationType(self):
        return _foo.SharedTimeSeriesPattern_GetInterpolationType(self)

    def X_Units(self):
        return _foo.SharedTimeSeriesPattern_X_Units(self)

    def Y_Units(self):
        return _foo.SharedTimeSeriesPattern_Y_Units(self)

    def Index(self):
        return _foo.SharedTimeSeriesPattern_Index(self)

# Register SharedTimeSeriesPattern in _foo:
_foo.SharedTimeSeriesPattern_swigregister(SharedTimeSeriesPattern)
class SharedString(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _foo.SharedString_swiginit(self, _foo.new_SharedString(*args))
    __swig_destroy__ = _foo.delete_SharedString

    def Set(self, v):
        return _foo.SharedString_Set(self, v)

    def Get(self):
        return _foo.SharedString_Get(self)

    def Index(self):
        return _foo.SharedString_Index(self)

# Register SharedString in _foo:
_foo.SharedString_swigregister(SharedString)
class WaterWatchEnums(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _foo.WaterWatchEnums_swiginit(self, _foo.new_WaterWatchEnums())
    __swig_destroy__ = _foo.delete_WaterWatchEnums
    Id = _foo.WaterWatchEnums_Id
    Fun_Call = _foo.WaterWatchEnums_Fun_Call
    Unused_Return_Fun_Call = _foo.WaterWatchEnums_Unused_Return_Fun_Call
    Arg_List = _foo.WaterWatchEnums_Arg_List
    Equation = _foo.WaterWatchEnums_Equation
    Var_Decl = _foo.WaterWatchEnums_Var_Decl
    Assign_Decl = _foo.WaterWatchEnums_Assign_Decl
    Array_Call = _foo.WaterWatchEnums_Array_Call
    Dot_Access = _foo.WaterWatchEnums_Dot_Access
    Lambda = _foo.WaterWatchEnums_Lambda
    Block = _foo.WaterWatchEnums_Block
    Scopeless_Block = _foo.WaterWatchEnums_Scopeless_Block
    Def = _foo.WaterWatchEnums_Def
    While = _foo.WaterWatchEnums_While
    If = _foo.WaterWatchEnums_If
    For = _foo.WaterWatchEnums_For
    Ranged_For = _foo.WaterWatchEnums_Ranged_For
    Inline_Array = _foo.WaterWatchEnums_Inline_Array
    Inline_Map = _foo.WaterWatchEnums_Inline_Map
    Return = _foo.WaterWatchEnums_Return
    File = _foo.WaterWatchEnums_File
    Prefix = _foo.WaterWatchEnums_Prefix
    Break = _foo.WaterWatchEnums_Break
    Continue = _foo.WaterWatchEnums_Continue
    Map_Pair = _foo.WaterWatchEnums_Map_Pair
    Value_Range = _foo.WaterWatchEnums_Value_Range
    Inline_Range = _foo.WaterWatchEnums_Inline_Range
    Do = _foo.WaterWatchEnums_Do
    Try = _foo.WaterWatchEnums_Try
    Catch = _foo.WaterWatchEnums_Catch
    Finally = _foo.WaterWatchEnums_Finally
    Method = _foo.WaterWatchEnums_Method
    Attr_Decl = _foo.WaterWatchEnums_Attr_Decl
    Logical_And = _foo.WaterWatchEnums_Logical_And
    Logical_Or = _foo.WaterWatchEnums_Logical_Or
    Reference = _foo.WaterWatchEnums_Reference
    Switch = _foo.WaterWatchEnums_Switch
    Case = _foo.WaterWatchEnums_Case
    Default = _foo.WaterWatchEnums_Default
    Noop = _foo.WaterWatchEnums_Noop
    Class = _foo.WaterWatchEnums_Class
    Binary = _foo.WaterWatchEnums_Binary
    Arg = _foo.WaterWatchEnums_Arg
    Global_Decl = _foo.WaterWatchEnums_Global_Decl
    Constant = _foo.WaterWatchEnums_Constant
    Compiled = _foo.WaterWatchEnums_Compiled
    ControlBlock = _foo.WaterWatchEnums_ControlBlock
    Postfix = _foo.WaterWatchEnums_Postfix
    Assign_Retroactively = _foo.WaterWatchEnums_Assign_Retroactively
    Error = _foo.WaterWatchEnums_Error

# Register WaterWatchEnums in _foo:
_foo.WaterWatchEnums_swigregister(WaterWatchEnums)
class ScriptingNode(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _foo.ScriptingNode_swiginit(self, _foo.new_ScriptingNode())
    __swig_destroy__ = _foo.delete_ScriptingNode

    def text_get(self):
        return _foo.ScriptingNode_text_get(self)

    def startLine_get(self):
        return _foo.ScriptingNode_startLine_get(self)

    def startColumn_get(self):
        return _foo.ScriptingNode_startColumn_get(self)

    def endLine_get(self):
        return _foo.ScriptingNode_endLine_get(self)

    def endColumn_get(self):
        return _foo.ScriptingNode_endColumn_get(self)

    def type_get(self):
        return _foo.ScriptingNode_type_get(self)

    def typeHint_get(self):
        return _foo.ScriptingNode_typeHint_get(self)

    def depth_get(self):
        return _foo.ScriptingNode_depth_get(self)

    def text_set(self, s):
        return _foo.ScriptingNode_text_set(self, s)

    def startLine_set(self, s):
        return _foo.ScriptingNode_startLine_set(self, s)

    def startColumn_set(self, s):
        return _foo.ScriptingNode_startColumn_set(self, s)

    def endLine_set(self, s):
        return _foo.ScriptingNode_endLine_set(self, s)

    def endColumn_set(self, s):
        return _foo.ScriptingNode_endColumn_set(self, s)

    def type_set(self, s):
        return _foo.ScriptingNode_type_set(self, s)

    def typeHint_set(self, s):
        return _foo.ScriptingNode_typeHint_set(self, s)

    def depth_set(self, s):
        return _foo.ScriptingNode_depth_set(self, s)

# Register ScriptingNode in _foo:
_foo.ScriptingNode_swigregister(ScriptingNode)
class ScriptEngine(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _foo.ScriptEngine_swiginit(self, _foo.new_ScriptEngine())
    __swig_destroy__ = _foo.delete_ScriptEngine

    def DoScript_Cast_VectorStrings(self, command):
        return _foo.ScriptEngine_DoScript_Cast_VectorStrings(self, command)

    def DoScript_Cast_VectorFloats(self, command):
        return _foo.ScriptEngine_DoScript_Cast_VectorFloats(self, command)

    def DoScript(self, command):
        return _foo.ScriptEngine_DoScript(self, command)

    def DoScriptAsync(self, command):
        return _foo.ScriptEngine_DoScriptAsync(self, command)

    def PreParseScript(self, command):
        return _foo.ScriptEngine_PreParseScript(self, command)

    def CompatibleFunctions(self, TypeName):
        return _foo.ScriptEngine_CompatibleFunctions(self, TypeName)

    def FunctionsThatStartWith(self, startsWith):
        return _foo.ScriptEngine_FunctionsThatStartWith(self, startsWith)

    def StopCurrentScript(self):
        return _foo.ScriptEngine_StopCurrentScript(self)

    def Cast_String(self, command):
        return _foo.ScriptEngine_Cast_String(self, command)

    def Cast_VectorFloats(self, command):
        return _foo.ScriptEngine_Cast_VectorFloats(self, command)

# Register ScriptEngine in _foo:
_foo.ScriptEngine_swigregister(ScriptEngine)
class WaterWatch(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def TestVector():
        return _foo.WaterWatch_TestVector()

    @staticmethod
    def TestVector2(*args):
        return _foo.WaterWatch_TestVector2(*args)

    @staticmethod
    def SubmitToast(title, content):
        return _foo.WaterWatch_SubmitToast(title, content)

    @staticmethod
    def TryGetToast():
        return _foo.WaterWatch_TryGetToast()

    @staticmethod
    def TryGetAppRequest():
        return _foo.WaterWatch_TryGetAppRequest()

    @staticmethod
    def CompleteAppRequest(ID, reply):
        return _foo.WaterWatch_CompleteAppRequest(ID, reply)

    @staticmethod
    def GetDataDirectory():
        return _foo.WaterWatch_GetDataDirectory()

    @staticmethod
    def SetDataDirectory(dir):
        return _foo.WaterWatch_SetDataDirectory(dir)

    @staticmethod
    def GetTemporaryFilePath(extension):
        return _foo.WaterWatch_GetTemporaryFilePath(extension)

    @staticmethod
    def GeocodeAddress(*args):
        return _foo.WaterWatch_GeocodeAddress(*args)

    @staticmethod
    def GeocodeElevation(longitude, latitude):
        return _foo.WaterWatch_GeocodeElevation(longitude, latitude)

    @staticmethod
    def ValidateCoordinates(longitude, latitude):
        return _foo.WaterWatch_ValidateCoordinates(longitude, latitude)

    @staticmethod
    def Encode_2D_to_1D(x, y, H):
        return _foo.WaterWatch_Encode_2D_to_1D(x, y, H)

    @staticmethod
    def Decode_1D_to_2D(l, H):
        return _foo.WaterWatch_Decode_1D_to_2D(l, H)

    @staticmethod
    def PredictNext(data, nextN):
        return _foo.WaterWatch_PredictNext(data, nextN)

    @staticmethod
    def getCurrentTime():
        return _foo.WaterWatch_getCurrentTime()

    @staticmethod
    def RandomInt(min, max):
        return _foo.WaterWatch_RandomInt(min, max)

    @staticmethod
    def RandomFloat(min, max):
        return _foo.WaterWatch_RandomFloat(min, max)

    @staticmethod
    def GetBestMatch(input, options):
        return _foo.WaterWatch_GetBestMatch(input, options)

    @staticmethod
    def GetNumMultithreadingCores():
        return _foo.WaterWatch_GetNumMultithreadingCores()

    @staticmethod
    def GetNumLogicalCoresOnMachine():
        return _foo.WaterWatch_GetNumLogicalCoresOnMachine()

    @staticmethod
    def GetNumPhysicalCoresOnMachine():
        return _foo.WaterWatch_GetNumPhysicalCoresOnMachine()

    @staticmethod
    def GetPercentMemoryUsedOfMachine():
        return _foo.WaterWatch_GetPercentMemoryUsedOfMachine()

    @staticmethod
    def GetPercentCpuUsedOfMachine():
        return _foo.WaterWatch_GetPercentCpuUsedOfMachine()

    @staticmethod
    def DoScript(command):
        return _foo.WaterWatch_DoScript(command)

    @staticmethod
    def DoScriptImmediately(command):
        return _foo.WaterWatch_DoScriptImmediately(command)

    @staticmethod
    def AddToLog(filePath, content):
        return _foo.WaterWatch_AddToLog(filePath, content)

    @staticmethod
    def GetNanosecondsSinceStart():
        return _foo.WaterWatch_GetNanosecondsSinceStart()

    def __init__(self):
        _foo.WaterWatch_swiginit(self, _foo.new_WaterWatch())
    __swig_destroy__ = _foo.delete_WaterWatch

# Register WaterWatch in _foo:
_foo.WaterWatch_swigregister(WaterWatch)
class vector_string(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _foo.vector_string_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _foo.vector_string___nonzero__(self)

    def __bool__(self):
        return _foo.vector_string___bool__(self)

    def __len__(self):
        return _foo.vector_string___len__(self)

    def __getslice__(self, i, j):
        return _foo.vector_string___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _foo.vector_string___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _foo.vector_string___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _foo.vector_string___delitem__(self, *args)

    def __getitem__(self, *args):
        return _foo.vector_string___getitem__(self, *args)

    def __setitem__(self, *args):
        return _foo.vector_string___setitem__(self, *args)

    def pop(self):
        return _foo.vector_string_pop(self)

    def append(self, x):
        return _foo.vector_string_append(self, x)

    def empty(self):
        return _foo.vector_string_empty(self)

    def size(self):
        return _foo.vector_string_size(self)

    def swap(self, v):
        return _foo.vector_string_swap(self, v)

    def begin(self):
        return _foo.vector_string_begin(self)

    def end(self):
        return _foo.vector_string_end(self)

    def rbegin(self):
        return _foo.vector_string_rbegin(self)

    def rend(self):
        return _foo.vector_string_rend(self)

    def clear(self):
        return _foo.vector_string_clear(self)

    def get_allocator(self):
        return _foo.vector_string_get_allocator(self)

    def pop_back(self):
        return _foo.vector_string_pop_back(self)

    def erase(self, *args):
        return _foo.vector_string_erase(self, *args)

    def __init__(self, *args):
        _foo.vector_string_swiginit(self, _foo.new_vector_string(*args))

    def push_back(self, x):
        return _foo.vector_string_push_back(self, x)

    def front(self):
        return _foo.vector_string_front(self)

    def back(self):
        return _foo.vector_string_back(self)

    def assign(self, n, x):
        return _foo.vector_string_assign(self, n, x)

    def resize(self, *args):
        return _foo.vector_string_resize(self, *args)

    def insert(self, *args):
        return _foo.vector_string_insert(self, *args)

    def reserve(self, n):
        return _foo.vector_string_reserve(self, n)

    def capacity(self):
        return _foo.vector_string_capacity(self)
    __swig_destroy__ = _foo.delete_vector_string

# Register vector_string in _foo:
_foo.vector_string_swigregister(vector_string)
class vector_int(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _foo.vector_int_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _foo.vector_int___nonzero__(self)

    def __bool__(self):
        return _foo.vector_int___bool__(self)

    def __len__(self):
        return _foo.vector_int___len__(self)

    def __getslice__(self, i, j):
        return _foo.vector_int___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _foo.vector_int___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _foo.vector_int___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _foo.vector_int___delitem__(self, *args)

    def __getitem__(self, *args):
        return _foo.vector_int___getitem__(self, *args)

    def __setitem__(self, *args):
        return _foo.vector_int___setitem__(self, *args)

    def pop(self):
        return _foo.vector_int_pop(self)

    def append(self, x):
        return _foo.vector_int_append(self, x)

    def empty(self):
        return _foo.vector_int_empty(self)

    def size(self):
        return _foo.vector_int_size(self)

    def swap(self, v):
        return _foo.vector_int_swap(self, v)

    def begin(self):
        return _foo.vector_int_begin(self)

    def end(self):
        return _foo.vector_int_end(self)

    def rbegin(self):
        return _foo.vector_int_rbegin(self)

    def rend(self):
        return _foo.vector_int_rend(self)

    def clear(self):
        return _foo.vector_int_clear(self)

    def get_allocator(self):
        return _foo.vector_int_get_allocator(self)

    def pop_back(self):
        return _foo.vector_int_pop_back(self)

    def erase(self, *args):
        return _foo.vector_int_erase(self, *args)

    def __init__(self, *args):
        _foo.vector_int_swiginit(self, _foo.new_vector_int(*args))

    def push_back(self, x):
        return _foo.vector_int_push_back(self, x)

    def front(self):
        return _foo.vector_int_front(self)

    def back(self):
        return _foo.vector_int_back(self)

    def assign(self, n, x):
        return _foo.vector_int_assign(self, n, x)

    def resize(self, *args):
        return _foo.vector_int_resize(self, *args)

    def insert(self, *args):
        return _foo.vector_int_insert(self, *args)

    def reserve(self, n):
        return _foo.vector_int_reserve(self, n)

    def capacity(self):
        return _foo.vector_int_capacity(self)
    __swig_destroy__ = _foo.delete_vector_int

# Register vector_int in _foo:
_foo.vector_int_swigregister(vector_int)
class vector_float(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _foo.vector_float_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _foo.vector_float___nonzero__(self)

    def __bool__(self):
        return _foo.vector_float___bool__(self)

    def __len__(self):
        return _foo.vector_float___len__(self)

    def __getslice__(self, i, j):
        return _foo.vector_float___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _foo.vector_float___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _foo.vector_float___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _foo.vector_float___delitem__(self, *args)

    def __getitem__(self, *args):
        return _foo.vector_float___getitem__(self, *args)

    def __setitem__(self, *args):
        return _foo.vector_float___setitem__(self, *args)

    def pop(self):
        return _foo.vector_float_pop(self)

    def append(self, x):
        return _foo.vector_float_append(self, x)

    def empty(self):
        return _foo.vector_float_empty(self)

    def size(self):
        return _foo.vector_float_size(self)

    def swap(self, v):
        return _foo.vector_float_swap(self, v)

    def begin(self):
        return _foo.vector_float_begin(self)

    def end(self):
        return _foo.vector_float_end(self)

    def rbegin(self):
        return _foo.vector_float_rbegin(self)

    def rend(self):
        return _foo.vector_float_rend(self)

    def clear(self):
        return _foo.vector_float_clear(self)

    def get_allocator(self):
        return _foo.vector_float_get_allocator(self)

    def pop_back(self):
        return _foo.vector_float_pop_back(self)

    def erase(self, *args):
        return _foo.vector_float_erase(self, *args)

    def __init__(self, *args):
        _foo.vector_float_swiginit(self, _foo.new_vector_float(*args))

    def push_back(self, x):
        return _foo.vector_float_push_back(self, x)

    def front(self):
        return _foo.vector_float_front(self)

    def back(self):
        return _foo.vector_float_back(self)

    def assign(self, n, x):
        return _foo.vector_float_assign(self, n, x)

    def resize(self, *args):
        return _foo.vector_float_resize(self, *args)

    def insert(self, *args):
        return _foo.vector_float_insert(self, *args)

    def reserve(self, n):
        return _foo.vector_float_reserve(self, n)

    def capacity(self):
        return _foo.vector_float_capacity(self)
    __swig_destroy__ = _foo.delete_vector_float

# Register vector_float in _foo:
_foo.vector_float_swigregister(vector_float)
class vector_double(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _foo.vector_double_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _foo.vector_double___nonzero__(self)

    def __bool__(self):
        return _foo.vector_double___bool__(self)

    def __len__(self):
        return _foo.vector_double___len__(self)

    def __getslice__(self, i, j):
        return _foo.vector_double___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _foo.vector_double___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _foo.vector_double___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _foo.vector_double___delitem__(self, *args)

    def __getitem__(self, *args):
        return _foo.vector_double___getitem__(self, *args)

    def __setitem__(self, *args):
        return _foo.vector_double___setitem__(self, *args)

    def pop(self):
        return _foo.vector_double_pop(self)

    def append(self, x):
        return _foo.vector_double_append(self, x)

    def empty(self):
        return _foo.vector_double_empty(self)

    def size(self):
        return _foo.vector_double_size(self)

    def swap(self, v):
        return _foo.vector_double_swap(self, v)

    def begin(self):
        return _foo.vector_double_begin(self)

    def end(self):
        return _foo.vector_double_end(self)

    def rbegin(self):
        return _foo.vector_double_rbegin(self)

    def rend(self):
        return _foo.vector_double_rend(self)

    def clear(self):
        return _foo.vector_double_clear(self)

    def get_allocator(self):
        return _foo.vector_double_get_allocator(self)

    def pop_back(self):
        return _foo.vector_double_pop_back(self)

    def erase(self, *args):
        return _foo.vector_double_erase(self, *args)

    def __init__(self, *args):
        _foo.vector_double_swiginit(self, _foo.new_vector_double(*args))

    def push_back(self, x):
        return _foo.vector_double_push_back(self, x)

    def front(self):
        return _foo.vector_double_front(self)

    def back(self):
        return _foo.vector_double_back(self)

    def assign(self, n, x):
        return _foo.vector_double_assign(self, n, x)

    def resize(self, *args):
        return _foo.vector_double_resize(self, *args)

    def insert(self, *args):
        return _foo.vector_double_insert(self, *args)

    def reserve(self, n):
        return _foo.vector_double_reserve(self, n)

    def capacity(self):
        return _foo.vector_double_capacity(self)
    __swig_destroy__ = _foo.delete_vector_double

# Register vector_double in _foo:
_foo.vector_double_swigregister(vector_double)
class pair_timeseries(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _foo.pair_timeseries_swiginit(self, _foo.new_pair_timeseries(*args))
    first = property(_foo.pair_timeseries_first_get, _foo.pair_timeseries_first_set)
    second = property(_foo.pair_timeseries_second_get, _foo.pair_timeseries_second_set)
    __swig_destroy__ = _foo.delete_pair_timeseries

# Register pair_timeseries in _foo:
_foo.pair_timeseries_swigregister(pair_timeseries)
class pair_string_vector_string(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _foo.pair_string_vector_string_swiginit(self, _foo.new_pair_string_vector_string(*args))
    first = property(_foo.pair_string_vector_string_first_get, _foo.pair_string_vector_string_first_set)
    second = property(_foo.pair_string_vector_string_second_get, _foo.pair_string_vector_string_second_set)
    __swig_destroy__ = _foo.delete_pair_string_vector_string

# Register pair_string_vector_string in _foo:
_foo.pair_string_vector_string_swigregister(pair_string_vector_string)
class pair_int_pair_string_vector_string(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _foo.pair_int_pair_string_vector_string_swiginit(self, _foo.new_pair_int_pair_string_vector_string(*args))
    first = property(_foo.pair_int_pair_string_vector_string_first_get, _foo.pair_int_pair_string_vector_string_first_set)
    second = property(_foo.pair_int_pair_string_vector_string_second_get, _foo.pair_int_pair_string_vector_string_second_set)
    __swig_destroy__ = _foo.delete_pair_int_pair_string_vector_string

# Register pair_int_pair_string_vector_string in _foo:
_foo.pair_int_pair_string_vector_string_swigregister(pair_int_pair_string_vector_string)
class pair_double_double(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _foo.pair_double_double_swiginit(self, _foo.new_pair_double_double(*args))
    first = property(_foo.pair_double_double_first_get, _foo.pair_double_double_first_set)
    second = property(_foo.pair_double_double_second_get, _foo.pair_double_double_second_set)
    __swig_destroy__ = _foo.delete_pair_double_double

# Register pair_double_double in _foo:
_foo.pair_double_double_swigregister(pair_double_double)
class pair_string_string(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _foo.pair_string_string_swiginit(self, _foo.new_pair_string_string(*args))
    first = property(_foo.pair_string_string_first_get, _foo.pair_string_string_first_set)
    second = property(_foo.pair_string_string_second_get, _foo.pair_string_string_second_set)
    __swig_destroy__ = _foo.delete_pair_string_string

# Register pair_string_string in _foo:
_foo.pair_string_string_swigregister(pair_string_string)
class pair_bool_pair_string_string(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _foo.pair_bool_pair_string_string_swiginit(self, _foo.new_pair_bool_pair_string_string(*args))
    first = property(_foo.pair_bool_pair_string_string_first_get, _foo.pair_bool_pair_string_string_first_set)
    second = property(_foo.pair_bool_pair_string_string_second_get, _foo.pair_bool_pair_string_string_second_set)
    __swig_destroy__ = _foo.delete_pair_bool_pair_string_string

# Register pair_bool_pair_string_string in _foo:
_foo.pair_bool_pair_string_string_swigregister(pair_bool_pair_string_string)
class vector_pair_timeseries(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _foo.vector_pair_timeseries_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _foo.vector_pair_timeseries___nonzero__(self)

    def __bool__(self):
        return _foo.vector_pair_timeseries___bool__(self)

    def __len__(self):
        return _foo.vector_pair_timeseries___len__(self)

    def __getslice__(self, i, j):
        return _foo.vector_pair_timeseries___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _foo.vector_pair_timeseries___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _foo.vector_pair_timeseries___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _foo.vector_pair_timeseries___delitem__(self, *args)

    def __getitem__(self, *args):
        return _foo.vector_pair_timeseries___getitem__(self, *args)

    def __setitem__(self, *args):
        return _foo.vector_pair_timeseries___setitem__(self, *args)

    def pop(self):
        return _foo.vector_pair_timeseries_pop(self)

    def append(self, x):
        return _foo.vector_pair_timeseries_append(self, x)

    def empty(self):
        return _foo.vector_pair_timeseries_empty(self)

    def size(self):
        return _foo.vector_pair_timeseries_size(self)

    def swap(self, v):
        return _foo.vector_pair_timeseries_swap(self, v)

    def begin(self):
        return _foo.vector_pair_timeseries_begin(self)

    def end(self):
        return _foo.vector_pair_timeseries_end(self)

    def rbegin(self):
        return _foo.vector_pair_timeseries_rbegin(self)

    def rend(self):
        return _foo.vector_pair_timeseries_rend(self)

    def clear(self):
        return _foo.vector_pair_timeseries_clear(self)

    def get_allocator(self):
        return _foo.vector_pair_timeseries_get_allocator(self)

    def pop_back(self):
        return _foo.vector_pair_timeseries_pop_back(self)

    def erase(self, *args):
        return _foo.vector_pair_timeseries_erase(self, *args)

    def __init__(self, *args):
        _foo.vector_pair_timeseries_swiginit(self, _foo.new_vector_pair_timeseries(*args))

    def push_back(self, x):
        return _foo.vector_pair_timeseries_push_back(self, x)

    def front(self):
        return _foo.vector_pair_timeseries_front(self)

    def back(self):
        return _foo.vector_pair_timeseries_back(self)

    def assign(self, n, x):
        return _foo.vector_pair_timeseries_assign(self, n, x)

    def resize(self, *args):
        return _foo.vector_pair_timeseries_resize(self, *args)

    def insert(self, *args):
        return _foo.vector_pair_timeseries_insert(self, *args)

    def reserve(self, n):
        return _foo.vector_pair_timeseries_reserve(self, n)

    def capacity(self):
        return _foo.vector_pair_timeseries_capacity(self)
    __swig_destroy__ = _foo.delete_vector_pair_timeseries

# Register vector_pair_timeseries in _foo:
_foo.vector_pair_timeseries_swigregister(vector_pair_timeseries)
class vector_pair_double_double(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _foo.vector_pair_double_double_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _foo.vector_pair_double_double___nonzero__(self)

    def __bool__(self):
        return _foo.vector_pair_double_double___bool__(self)

    def __len__(self):
        return _foo.vector_pair_double_double___len__(self)

    def __getslice__(self, i, j):
        return _foo.vector_pair_double_double___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _foo.vector_pair_double_double___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _foo.vector_pair_double_double___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _foo.vector_pair_double_double___delitem__(self, *args)

    def __getitem__(self, *args):
        return _foo.vector_pair_double_double___getitem__(self, *args)

    def __setitem__(self, *args):
        return _foo.vector_pair_double_double___setitem__(self, *args)

    def pop(self):
        return _foo.vector_pair_double_double_pop(self)

    def append(self, x):
        return _foo.vector_pair_double_double_append(self, x)

    def empty(self):
        return _foo.vector_pair_double_double_empty(self)

    def size(self):
        return _foo.vector_pair_double_double_size(self)

    def swap(self, v):
        return _foo.vector_pair_double_double_swap(self, v)

    def begin(self):
        return _foo.vector_pair_double_double_begin(self)

    def end(self):
        return _foo.vector_pair_double_double_end(self)

    def rbegin(self):
        return _foo.vector_pair_double_double_rbegin(self)

    def rend(self):
        return _foo.vector_pair_double_double_rend(self)

    def clear(self):
        return _foo.vector_pair_double_double_clear(self)

    def get_allocator(self):
        return _foo.vector_pair_double_double_get_allocator(self)

    def pop_back(self):
        return _foo.vector_pair_double_double_pop_back(self)

    def erase(self, *args):
        return _foo.vector_pair_double_double_erase(self, *args)

    def __init__(self, *args):
        _foo.vector_pair_double_double_swiginit(self, _foo.new_vector_pair_double_double(*args))

    def push_back(self, x):
        return _foo.vector_pair_double_double_push_back(self, x)

    def front(self):
        return _foo.vector_pair_double_double_front(self)

    def back(self):
        return _foo.vector_pair_double_double_back(self)

    def assign(self, n, x):
        return _foo.vector_pair_double_double_assign(self, n, x)

    def resize(self, *args):
        return _foo.vector_pair_double_double_resize(self, *args)

    def insert(self, *args):
        return _foo.vector_pair_double_double_insert(self, *args)

    def reserve(self, n):
        return _foo.vector_pair_double_double_reserve(self, n)

    def capacity(self):
        return _foo.vector_pair_double_double_capacity(self)
    __swig_destroy__ = _foo.delete_vector_pair_double_double

# Register vector_pair_double_double in _foo:
_foo.vector_pair_double_double_swigregister(vector_pair_double_double)
class vector_scriptingnode(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _foo.vector_scriptingnode_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _foo.vector_scriptingnode___nonzero__(self)

    def __bool__(self):
        return _foo.vector_scriptingnode___bool__(self)

    def __len__(self):
        return _foo.vector_scriptingnode___len__(self)

    def __getslice__(self, i, j):
        return _foo.vector_scriptingnode___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _foo.vector_scriptingnode___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _foo.vector_scriptingnode___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _foo.vector_scriptingnode___delitem__(self, *args)

    def __getitem__(self, *args):
        return _foo.vector_scriptingnode___getitem__(self, *args)

    def __setitem__(self, *args):
        return _foo.vector_scriptingnode___setitem__(self, *args)

    def pop(self):
        return _foo.vector_scriptingnode_pop(self)

    def append(self, x):
        return _foo.vector_scriptingnode_append(self, x)

    def empty(self):
        return _foo.vector_scriptingnode_empty(self)

    def size(self):
        return _foo.vector_scriptingnode_size(self)

    def swap(self, v):
        return _foo.vector_scriptingnode_swap(self, v)

    def begin(self):
        return _foo.vector_scriptingnode_begin(self)

    def end(self):
        return _foo.vector_scriptingnode_end(self)

    def rbegin(self):
        return _foo.vector_scriptingnode_rbegin(self)

    def rend(self):
        return _foo.vector_scriptingnode_rend(self)

    def clear(self):
        return _foo.vector_scriptingnode_clear(self)

    def get_allocator(self):
        return _foo.vector_scriptingnode_get_allocator(self)

    def pop_back(self):
        return _foo.vector_scriptingnode_pop_back(self)

    def erase(self, *args):
        return _foo.vector_scriptingnode_erase(self, *args)

    def __init__(self, *args):
        _foo.vector_scriptingnode_swiginit(self, _foo.new_vector_scriptingnode(*args))

    def push_back(self, x):
        return _foo.vector_scriptingnode_push_back(self, x)

    def front(self):
        return _foo.vector_scriptingnode_front(self)

    def back(self):
        return _foo.vector_scriptingnode_back(self)

    def assign(self, n, x):
        return _foo.vector_scriptingnode_assign(self, n, x)

    def resize(self, *args):
        return _foo.vector_scriptingnode_resize(self, *args)

    def insert(self, *args):
        return _foo.vector_scriptingnode_insert(self, *args)

    def reserve(self, n):
        return _foo.vector_scriptingnode_reserve(self, n)

    def capacity(self):
        return _foo.vector_scriptingnode_capacity(self)
    __swig_destroy__ = _foo.delete_vector_scriptingnode

# Register vector_scriptingnode in _foo:
_foo.vector_scriptingnode_swigregister(vector_scriptingnode)

