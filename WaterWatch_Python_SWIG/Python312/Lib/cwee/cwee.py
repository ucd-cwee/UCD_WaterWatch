# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _cwee
else:
    import _cwee

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _cwee.delete_SwigPyIterator

    def value(self):
        return _cwee.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _cwee.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _cwee.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _cwee.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _cwee.SwigPyIterator_equal(self, x)

    def copy(self):
        return _cwee.SwigPyIterator_copy(self)

    def next(self):
        return _cwee.SwigPyIterator_next(self)

    def __next__(self):
        return _cwee.SwigPyIterator___next__(self)

    def previous(self):
        return _cwee.SwigPyIterator_previous(self)

    def advance(self, n):
        return _cwee.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _cwee.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _cwee.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _cwee.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _cwee.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _cwee.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _cwee.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _cwee:
_cwee.SwigPyIterator_swigregister(SwigPyIterator)
class StringVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _cwee.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _cwee.StringVector___nonzero__(self)

    def __bool__(self):
        return _cwee.StringVector___bool__(self)

    def __len__(self):
        return _cwee.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _cwee.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _cwee.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _cwee.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _cwee.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _cwee.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _cwee.StringVector___setitem__(self, *args)

    def pop(self):
        return _cwee.StringVector_pop(self)

    def append(self, x):
        return _cwee.StringVector_append(self, x)

    def empty(self):
        return _cwee.StringVector_empty(self)

    def size(self):
        return _cwee.StringVector_size(self)

    def swap(self, v):
        return _cwee.StringVector_swap(self, v)

    def begin(self):
        return _cwee.StringVector_begin(self)

    def end(self):
        return _cwee.StringVector_end(self)

    def rbegin(self):
        return _cwee.StringVector_rbegin(self)

    def rend(self):
        return _cwee.StringVector_rend(self)

    def clear(self):
        return _cwee.StringVector_clear(self)

    def get_allocator(self):
        return _cwee.StringVector_get_allocator(self)

    def pop_back(self):
        return _cwee.StringVector_pop_back(self)

    def erase(self, *args):
        return _cwee.StringVector_erase(self, *args)

    def __init__(self, *args):
        _cwee.StringVector_swiginit(self, _cwee.new_StringVector(*args))

    def push_back(self, x):
        return _cwee.StringVector_push_back(self, x)

    def front(self):
        return _cwee.StringVector_front(self)

    def back(self):
        return _cwee.StringVector_back(self)

    def assign(self, n, x):
        return _cwee.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _cwee.StringVector_resize(self, *args)

    def insert(self, *args):
        return _cwee.StringVector_insert(self, *args)

    def reserve(self, n):
        return _cwee.StringVector_reserve(self, n)

    def capacity(self):
        return _cwee.StringVector_capacity(self)
    __swig_destroy__ = _cwee.delete_StringVector

# Register StringVector in _cwee:
_cwee.StringVector_swigregister(StringVector)
class IntVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _cwee.IntVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _cwee.IntVector___nonzero__(self)

    def __bool__(self):
        return _cwee.IntVector___bool__(self)

    def __len__(self):
        return _cwee.IntVector___len__(self)

    def __getslice__(self, i, j):
        return _cwee.IntVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _cwee.IntVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _cwee.IntVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _cwee.IntVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _cwee.IntVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _cwee.IntVector___setitem__(self, *args)

    def pop(self):
        return _cwee.IntVector_pop(self)

    def append(self, x):
        return _cwee.IntVector_append(self, x)

    def empty(self):
        return _cwee.IntVector_empty(self)

    def size(self):
        return _cwee.IntVector_size(self)

    def swap(self, v):
        return _cwee.IntVector_swap(self, v)

    def begin(self):
        return _cwee.IntVector_begin(self)

    def end(self):
        return _cwee.IntVector_end(self)

    def rbegin(self):
        return _cwee.IntVector_rbegin(self)

    def rend(self):
        return _cwee.IntVector_rend(self)

    def clear(self):
        return _cwee.IntVector_clear(self)

    def get_allocator(self):
        return _cwee.IntVector_get_allocator(self)

    def pop_back(self):
        return _cwee.IntVector_pop_back(self)

    def erase(self, *args):
        return _cwee.IntVector_erase(self, *args)

    def __init__(self, *args):
        _cwee.IntVector_swiginit(self, _cwee.new_IntVector(*args))

    def push_back(self, x):
        return _cwee.IntVector_push_back(self, x)

    def front(self):
        return _cwee.IntVector_front(self)

    def back(self):
        return _cwee.IntVector_back(self)

    def assign(self, n, x):
        return _cwee.IntVector_assign(self, n, x)

    def resize(self, *args):
        return _cwee.IntVector_resize(self, *args)

    def insert(self, *args):
        return _cwee.IntVector_insert(self, *args)

    def reserve(self, n):
        return _cwee.IntVector_reserve(self, n)

    def capacity(self):
        return _cwee.IntVector_capacity(self)
    __swig_destroy__ = _cwee.delete_IntVector

# Register IntVector in _cwee:
_cwee.IntVector_swigregister(IntVector)
class FloatVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _cwee.FloatVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _cwee.FloatVector___nonzero__(self)

    def __bool__(self):
        return _cwee.FloatVector___bool__(self)

    def __len__(self):
        return _cwee.FloatVector___len__(self)

    def __getslice__(self, i, j):
        return _cwee.FloatVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _cwee.FloatVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _cwee.FloatVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _cwee.FloatVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _cwee.FloatVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _cwee.FloatVector___setitem__(self, *args)

    def pop(self):
        return _cwee.FloatVector_pop(self)

    def append(self, x):
        return _cwee.FloatVector_append(self, x)

    def empty(self):
        return _cwee.FloatVector_empty(self)

    def size(self):
        return _cwee.FloatVector_size(self)

    def swap(self, v):
        return _cwee.FloatVector_swap(self, v)

    def begin(self):
        return _cwee.FloatVector_begin(self)

    def end(self):
        return _cwee.FloatVector_end(self)

    def rbegin(self):
        return _cwee.FloatVector_rbegin(self)

    def rend(self):
        return _cwee.FloatVector_rend(self)

    def clear(self):
        return _cwee.FloatVector_clear(self)

    def get_allocator(self):
        return _cwee.FloatVector_get_allocator(self)

    def pop_back(self):
        return _cwee.FloatVector_pop_back(self)

    def erase(self, *args):
        return _cwee.FloatVector_erase(self, *args)

    def __init__(self, *args):
        _cwee.FloatVector_swiginit(self, _cwee.new_FloatVector(*args))

    def push_back(self, x):
        return _cwee.FloatVector_push_back(self, x)

    def front(self):
        return _cwee.FloatVector_front(self)

    def back(self):
        return _cwee.FloatVector_back(self)

    def assign(self, n, x):
        return _cwee.FloatVector_assign(self, n, x)

    def resize(self, *args):
        return _cwee.FloatVector_resize(self, *args)

    def insert(self, *args):
        return _cwee.FloatVector_insert(self, *args)

    def reserve(self, n):
        return _cwee.FloatVector_reserve(self, n)

    def capacity(self):
        return _cwee.FloatVector_capacity(self)
    __swig_destroy__ = _cwee.delete_FloatVector

# Register FloatVector in _cwee:
_cwee.FloatVector_swigregister(FloatVector)
class DoubleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _cwee.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _cwee.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _cwee.DoubleVector___bool__(self)

    def __len__(self):
        return _cwee.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _cwee.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _cwee.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _cwee.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _cwee.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _cwee.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _cwee.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _cwee.DoubleVector_pop(self)

    def append(self, x):
        return _cwee.DoubleVector_append(self, x)

    def empty(self):
        return _cwee.DoubleVector_empty(self)

    def size(self):
        return _cwee.DoubleVector_size(self)

    def swap(self, v):
        return _cwee.DoubleVector_swap(self, v)

    def begin(self):
        return _cwee.DoubleVector_begin(self)

    def end(self):
        return _cwee.DoubleVector_end(self)

    def rbegin(self):
        return _cwee.DoubleVector_rbegin(self)

    def rend(self):
        return _cwee.DoubleVector_rend(self)

    def clear(self):
        return _cwee.DoubleVector_clear(self)

    def get_allocator(self):
        return _cwee.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _cwee.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _cwee.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        _cwee.DoubleVector_swiginit(self, _cwee.new_DoubleVector(*args))

    def push_back(self, x):
        return _cwee.DoubleVector_push_back(self, x)

    def front(self):
        return _cwee.DoubleVector_front(self)

    def back(self):
        return _cwee.DoubleVector_back(self)

    def assign(self, n, x):
        return _cwee.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _cwee.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _cwee.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _cwee.DoubleVector_reserve(self, n)

    def capacity(self):
        return _cwee.DoubleVector_capacity(self)
    __swig_destroy__ = _cwee.delete_DoubleVector

# Register DoubleVector in _cwee:
_cwee.DoubleVector_swigregister(DoubleVector)
class StringPair(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _cwee.StringPair_swiginit(self, _cwee.new_StringPair(*args))
    first = property(_cwee.StringPair_first_get, _cwee.StringPair_first_set)
    second = property(_cwee.StringPair_second_get, _cwee.StringPair_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _cwee.delete_StringPair

# Register StringPair in _cwee:
_cwee.StringPair_swigregister(StringPair)
class StringMap(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _cwee.StringMap_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _cwee.StringMap___nonzero__(self)

    def __bool__(self):
        return _cwee.StringMap___bool__(self)

    def __len__(self):
        return _cwee.StringMap___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _cwee.StringMap___getitem__(self, key)

    def __delitem__(self, key):
        return _cwee.StringMap___delitem__(self, key)

    def has_key(self, key):
        return _cwee.StringMap_has_key(self, key)

    def keys(self):
        return _cwee.StringMap_keys(self)

    def values(self):
        return _cwee.StringMap_values(self)

    def items(self):
        return _cwee.StringMap_items(self)

    def __contains__(self, key):
        return _cwee.StringMap___contains__(self, key)

    def key_iterator(self):
        return _cwee.StringMap_key_iterator(self)

    def value_iterator(self):
        return _cwee.StringMap_value_iterator(self)

    def __str__(self):
        s = str("{")
        addedPrevious = False
        for x in self:
            if addedPrevious == False:
                addedPrevious = True
                s += str(str(x) + ": " + str(self[x]))
            else:
                s += str(", " + str(x) + ": " + str(self[x]))         
        s += "}"
        return s;
    def __repr__(self):
        return self.__str__()


    def __setitem__(self, *args):
        return _cwee.StringMap___setitem__(self, *args)

    def asdict(self):
        return _cwee.StringMap_asdict(self)

    def __init__(self, *args):
        _cwee.StringMap_swiginit(self, _cwee.new_StringMap(*args))

    def empty(self):
        return _cwee.StringMap_empty(self)

    def size(self):
        return _cwee.StringMap_size(self)

    def swap(self, v):
        return _cwee.StringMap_swap(self, v)

    def begin(self):
        return _cwee.StringMap_begin(self)

    def end(self):
        return _cwee.StringMap_end(self)

    def rbegin(self):
        return _cwee.StringMap_rbegin(self)

    def rend(self):
        return _cwee.StringMap_rend(self)

    def clear(self):
        return _cwee.StringMap_clear(self)

    def get_allocator(self):
        return _cwee.StringMap_get_allocator(self)

    def count(self, x):
        return _cwee.StringMap_count(self, x)

    def erase(self, *args):
        return _cwee.StringMap_erase(self, *args)

    def find(self, x):
        return _cwee.StringMap_find(self, x)

    def lower_bound(self, x):
        return _cwee.StringMap_lower_bound(self, x)

    def upper_bound(self, x):
        return _cwee.StringMap_upper_bound(self, x)
    __swig_destroy__ = _cwee.delete_StringMap

# Register StringMap in _cwee:
_cwee.StringMap_swigregister(StringMap)
RED = _cwee.RED
BLUE = _cwee.BLUE
GREEN = _cwee.GREEN
LEFT = _cwee.LEFT
RIGHT = _cwee.RIGHT
LINEAR = _cwee.LINEAR
SPLINE = _cwee.SPLINE
class cweeDateTime(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _cwee.cweeDateTime_swiginit(self, _cwee.new_cweeDateTime(*args))
    unixTime = property(_cwee.cweeDateTime_unixTime_get, _cwee.cweeDateTime_unixTime_set)
    year = property(_cwee.cweeDateTime_year_get, _cwee.cweeDateTime_year_set)
    month = property(_cwee.cweeDateTime_month_get, _cwee.cweeDateTime_month_set)
    day = property(_cwee.cweeDateTime_day_get, _cwee.cweeDateTime_day_set)
    hour = property(_cwee.cweeDateTime_hour_get, _cwee.cweeDateTime_hour_set)
    minute = property(_cwee.cweeDateTime_minute_get, _cwee.cweeDateTime_minute_set)
    second = property(_cwee.cweeDateTime_second_get, _cwee.cweeDateTime_second_set)
    milliseconds = property(_cwee.cweeDateTime_milliseconds_get, _cwee.cweeDateTime_milliseconds_set)
    __swig_destroy__ = _cwee.delete_cweeDateTime

# Register cweeDateTime in _cwee:
_cwee.cweeDateTime_swigregister(cweeDateTime)
class Awaiter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _cwee.Awaiter_swiginit(self, _cwee.new_Awaiter())

    def IsFinished(self):
        return _cwee.Awaiter_IsFinished(self)

    def Result(self):
        return _cwee.Awaiter_Result(self)
    data_m = property(_cwee.Awaiter_data_m_get, _cwee.Awaiter_data_m_set)
    isFinished_m = property(_cwee.Awaiter_isFinished_m_get, _cwee.Awaiter_isFinished_m_set)
    __swig_destroy__ = _cwee.delete_Awaiter

# Register Awaiter in _cwee:
_cwee.Awaiter_swigregister(Awaiter)
class SharedMatrix(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _cwee.SharedMatrix_swiginit(self, _cwee.new_SharedMatrix(*args))
    __swig_destroy__ = _cwee.delete_SharedMatrix

    def Clear(self):
        return _cwee.SharedMatrix_Clear(self)

    def AppendData(self, X, Y, value):
        return _cwee.SharedMatrix_AppendData(self, X, Y, value)

    def GetValue(self, X, Y):
        return _cwee.SharedMatrix_GetValue(self, X, Y)

    def GetKnotSeries(self, Left, Top, Right, Bottom, numColumns, numRows):
        return _cwee.SharedMatrix_GetKnotSeries(self, Left, Top, Right, Bottom, numColumns, numRows)

    def GetTimeSeries(self, Left, Top, Right, Bottom, numColumns, numRows):
        return _cwee.SharedMatrix_GetTimeSeries(self, Left, Top, Right, Bottom, numColumns, numRows)

    def GetMinX(self):
        return _cwee.SharedMatrix_GetMinX(self)

    def GetMaxX(self):
        return _cwee.SharedMatrix_GetMaxX(self)

    def GetMinY(self):
        return _cwee.SharedMatrix_GetMinY(self)

    def GetMaxY(self):
        return _cwee.SharedMatrix_GetMaxY(self)

    def GetMinValue(self):
        return _cwee.SharedMatrix_GetMinValue(self)

    def GetMaxValue(self):
        return _cwee.SharedMatrix_GetMaxValue(self)

    def GetNumValues(self):
        return _cwee.SharedMatrix_GetNumValues(self)

    def Index(self):
        return _cwee.SharedMatrix_Index(self)

# Register SharedMatrix in _cwee:
_cwee.SharedMatrix_swigregister(SharedMatrix)
class SharedTimeSeriesPattern(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _cwee.SharedTimeSeriesPattern_swiginit(self, _cwee.new_SharedTimeSeriesPattern(*args))
    __swig_destroy__ = _cwee.delete_SharedTimeSeriesPattern

    def Clear(self):
        return _cwee.SharedTimeSeriesPattern_Clear(self)

    def AppendData(self, time, value):
        return _cwee.SharedTimeSeriesPattern_AppendData(self, time, value)

    def GetValue(self, time):
        return _cwee.SharedTimeSeriesPattern_GetValue(self, time)

    def GetAvgValue(self, time1, time2):
        return _cwee.SharedTimeSeriesPattern_GetAvgValue(self, time1, time2)

    def GetTimeSeries(self):
        return _cwee.SharedTimeSeriesPattern_GetTimeSeries(self)

    def GetMinTime(self):
        return _cwee.SharedTimeSeriesPattern_GetMinTime(self)

    def GetMaxTime(self):
        return _cwee.SharedTimeSeriesPattern_GetMaxTime(self)

    def GetNumValues(self):
        return _cwee.SharedTimeSeriesPattern_GetNumValues(self)

    def GetInterpolationType(self):
        return _cwee.SharedTimeSeriesPattern_GetInterpolationType(self)

    def X_Units(self):
        return _cwee.SharedTimeSeriesPattern_X_Units(self)

    def Y_Units(self):
        return _cwee.SharedTimeSeriesPattern_Y_Units(self)

    def Index(self):
        return _cwee.SharedTimeSeriesPattern_Index(self)

# Register SharedTimeSeriesPattern in _cwee:
_cwee.SharedTimeSeriesPattern_swigregister(SharedTimeSeriesPattern)
class SharedString(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _cwee.SharedString_swiginit(self, _cwee.new_SharedString(*args))
    __swig_destroy__ = _cwee.delete_SharedString

    def Set(self, v):
        return _cwee.SharedString_Set(self, v)

    def Get(self):
        return _cwee.SharedString_Get(self)

    def Index(self):
        return _cwee.SharedString_Index(self)

# Register SharedString in _cwee:
_cwee.SharedString_swigregister(SharedString)
class WaterWatchEnums(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _cwee.WaterWatchEnums_swiginit(self, _cwee.new_WaterWatchEnums())
    __swig_destroy__ = _cwee.delete_WaterWatchEnums
    Id = _cwee.WaterWatchEnums_Id
    Fun_Call = _cwee.WaterWatchEnums_Fun_Call
    Unused_Return_Fun_Call = _cwee.WaterWatchEnums_Unused_Return_Fun_Call
    Arg_List = _cwee.WaterWatchEnums_Arg_List
    Equation = _cwee.WaterWatchEnums_Equation
    Var_Decl = _cwee.WaterWatchEnums_Var_Decl
    Assign_Decl = _cwee.WaterWatchEnums_Assign_Decl
    Array_Call = _cwee.WaterWatchEnums_Array_Call
    Dot_Access = _cwee.WaterWatchEnums_Dot_Access
    Lambda = _cwee.WaterWatchEnums_Lambda
    Block = _cwee.WaterWatchEnums_Block
    Scopeless_Block = _cwee.WaterWatchEnums_Scopeless_Block
    Def = _cwee.WaterWatchEnums_Def
    While = _cwee.WaterWatchEnums_While
    If = _cwee.WaterWatchEnums_If
    For = _cwee.WaterWatchEnums_For
    Ranged_For = _cwee.WaterWatchEnums_Ranged_For
    Inline_Array = _cwee.WaterWatchEnums_Inline_Array
    Inline_Map = _cwee.WaterWatchEnums_Inline_Map
    Return = _cwee.WaterWatchEnums_Return
    File = _cwee.WaterWatchEnums_File
    Prefix = _cwee.WaterWatchEnums_Prefix
    Break = _cwee.WaterWatchEnums_Break
    Continue = _cwee.WaterWatchEnums_Continue
    Map_Pair = _cwee.WaterWatchEnums_Map_Pair
    Value_Range = _cwee.WaterWatchEnums_Value_Range
    Inline_Range = _cwee.WaterWatchEnums_Inline_Range
    Do = _cwee.WaterWatchEnums_Do
    Try = _cwee.WaterWatchEnums_Try
    Catch = _cwee.WaterWatchEnums_Catch
    Finally = _cwee.WaterWatchEnums_Finally
    Method = _cwee.WaterWatchEnums_Method
    Attr_Decl = _cwee.WaterWatchEnums_Attr_Decl
    Logical_And = _cwee.WaterWatchEnums_Logical_And
    Logical_Or = _cwee.WaterWatchEnums_Logical_Or
    Reference = _cwee.WaterWatchEnums_Reference
    Switch = _cwee.WaterWatchEnums_Switch
    Case = _cwee.WaterWatchEnums_Case
    Default = _cwee.WaterWatchEnums_Default
    Noop = _cwee.WaterWatchEnums_Noop
    Class = _cwee.WaterWatchEnums_Class
    Binary = _cwee.WaterWatchEnums_Binary
    Arg = _cwee.WaterWatchEnums_Arg
    Global_Decl = _cwee.WaterWatchEnums_Global_Decl
    Constant = _cwee.WaterWatchEnums_Constant
    Compiled = _cwee.WaterWatchEnums_Compiled
    ControlBlock = _cwee.WaterWatchEnums_ControlBlock
    Postfix = _cwee.WaterWatchEnums_Postfix
    Assign_Retroactively = _cwee.WaterWatchEnums_Assign_Retroactively
    Error = _cwee.WaterWatchEnums_Error

# Register WaterWatchEnums in _cwee:
_cwee.WaterWatchEnums_swigregister(WaterWatchEnums)
class ScriptingNode(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _cwee.ScriptingNode_swiginit(self, _cwee.new_ScriptingNode())
    __swig_destroy__ = _cwee.delete_ScriptingNode

    def text_get(self):
        return _cwee.ScriptingNode_text_get(self)

    def startLine_get(self):
        return _cwee.ScriptingNode_startLine_get(self)

    def startColumn_get(self):
        return _cwee.ScriptingNode_startColumn_get(self)

    def endLine_get(self):
        return _cwee.ScriptingNode_endLine_get(self)

    def endColumn_get(self):
        return _cwee.ScriptingNode_endColumn_get(self)

    def type_get(self):
        return _cwee.ScriptingNode_type_get(self)

    def typeHint_get(self):
        return _cwee.ScriptingNode_typeHint_get(self)

    def depth_get(self):
        return _cwee.ScriptingNode_depth_get(self)

    def text_set(self, s):
        return _cwee.ScriptingNode_text_set(self, s)

    def startLine_set(self, s):
        return _cwee.ScriptingNode_startLine_set(self, s)

    def startColumn_set(self, s):
        return _cwee.ScriptingNode_startColumn_set(self, s)

    def endLine_set(self, s):
        return _cwee.ScriptingNode_endLine_set(self, s)

    def endColumn_set(self, s):
        return _cwee.ScriptingNode_endColumn_set(self, s)

    def type_set(self, s):
        return _cwee.ScriptingNode_type_set(self, s)

    def typeHint_set(self, s):
        return _cwee.ScriptingNode_typeHint_set(self, s)

    def depth_set(self, s):
        return _cwee.ScriptingNode_depth_set(self, s)

# Register ScriptingNode in _cwee:
_cwee.ScriptingNode_swigregister(ScriptingNode)
class ScriptEngine(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _cwee.ScriptEngine_swiginit(self, _cwee.new_ScriptEngine())
    __swig_destroy__ = _cwee.delete_ScriptEngine

    def DoScript_Cast_VectorStrings(self, command):
        return _cwee.ScriptEngine_DoScript_Cast_VectorStrings(self, command)

    def DoScript_Cast_VectorFloats(self, command):
        return _cwee.ScriptEngine_DoScript_Cast_VectorFloats(self, command)

    def DoScript(self, command):
        return _cwee.ScriptEngine_DoScript(self, command)

    def DoScriptAsync(self, command):
        return _cwee.ScriptEngine_DoScriptAsync(self, command)

    def PreParseScript(self, command):
        return _cwee.ScriptEngine_PreParseScript(self, command)

    def CompatibleFunctions(self, TypeName):
        return _cwee.ScriptEngine_CompatibleFunctions(self, TypeName)

    def FunctionsThatStartWith(self, startsWith):
        return _cwee.ScriptEngine_FunctionsThatStartWith(self, startsWith)

    def StopCurrentScript(self):
        return _cwee.ScriptEngine_StopCurrentScript(self)

    def Cast_String(self, command):
        return _cwee.ScriptEngine_Cast_String(self, command)

    def Cast_VectorFloats(self, command):
        return _cwee.ScriptEngine_Cast_VectorFloats(self, command)

# Register ScriptEngine in _cwee:
_cwee.ScriptEngine_swigregister(ScriptEngine)
class Geocoding(object):
    r"""Static class (i.e. namespace) that contains geocoding functions."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def Geocode(*args):
        r"""Using an address or decimal longitude/latitude, will perform geocoding with OpenStreetMap and return the best matched location."""
        return _cwee.Geocoding_Geocode(*args)

    @staticmethod
    def Elevation_ft(*args):
        r"""Using an address or decimal longitude/latitude, will estimate the USGS elevation for the site (feet above sea level)."""
        return _cwee.Geocoding_Elevation_ft(*args)

    def __init__(self):
        r"""Static class (i.e. namespace) that contains geocoding functions."""
        _cwee.Geocoding_swiginit(self, _cwee.new_Geocoding())
    __swig_destroy__ = _cwee.delete_Geocoding

# Register Geocoding in _cwee:
_cwee.Geocoding_swigregister(Geocoding)
class WaterWatch(object):
    r"""Static class (i.e. namespace) that contains the main functions of the library"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def half1(v):
        return _cwee.WaterWatch_half1(v)

    @staticmethod
    def half2(v):
        return _cwee.WaterWatch_half2(v)

    @staticmethod
    def half3(v):
        return _cwee.WaterWatch_half3(v)

    @staticmethod
    def TestVector():
        r"""Generates random numbers"""
        return _cwee.WaterWatch_TestVector()

    @staticmethod
    def TestVector2(*args):
        r"""Returns the size of the input vector"""
        return _cwee.WaterWatch_TestVector2(*args)

    @staticmethod
    def SubmitToast(title, content):
        return _cwee.WaterWatch_SubmitToast(title, content)

    @staticmethod
    def TryGetToast():
        return _cwee.WaterWatch_TryGetToast()

    @staticmethod
    def TryGetAppRequest():
        return _cwee.WaterWatch_TryGetAppRequest()

    @staticmethod
    def CompleteAppRequest(ID, reply):
        return _cwee.WaterWatch_CompleteAppRequest(ID, reply)

    @staticmethod
    def GetDataDirectory():
        return _cwee.WaterWatch_GetDataDirectory()

    @staticmethod
    def SetDataDirectory(dir):
        return _cwee.WaterWatch_SetDataDirectory(dir)

    @staticmethod
    def GetTemporaryFilePath(extension):
        return _cwee.WaterWatch_GetTemporaryFilePath(extension)

    @staticmethod
    def GeocodeAddress(*args):
        return _cwee.WaterWatch_GeocodeAddress(*args)

    @staticmethod
    def GeocodeElevation(longitude, latitude):
        return _cwee.WaterWatch_GeocodeElevation(longitude, latitude)

    @staticmethod
    def ValidateCoordinates(longitude, latitude):
        return _cwee.WaterWatch_ValidateCoordinates(longitude, latitude)

    @staticmethod
    def Encode_2D_to_1D(x, y, H):
        return _cwee.WaterWatch_Encode_2D_to_1D(x, y, H)

    @staticmethod
    def Decode_1D_to_2D(l, H):
        return _cwee.WaterWatch_Decode_1D_to_2D(l, H)

    @staticmethod
    def PredictNext(data, nextN):
        return _cwee.WaterWatch_PredictNext(data, nextN)

    @staticmethod
    def getCurrentTime():
        return _cwee.WaterWatch_getCurrentTime()

    @staticmethod
    def RandomInt(min, max):
        return _cwee.WaterWatch_RandomInt(min, max)

    @staticmethod
    def RandomFloat(min, max):
        return _cwee.WaterWatch_RandomFloat(min, max)

    @staticmethod
    def GetBestMatch(input, options):
        return _cwee.WaterWatch_GetBestMatch(input, options)

    @staticmethod
    def GetNumMultithreadingCores():
        return _cwee.WaterWatch_GetNumMultithreadingCores()

    @staticmethod
    def GetNumLogicalCoresOnMachine():
        return _cwee.WaterWatch_GetNumLogicalCoresOnMachine()

    @staticmethod
    def GetNumPhysicalCoresOnMachine():
        return _cwee.WaterWatch_GetNumPhysicalCoresOnMachine()

    @staticmethod
    def GetPercentMemoryUsedOfMachine():
        return _cwee.WaterWatch_GetPercentMemoryUsedOfMachine()

    @staticmethod
    def GetPercentCpuUsedOfMachine():
        return _cwee.WaterWatch_GetPercentCpuUsedOfMachine()

    @staticmethod
    def DoScript(command):
        return _cwee.WaterWatch_DoScript(command)

    @staticmethod
    def DoScriptImmediately(command):
        return _cwee.WaterWatch_DoScriptImmediately(command)

    @staticmethod
    def AddToLog(filePath, content):
        return _cwee.WaterWatch_AddToLog(filePath, content)

    @staticmethod
    def GetNanosecondsSinceStart():
        return _cwee.WaterWatch_GetNanosecondsSinceStart()

    def __init__(self):
        r"""Static class (i.e. namespace) that contains the main functions of the library"""
        _cwee.WaterWatch_swiginit(self, _cwee.new_WaterWatch())
    __swig_destroy__ = _cwee.delete_WaterWatch

# Register WaterWatch in _cwee:
_cwee.WaterWatch_swigregister(WaterWatch)
class pair_timeseries(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _cwee.pair_timeseries_swiginit(self, _cwee.new_pair_timeseries(*args))
    first = property(_cwee.pair_timeseries_first_get, _cwee.pair_timeseries_first_set)
    second = property(_cwee.pair_timeseries_second_get, _cwee.pair_timeseries_second_set)
    __swig_destroy__ = _cwee.delete_pair_timeseries

# Register pair_timeseries in _cwee:
_cwee.pair_timeseries_swigregister(pair_timeseries)
class pair_double_double(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _cwee.pair_double_double_swiginit(self, _cwee.new_pair_double_double(*args))
    first = property(_cwee.pair_double_double_first_get, _cwee.pair_double_double_first_set)
    second = property(_cwee.pair_double_double_second_get, _cwee.pair_double_double_second_set)
    __swig_destroy__ = _cwee.delete_pair_double_double

# Register pair_double_double in _cwee:
_cwee.pair_double_double_swigregister(pair_double_double)
class pair_string_string(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _cwee.pair_string_string_swiginit(self, _cwee.new_pair_string_string(*args))
    first = property(_cwee.pair_string_string_first_get, _cwee.pair_string_string_first_set)
    second = property(_cwee.pair_string_string_second_get, _cwee.pair_string_string_second_set)
    __swig_destroy__ = _cwee.delete_pair_string_string

# Register pair_string_string in _cwee:
_cwee.pair_string_string_swigregister(pair_string_string)
class pair_bool_pair_string_string(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _cwee.pair_bool_pair_string_string_swiginit(self, _cwee.new_pair_bool_pair_string_string(*args))
    first = property(_cwee.pair_bool_pair_string_string_first_get, _cwee.pair_bool_pair_string_string_first_set)
    second = property(_cwee.pair_bool_pair_string_string_second_get, _cwee.pair_bool_pair_string_string_second_set)
    __swig_destroy__ = _cwee.delete_pair_bool_pair_string_string

# Register pair_bool_pair_string_string in _cwee:
_cwee.pair_bool_pair_string_string_swigregister(pair_bool_pair_string_string)
class pair_string_vector_string(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _cwee.pair_string_vector_string_swiginit(self, _cwee.new_pair_string_vector_string(*args))
    first = property(_cwee.pair_string_vector_string_first_get, _cwee.pair_string_vector_string_first_set)
    second = property(_cwee.pair_string_vector_string_second_get, _cwee.pair_string_vector_string_second_set)
    __swig_destroy__ = _cwee.delete_pair_string_vector_string

# Register pair_string_vector_string in _cwee:
_cwee.pair_string_vector_string_swigregister(pair_string_vector_string)
class pair_int_pair_string_vector_string(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _cwee.pair_int_pair_string_vector_string_swiginit(self, _cwee.new_pair_int_pair_string_vector_string(*args))
    first = property(_cwee.pair_int_pair_string_vector_string_first_get, _cwee.pair_int_pair_string_vector_string_first_set)
    second = property(_cwee.pair_int_pair_string_vector_string_second_get, _cwee.pair_int_pair_string_vector_string_second_set)
    __swig_destroy__ = _cwee.delete_pair_int_pair_string_vector_string

# Register pair_int_pair_string_vector_string in _cwee:
_cwee.pair_int_pair_string_vector_string_swigregister(pair_int_pair_string_vector_string)
class vector_pair_timeseries(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _cwee.vector_pair_timeseries_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _cwee.vector_pair_timeseries___nonzero__(self)

    def __bool__(self):
        return _cwee.vector_pair_timeseries___bool__(self)

    def __len__(self):
        return _cwee.vector_pair_timeseries___len__(self)

    def __getslice__(self, i, j):
        return _cwee.vector_pair_timeseries___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _cwee.vector_pair_timeseries___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _cwee.vector_pair_timeseries___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _cwee.vector_pair_timeseries___delitem__(self, *args)

    def __getitem__(self, *args):
        return _cwee.vector_pair_timeseries___getitem__(self, *args)

    def __setitem__(self, *args):
        return _cwee.vector_pair_timeseries___setitem__(self, *args)

    def pop(self):
        return _cwee.vector_pair_timeseries_pop(self)

    def append(self, x):
        return _cwee.vector_pair_timeseries_append(self, x)

    def empty(self):
        return _cwee.vector_pair_timeseries_empty(self)

    def size(self):
        return _cwee.vector_pair_timeseries_size(self)

    def swap(self, v):
        return _cwee.vector_pair_timeseries_swap(self, v)

    def begin(self):
        return _cwee.vector_pair_timeseries_begin(self)

    def end(self):
        return _cwee.vector_pair_timeseries_end(self)

    def rbegin(self):
        return _cwee.vector_pair_timeseries_rbegin(self)

    def rend(self):
        return _cwee.vector_pair_timeseries_rend(self)

    def clear(self):
        return _cwee.vector_pair_timeseries_clear(self)

    def get_allocator(self):
        return _cwee.vector_pair_timeseries_get_allocator(self)

    def pop_back(self):
        return _cwee.vector_pair_timeseries_pop_back(self)

    def erase(self, *args):
        return _cwee.vector_pair_timeseries_erase(self, *args)

    def __init__(self, *args):
        _cwee.vector_pair_timeseries_swiginit(self, _cwee.new_vector_pair_timeseries(*args))

    def push_back(self, x):
        return _cwee.vector_pair_timeseries_push_back(self, x)

    def front(self):
        return _cwee.vector_pair_timeseries_front(self)

    def back(self):
        return _cwee.vector_pair_timeseries_back(self)

    def assign(self, n, x):
        return _cwee.vector_pair_timeseries_assign(self, n, x)

    def resize(self, *args):
        return _cwee.vector_pair_timeseries_resize(self, *args)

    def insert(self, *args):
        return _cwee.vector_pair_timeseries_insert(self, *args)

    def reserve(self, n):
        return _cwee.vector_pair_timeseries_reserve(self, n)

    def capacity(self):
        return _cwee.vector_pair_timeseries_capacity(self)
    __swig_destroy__ = _cwee.delete_vector_pair_timeseries

# Register vector_pair_timeseries in _cwee:
_cwee.vector_pair_timeseries_swigregister(vector_pair_timeseries)
class vector_pair_double_double(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _cwee.vector_pair_double_double_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _cwee.vector_pair_double_double___nonzero__(self)

    def __bool__(self):
        return _cwee.vector_pair_double_double___bool__(self)

    def __len__(self):
        return _cwee.vector_pair_double_double___len__(self)

    def __getslice__(self, i, j):
        return _cwee.vector_pair_double_double___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _cwee.vector_pair_double_double___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _cwee.vector_pair_double_double___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _cwee.vector_pair_double_double___delitem__(self, *args)

    def __getitem__(self, *args):
        return _cwee.vector_pair_double_double___getitem__(self, *args)

    def __setitem__(self, *args):
        return _cwee.vector_pair_double_double___setitem__(self, *args)

    def pop(self):
        return _cwee.vector_pair_double_double_pop(self)

    def append(self, x):
        return _cwee.vector_pair_double_double_append(self, x)

    def empty(self):
        return _cwee.vector_pair_double_double_empty(self)

    def size(self):
        return _cwee.vector_pair_double_double_size(self)

    def swap(self, v):
        return _cwee.vector_pair_double_double_swap(self, v)

    def begin(self):
        return _cwee.vector_pair_double_double_begin(self)

    def end(self):
        return _cwee.vector_pair_double_double_end(self)

    def rbegin(self):
        return _cwee.vector_pair_double_double_rbegin(self)

    def rend(self):
        return _cwee.vector_pair_double_double_rend(self)

    def clear(self):
        return _cwee.vector_pair_double_double_clear(self)

    def get_allocator(self):
        return _cwee.vector_pair_double_double_get_allocator(self)

    def pop_back(self):
        return _cwee.vector_pair_double_double_pop_back(self)

    def erase(self, *args):
        return _cwee.vector_pair_double_double_erase(self, *args)

    def __init__(self, *args):
        _cwee.vector_pair_double_double_swiginit(self, _cwee.new_vector_pair_double_double(*args))

    def push_back(self, x):
        return _cwee.vector_pair_double_double_push_back(self, x)

    def front(self):
        return _cwee.vector_pair_double_double_front(self)

    def back(self):
        return _cwee.vector_pair_double_double_back(self)

    def assign(self, n, x):
        return _cwee.vector_pair_double_double_assign(self, n, x)

    def resize(self, *args):
        return _cwee.vector_pair_double_double_resize(self, *args)

    def insert(self, *args):
        return _cwee.vector_pair_double_double_insert(self, *args)

    def reserve(self, n):
        return _cwee.vector_pair_double_double_reserve(self, n)

    def capacity(self):
        return _cwee.vector_pair_double_double_capacity(self)
    __swig_destroy__ = _cwee.delete_vector_pair_double_double

# Register vector_pair_double_double in _cwee:
_cwee.vector_pair_double_double_swigregister(vector_pair_double_double)
class vector_scriptingnode(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _cwee.vector_scriptingnode_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _cwee.vector_scriptingnode___nonzero__(self)

    def __bool__(self):
        return _cwee.vector_scriptingnode___bool__(self)

    def __len__(self):
        return _cwee.vector_scriptingnode___len__(self)

    def __getslice__(self, i, j):
        return _cwee.vector_scriptingnode___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _cwee.vector_scriptingnode___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _cwee.vector_scriptingnode___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _cwee.vector_scriptingnode___delitem__(self, *args)

    def __getitem__(self, *args):
        return _cwee.vector_scriptingnode___getitem__(self, *args)

    def __setitem__(self, *args):
        return _cwee.vector_scriptingnode___setitem__(self, *args)

    def pop(self):
        return _cwee.vector_scriptingnode_pop(self)

    def append(self, x):
        return _cwee.vector_scriptingnode_append(self, x)

    def empty(self):
        return _cwee.vector_scriptingnode_empty(self)

    def size(self):
        return _cwee.vector_scriptingnode_size(self)

    def swap(self, v):
        return _cwee.vector_scriptingnode_swap(self, v)

    def begin(self):
        return _cwee.vector_scriptingnode_begin(self)

    def end(self):
        return _cwee.vector_scriptingnode_end(self)

    def rbegin(self):
        return _cwee.vector_scriptingnode_rbegin(self)

    def rend(self):
        return _cwee.vector_scriptingnode_rend(self)

    def clear(self):
        return _cwee.vector_scriptingnode_clear(self)

    def get_allocator(self):
        return _cwee.vector_scriptingnode_get_allocator(self)

    def pop_back(self):
        return _cwee.vector_scriptingnode_pop_back(self)

    def erase(self, *args):
        return _cwee.vector_scriptingnode_erase(self, *args)

    def __init__(self, *args):
        _cwee.vector_scriptingnode_swiginit(self, _cwee.new_vector_scriptingnode(*args))

    def push_back(self, x):
        return _cwee.vector_scriptingnode_push_back(self, x)

    def front(self):
        return _cwee.vector_scriptingnode_front(self)

    def back(self):
        return _cwee.vector_scriptingnode_back(self)

    def assign(self, n, x):
        return _cwee.vector_scriptingnode_assign(self, n, x)

    def resize(self, *args):
        return _cwee.vector_scriptingnode_resize(self, *args)

    def insert(self, *args):
        return _cwee.vector_scriptingnode_insert(self, *args)

    def reserve(self, n):
        return _cwee.vector_scriptingnode_reserve(self, n)

    def capacity(self):
        return _cwee.vector_scriptingnode_capacity(self)
    __swig_destroy__ = _cwee.delete_vector_scriptingnode

# Register vector_scriptingnode in _cwee:
_cwee.vector_scriptingnode_swigregister(vector_scriptingnode)
class pymap(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _cwee.pymap_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _cwee.pymap___nonzero__(self)

    def __bool__(self):
        return _cwee.pymap___bool__(self)

    def __len__(self):
        return _cwee.pymap___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _cwee.pymap___getitem__(self, key)

    def __delitem__(self, key):
        return _cwee.pymap___delitem__(self, key)

    def has_key(self, key):
        return _cwee.pymap_has_key(self, key)

    def keys(self):
        return _cwee.pymap_keys(self)

    def values(self):
        return _cwee.pymap_values(self)

    def items(self):
        return _cwee.pymap_items(self)

    def __contains__(self, key):
        return _cwee.pymap___contains__(self, key)

    def key_iterator(self):
        return _cwee.pymap_key_iterator(self)

    def value_iterator(self):
        return _cwee.pymap_value_iterator(self)

    def __str__(self):
        s = str("{")
        addedPrevious = False
        for x in self:
            if addedPrevious == False:
                addedPrevious = True
                s += str(str(x) + ": " + str(self[x]))
            else:
                s += str(", " + str(x) + ": " + str(self[x]))         
        s += "}"
        return s;
    def __repr__(self):
        return self.__str__()


    def __setitem__(self, *args):
        return _cwee.pymap___setitem__(self, *args)

    def asdict(self):
        return _cwee.pymap_asdict(self)

    def __init__(self, *args):
        _cwee.pymap_swiginit(self, _cwee.new_pymap(*args))

    def empty(self):
        return _cwee.pymap_empty(self)

    def size(self):
        return _cwee.pymap_size(self)

    def swap(self, v):
        return _cwee.pymap_swap(self, v)

    def begin(self):
        return _cwee.pymap_begin(self)

    def end(self):
        return _cwee.pymap_end(self)

    def rbegin(self):
        return _cwee.pymap_rbegin(self)

    def rend(self):
        return _cwee.pymap_rend(self)

    def clear(self):
        return _cwee.pymap_clear(self)

    def get_allocator(self):
        return _cwee.pymap_get_allocator(self)

    def count(self, x):
        return _cwee.pymap_count(self, x)

    def erase(self, *args):
        return _cwee.pymap_erase(self, *args)

    def find(self, x):
        return _cwee.pymap_find(self, x)

    def lower_bound(self, x):
        return _cwee.pymap_lower_bound(self, x)

    def upper_bound(self, x):
        return _cwee.pymap_upper_bound(self, x)
    __swig_destroy__ = _cwee.delete_pymap

# Register pymap in _cwee:
_cwee.pymap_swigregister(pymap)

