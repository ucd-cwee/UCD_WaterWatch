/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.1.1
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


#define SWIG_VERSION 0x040101
#define SWIGR
/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.

  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2
#define SWIG_POINTER_NO_NULL       0x4
#define SWIG_POINTER_CLEAR         0x8
#define SWIG_POINTER_RELEASE       (SWIG_POINTER_CLEAR | SWIG_POINTER_DISOWN)

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/*
   Flags/methods for returning states.

   The SWIG conversion methods, as ConvertPtr, return an integer
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).

   Use the following macros/flags to set or process the returning
   states.

   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }

   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {
        if (<obj is ok>) {
          if (<need new object>) {
            *ptr = <ptr to new allocated object>;
            return SWIG_NEWOBJ;
          } else {
            *ptr = <ptr to old object>;
            return SWIG_OLDOBJ;
          }
        } else {
          return SWIG_BADOBJ;
        }
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows returning the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call

      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0)
/* Runtime errors are < 0 */
#define SWIG_ERROR                 (-1)
/* Errors in range -1 to -99 are in swigerrors.swg (errors for all languages including those not using the runtime) */
/* Errors in range -100 to -199 are language specific errors defined in *errors.swg */
/* Errors < -200 are generic runtime specific errors */
#define SWIG_ERROR_RELEASE_NOT_OWNED (-200)

#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del object mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) {
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) {
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/*
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(const swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/*
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  Choose the last
     name. It should be the most specific; a fully resolved name
     but not necessarily with default template parameters expanded. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;

  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start,
                            swig_module_info *end,
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      size_t l = 0;
      size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	size_t i = (l + r) >> 1;
	const char *iname = iter->types[i]->name;
	if (iname) {
	  int compare = strcmp(name, iname);
	  if (compare == 0) {
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start,
                     swig_module_info *end,
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }

  /* neither found a match */
  return 0;
}

/*
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  const unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/*
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    char d = *(c++);
    unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = (unsigned char)((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = (unsigned char)((d - ('a'-10)) << 4);
    else
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (unsigned char)(d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (unsigned char)(d - ('a'-10));
    else
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/* SWIG Errors applicable to all language modules, values are reserved from -1 to -99 */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13


/* Remove global namespace pollution */
#if !defined(SWIG_NO_R_NO_REMAP)
# define R_NO_REMAP
#endif
#if !defined(SWIG_NO_STRICT_R_HEADERS)
# define STRICT_R_HEADERS
#endif

#include <Rdefines.h>
#include <Rversion.h>

#ifdef __cplusplus
#include <exception>
extern "C" {
#endif

/* for raw pointer */
#define SWIG_R_ConvertPtr(obj, pptr, type, flags)       SWIG_R_ConvertPtrAndOwn(obj, pptr, type, flags, 0)
#define SWIG_ConvertPtr(obj, pptr, type, flags)         SWIG_R_ConvertPtr(obj, pptr, type, flags)
#define SWIG_ConvertPtrAndOwn(obj,pptr,type,flags,own)  SWIG_R_ConvertPtrAndOwn(obj, pptr, type, flags, own)
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_R_NewPointerObj(ptr, type, flags)

#include <stdio.h>
#include <stdlib.h>
#include <assert.h>
#include <stdarg.h>

#if R_VERSION >= R_Version(2,6,0)
#define VMAXTYPE void *
#else
#define VMAXTYPE char *
#endif

/* Last error */
static int SWIG_lasterror_code = 0;
static char SWIG_lasterror_msg[1024];
SWIGRUNTIME void SWIG_Error(int code, const char *format, ...) {
  va_list arg;
  SWIG_lasterror_code = code;
  va_start(arg, format);
  vsnprintf(SWIG_lasterror_msg, sizeof(SWIG_lasterror_msg), format, arg);
  va_end(arg);
}

SWIGRUNTIME const char *SWIG_ErrorType(int code) {
  switch (code) {
  case SWIG_MemoryError:
    return "SWIG:MemoryError";
  case SWIG_IOError:
    return "SWIG:IOError";
  case SWIG_RuntimeError:
    return "SWIG:RuntimeError";
  case SWIG_IndexError:
    return "SWIG:IndexError";
  case SWIG_TypeError:
    return "SWIG:TypeError";
  case SWIG_DivisionByZero:
    return "SWIG:DivisionByZero";
  case SWIG_OverflowError:
    return "SWIG:OverflowError";
  case SWIG_SyntaxError:
    return "SWIG:SyntaxError";
  case SWIG_ValueError:
    return "SWIG:ValueError";
  case SWIG_SystemError:
    return "SWIG:SystemError";
  case SWIG_AttributeError:
    return "SWIG:AttributeError";
  }
  return "SWIG:UnknownError";
}

#define SWIG_fail goto fail

/*
  This is mainly a way to avoid having lots of local variables that may 
  conflict with those in the routine.

   Change name to R_SWIG_Callb....
*/
typedef struct RCallbackFunctionData {

  SEXP fun;
  SEXP userData;


  SEXP expr;
  SEXP retValue;
  int errorOccurred;

  SEXP el;  /* Temporary pointer used in the construction of the expression to call the R function. */

  struct RCallbackFunctionData *previous;   /* Stack */

} RCallbackFunctionData;

static RCallbackFunctionData  *callbackFunctionDataStack;


SWIGRUNTIME SEXP
R_SWIG_debug_getCallbackFunctionData()
{
  int n, i;
  SEXP ans;
  RCallbackFunctionData  *p = callbackFunctionDataStack;

  n = 0;
  while(p) { 
    n++;
    p = p->previous;
  }

  Rf_protect(ans = Rf_allocVector(VECSXP, n));
  for(p = callbackFunctionDataStack, i = 0; i < n; p = p->previous, i++) 
      SET_VECTOR_ELT(ans, i, p->fun);

  Rf_unprotect(1);

  return(ans);
}



SWIGRUNTIME RCallbackFunctionData *
R_SWIG_pushCallbackFunctionData(SEXP fun, SEXP userData)
{
   RCallbackFunctionData *el;
   el = (RCallbackFunctionData *) calloc(1, sizeof(RCallbackFunctionData));
   el->fun = fun;
   el->userData = userData;
   el->previous = callbackFunctionDataStack;

   callbackFunctionDataStack = el;

   return(el);
}


SWIGRUNTIME SEXP
R_SWIG_R_pushCallbackFunctionData(SEXP fun, SEXP userData)
{
    R_SWIG_pushCallbackFunctionData(fun, userData);
    return R_NilValue;
}

SWIGRUNTIME RCallbackFunctionData *
R_SWIG_getCallbackFunctionData()
{
  if(!callbackFunctionDataStack) {
    Rf_error("Supposedly impossible error occurred in the SWIG callback mechanism."
            "  No callback function data set.");
  }
  
  return callbackFunctionDataStack;
}

SWIGRUNTIME void
R_SWIG_popCallbackFunctionData(int doFree)
{
  RCallbackFunctionData  *el = NULL;
  if(!callbackFunctionDataStack)
    return ; /* Error !!! */

  el = callbackFunctionDataStack ;
  callbackFunctionDataStack = callbackFunctionDataStack->previous;

  if(doFree)
     free(el);
}


/*
  Interface to S function
      is(obj, type)
  which is to be used to determine if an 
  external pointer inherits from the right class.

  Ideally, we would like to be able to do this without an explicit call to the is() function.
  When the S4 class system uses its own SEXP types, then we will hopefully be able to do this
  in the C code.

  Should we make the expression static and preserve it to avoid the overhead of 
  allocating each time.
*/
SWIGRUNTIME int
R_SWIG_checkInherits(SEXP obj, SEXP tag, const char *type)
{
  SEXP e, val;
  int check_err = 0;

  Rf_protect(e = Rf_allocVector(LANGSXP, 3));
  SETCAR(e, Rf_install("extends"));

  SETCAR(CDR(e), Rf_mkString(CHAR(PRINTNAME(tag))));
  SETCAR(CDR(CDR(e)), Rf_mkString(type));

  val = R_tryEval(e, R_GlobalEnv, &check_err);
  Rf_unprotect(1);
  if(check_err) 
    return(0);


  return(LOGICAL(val)[0]);
}


SWIGRUNTIME void *
R_SWIG_resolveExternalRef(SEXP arg, const char * const type, const char * const argName, Rboolean nullOk)
{
  void *ptr;
  SEXP orig = arg;

  if(TYPEOF(arg) != EXTPTRSXP) 
    arg = GET_SLOT(arg, Rf_mkString("ref"));

  
  if(TYPEOF(arg) != EXTPTRSXP) {
    Rf_error("argument %s must be an external pointer (from an ExternalReference)", argName);
  }


  ptr = R_ExternalPtrAddr(arg);

  if(ptr == NULL && nullOk == (Rboolean) FALSE) {
    Rf_error("the external pointer (of type %s) for argument %s has value NULL", argName, type);
  }

  if(type[0] && R_ExternalPtrTag(arg) != Rf_install(type) && strcmp(type, "voidRef")
      && !R_SWIG_checkInherits(orig,  R_ExternalPtrTag(arg), type)) {
    Rf_error("the external pointer for argument %s has tag %s, not the expected value %s",
             argName, CHAR(PRINTNAME(R_ExternalPtrTag(arg))), type);
  }


  return(ptr);
}

SWIGRUNTIME void
R_SWIG_ReferenceFinalizer(SEXP el)
{
  void *ptr = R_SWIG_resolveExternalRef(el, "", "<finalizer>",  (Rboolean) 1);
  fprintf(stderr, "In R_SWIG_ReferenceFinalizer for %p\n", ptr);
  Rf_PrintValue(el);

  if(ptr) {
     if(TYPEOF(el) != EXTPTRSXP)
        el = GET_SLOT(el, Rf_mkString("ref"));

     if(TYPEOF(el) == EXTPTRSXP)
        R_ClearExternalPtr(el);

     free(ptr);
  }

  return;
}

SWIGRUNTIME SEXP
SWIG_MakePtr(void *ptr, const char *typeName, int flags)
{
  SEXP external, r_obj;

  Rf_protect(external = R_MakeExternalPtr(ptr, Rf_install(typeName), R_NilValue));
  Rf_protect(r_obj = NEW_OBJECT(MAKE_CLASS((char *) typeName)));

  if (flags & SWIG_POINTER_OWN)
    R_RegisterCFinalizer(external, R_SWIG_ReferenceFinalizer);

  r_obj = SET_SLOT(r_obj, Rf_mkString((char *) "ref"), external);
  SET_S4_OBJECT(r_obj);
  Rf_unprotect(2);

  return(r_obj);
}


SWIGRUNTIME SEXP
R_SWIG_create_SWIG_R_Array(const char *typeName, SEXP ref, int len)
{
   SEXP arr;

/*XXX remove the char * cast when we can. MAKE_CLASS should be declared appropriately. */
   Rf_protect(arr = NEW_OBJECT(MAKE_CLASS((char *) typeName)));
   Rf_protect(arr = R_do_slot_assign(arr, Rf_mkString("ref"), ref));
   Rf_protect(arr = R_do_slot_assign(arr, Rf_mkString("dims"), Rf_ScalarInteger(len)));

   Rf_unprotect(3); 			   
   SET_S4_OBJECT(arr);	
   return arr;
}

#define ADD_OUTPUT_ARG(result, pos, value, name)  r_ans = AddOutputArgToReturn(pos, value, name, OutputValues);

SWIGRUNTIME SEXP
AddOutputArgToReturn(int pos, SEXP value, const char *name, SEXP output)
{
  SET_VECTOR_ELT(output, pos, value);

  return(output);
}

/* Create a new pointer object */
SWIGRUNTIMEINLINE SEXP
SWIG_R_NewPointerObj(void *ptr, swig_type_info *type, int flags) {
  SEXP rptr;
  if (!ptr) {
     return R_NilValue;
  }
  rptr = R_MakeExternalPtr(ptr, 
  R_MakeExternalPtr(type, R_NilValue, R_NilValue), R_NilValue); 
  SET_S4_OBJECT(rptr);
  return rptr;
}


/* Convert a pointer value */
SWIGRUNTIMEINLINE int
SWIG_R_ConvertPtrAndOwn(SEXP obj, void **ptr, swig_type_info *ty, int flags, int *own) {
  void *vptr;
  if (!obj) return SWIG_ERROR;
  if (own)
    *own = 0;
  if (obj == R_NilValue) {
    if (ptr) *ptr = NULL;
    return (flags & SWIG_POINTER_NO_NULL) ? SWIG_NullReferenceError : SWIG_OK;
  }

  vptr = R_ExternalPtrAddr(obj);
  if (ty) {
    swig_type_info *to = (swig_type_info*) 
      R_ExternalPtrAddr(R_ExternalPtrTag(obj));
    if (to == ty) {
      if (ptr) *ptr = vptr;
    } else {
      swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
      int newmemory = 0;
      if (ptr) {
        int newmemory = 0;
        *ptr = SWIG_TypeCast(tc, vptr, &newmemory);
        if (newmemory == SWIG_CAST_NEW_MEMORY) {
          assert(own); /* badly formed typemap which will lead to a memory leak - it must set and use own to delete *ptr */
          if (own)
            *own = *own | SWIG_CAST_NEW_MEMORY;
        }
      }
    }
  } else {
      if (ptr) *ptr = vptr;
 }
  return SWIG_OK;
}

SWIGRUNTIME swig_module_info *
SWIG_GetModule(void *SWIGUNUSEDPARM(clientdata)) {
  static void *type_pointer = (void *)0;
  return (swig_module_info *) type_pointer;
}

SWIGRUNTIME void
SWIG_SetModule(void *v, swig_module_info *swig_module) {
}

typedef struct {
  void *pack;
  swig_type_info *ty;
  size_t size;
} RSwigPacked;

/* Create a new packed object */

SWIGRUNTIMEINLINE SEXP RSwigPacked_New(void *ptr, size_t sz,
		  swig_type_info *ty) {
  SEXP rptr;
  RSwigPacked *sobj = 
  (RSwigPacked*) malloc(sizeof(RSwigPacked));
  if (sobj) {
    void *pack = malloc(sz);
    if (pack) {
      memcpy(pack, ptr, sz);
      sobj->pack = pack;
      sobj->ty   = ty;
      sobj->size = sz;
    } else {
      sobj = 0;
    }
  }
  rptr = R_MakeExternalPtr(sobj, R_NilValue, R_NilValue); 
  return rptr;
}

SWIGRUNTIME swig_type_info *
RSwigPacked_UnpackData(SEXP obj, void *ptr, size_t size)
{
    RSwigPacked *sobj = 
        (RSwigPacked *)R_ExternalPtrAddr(obj);
    if (sobj->size != size) return 0;
    memcpy(ptr, sobj->pack, size);
    return sobj->ty;
}

SWIGRUNTIMEINLINE SEXP
SWIG_R_NewPackedObj(void *ptr, size_t sz, swig_type_info *type) {
  return ptr ? RSwigPacked_New((void *) ptr, sz, type) : R_NilValue;
}

/* Convert a packed pointer value */

SWIGRUNTIME int
SWIG_R_ConvertPacked(SEXP obj, void *ptr, size_t sz, swig_type_info *ty) {
  swig_type_info *to = RSwigPacked_UnpackData(obj, ptr, sz);
  if (!to) return SWIG_ERROR;
  if (ty) {
    if (to != ty) {
      /* check type cast? */
      swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
      if (!tc) return SWIG_ERROR;
    }
  }
  return SWIG_OK;
}  

#ifdef __cplusplus
#define SWIG_exception_noreturn(code, msg) do { throw std::runtime_error(msg); } while(0)
#else
#define SWIG_exception_noreturn(code, msg) do { return result; } while(0)
#endif

#ifdef __cplusplus
}
#endif


SWIGINTERN void SWIG_R_Raise(SEXP obj, const char *msg) {
  Rf_error(Rf_isString(obj) ? CHAR(Rf_asChar(obj)) : msg);
}



#define SWIG_exception_fail(code, msg) do { SWIG_Error(code, msg); SWIG_fail; } while(0) 

#define SWIG_contract_assert(expr, msg) do { if (!(expr)) { SWIG_Error(SWIG_RuntimeError, msg); SWIG_fail; } } while (0) 



  #define SWIG_exception(code, msg) do { switch (code) {case SWIG_IndexError: return Rf_ScalarLogical(NA_LOGICAL); default: SWIG_Error(code, msg); SWIG_fail;}; } while(0) 



/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_Awaiter swig_types[0]
#define SWIGTYPE_p_Color_Interop swig_types[1]
#define SWIGTYPE_p_MapBackground_Interop swig_types[2]
#define SWIGTYPE_p_MapIcon_Interop swig_types[3]
#define SWIGTYPE_p_MapLayer_Interop swig_types[4]
#define SWIGTYPE_p_MapPolyline_Interop swig_types[5]
#define SWIGTYPE_p_PairT_bool_PairT_std__string_std__string_t_t swig_types[6]
#define SWIGTYPE_p_PairT_cweeDateTime_float_t swig_types[7]
#define SWIGTYPE_p_PairT_double_double_t swig_types[8]
#define SWIGTYPE_p_PairT_int_PairT_std__string_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t swig_types[9]
#define SWIGTYPE_p_PairT_std__string_std__string_t swig_types[10]
#define SWIGTYPE_p_PairT_std__string_std__vectorT_std__string_std__allocatorT_std__string_t_t_t swig_types[11]
#define SWIGTYPE_p_ScriptEngine swig_types[12]
#define SWIGTYPE_p_ScriptObject swig_types[13]
#define SWIGTYPE_p_ScriptingNode swig_types[14]
#define SWIGTYPE_p_SharedMatrix swig_types[15]
#define SWIGTYPE_p_SharedString swig_types[16]
#define SWIGTYPE_p_SharedTimeSeriesPattern swig_types[17]
#define SWIGTYPE_p_WaterWatch swig_types[18]
#define SWIGTYPE_p_WaterWatchEnums swig_types[19]
#define SWIGTYPE_p_allocator_type swig_types[20]
#define SWIGTYPE_p_bool swig_types[21]
#define SWIGTYPE_p_char swig_types[22]
#define SWIGTYPE_p_cweeDateTime swig_types[23]
#define SWIGTYPE_p_cweeSharedPtrT_void_t swig_types[24]
#define SWIGTYPE_p_difference_type swig_types[25]
#define SWIGTYPE_p_double swig_types[26]
#define SWIGTYPE_p_float swig_types[27]
#define SWIGTYPE_p_int swig_types[28]
#define SWIGTYPE_p_key_type swig_types[29]
#define SWIGTYPE_p_mapped_type swig_types[30]
#define SWIGTYPE_p_size_type swig_types[31]
#define SWIGTYPE_p_std__allocatorT_Color_Interop_t swig_types[32]
#define SWIGTYPE_p_std__allocatorT_MapBackground_Interop_t swig_types[33]
#define SWIGTYPE_p_std__allocatorT_PairT_cweeDateTime_float_t_t swig_types[34]
#define SWIGTYPE_p_std__allocatorT_PairT_double_double_t_t swig_types[35]
#define SWIGTYPE_p_std__allocatorT_ScriptingNode_t swig_types[36]
#define SWIGTYPE_p_std__allocatorT_double_t swig_types[37]
#define SWIGTYPE_p_std__allocatorT_float_t swig_types[38]
#define SWIGTYPE_p_std__allocatorT_std__pairT_int_const_MapBackground_Interop_t_t swig_types[39]
#define SWIGTYPE_p_std__allocatorT_std__pairT_int_const_MapIcon_Interop_t_t swig_types[40]
#define SWIGTYPE_p_std__allocatorT_std__pairT_int_const_MapPolyline_Interop_t_t swig_types[41]
#define SWIGTYPE_p_std__allocatorT_std__string_t swig_types[42]
#define SWIGTYPE_p_std__invalid_argument swig_types[43]
#define SWIGTYPE_p_std__lessT_int_t swig_types[44]
#define SWIGTYPE_p_std__mapT_int_MapBackground_Interop_std__lessT_int_t_std__allocatorT_std__pairT_int_const_MapBackground_Interop_t_t_t swig_types[45]
#define SWIGTYPE_p_std__mapT_int_MapIcon_Interop_std__lessT_int_t_std__allocatorT_std__pairT_int_const_MapIcon_Interop_t_t_t swig_types[46]
#define SWIGTYPE_p_std__mapT_int_MapPolyline_Interop_std__lessT_int_t_std__allocatorT_std__pairT_int_const_MapPolyline_Interop_t_t_t swig_types[47]
#define SWIGTYPE_p_std__out_of_range swig_types[48]
#define SWIGTYPE_p_std__pairT_bool_PairT_std__string_std__string_t_t swig_types[49]
#define SWIGTYPE_p_std__pairT_cweeDateTime_float_t swig_types[50]
#define SWIGTYPE_p_std__pairT_double_double_t swig_types[51]
#define SWIGTYPE_p_std__pairT_int_PairT_std__string_std__vectorT_std__string_t_t_t swig_types[52]
#define SWIGTYPE_p_std__pairT_std__string_std__string_t swig_types[53]
#define SWIGTYPE_p_std__pairT_std__string_std__vectorT_std__string_std__allocatorT_std__string_t_t_t swig_types[54]
#define SWIGTYPE_p_std__shared_ptrT_bool_t swig_types[55]
#define SWIGTYPE_p_std__shared_ptrT_std__string_t swig_types[56]
#define SWIGTYPE_p_std__string swig_types[57]
#define SWIGTYPE_p_std__vectorT_Color_Interop_std__allocatorT_Color_Interop_t_t swig_types[58]
#define SWIGTYPE_p_std__vectorT_MapBackground_Interop_std__allocatorT_MapBackground_Interop_t_t swig_types[59]
#define SWIGTYPE_p_std__vectorT_PairT_cweeDateTime_float_t_std__allocatorT_PairT_cweeDateTime_float_t_t_t swig_types[60]
#define SWIGTYPE_p_std__vectorT_PairT_double_double_t_std__allocatorT_PairT_double_double_t_t_t swig_types[61]
#define SWIGTYPE_p_std__vectorT_ScriptingNode_std__allocatorT_ScriptingNode_t_t swig_types[62]
#define SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t swig_types[63]
#define SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t swig_types[64]
#define SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t swig_types[65]
#define SWIGTYPE_p_value_type swig_types[66]
static swig_type_info *swig_types[68];
static swig_module_info swig_module = {swig_types, 67, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */



#ifdef __cplusplus
#include <utility>
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigSmartPointer {
    T *ptr;
    SwigSmartPointer(T *p) : ptr(p) { }
    ~SwigSmartPointer() { delete ptr; }
    SwigSmartPointer& operator=(SwigSmartPointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
    void reset(T *p) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = p; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigSmartPointer tmp(new T(t)); pointer = tmp; return *this; }
#if __cplusplus >=201103L
  SwigValueWrapper& operator=(T&& t) { SwigSmartPointer tmp(new T(std::move(t))); pointer = tmp; return *this; }
  operator T&&() const { return std::move(*pointer.ptr); }
#else
  operator T&() const { return *pointer.ptr; }
#endif
  T *operator&() const { return pointer.ptr; }
  static void reset(SwigValueWrapper& t, T *p) { t.pointer.reset(p); }
};

/*
 * SwigValueInit() is a generic initialisation solution as the following approach:
 * 
 *       T c_result = T();
 * 
 * doesn't compile for all types for example:
 * 
 *       unsigned int c_result = unsigned int();
 */
template <typename T> T SwigValueInit() {
  return T();
}

#if __cplusplus >=201103L
# define SWIG_STD_MOVE(OBJ) std::move(OBJ)
#else
# define SWIG_STD_MOVE(OBJ) OBJ
#endif

#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast< void** >(a)) 


#include <stdexcept>


#include "../WaterWatch_Cs_SWIG/Header.h"


#include <typeinfo>
#include <stdexcept>


#if defined(__GNUC__)
#  if __GNUC__ == 2 && __GNUC_MINOR <= 96
#     define SWIG_STD_NOMODERN_STL
#  endif
#endif


#include <string>


#include <stddef.h>


#include <algorithm>


#include <vector>


#include <utility>


#include <map>


#include <algorithm>


SWIGINTERNINLINE SEXP
SWIG_From_long  (long value)
{
	return Rf_ScalarInteger((int)value);
}


SWIGINTERNINLINE SEXP
SWIG_From_int  (int value)
{    
  return SWIG_From_long  (value);
}


SWIGINTERNINLINE SEXP
SWIG_From_double  (double value)
{
	return Rf_ScalarReal(value);
}


SWIGINTERN SEXP
SWIG_FromCharPtrAndSize(const char* carray, size_t size) 
{
  SEXP t, c;
  if (!carray) return R_NilValue;
/* See R internals document 1.10.  
   MkCharLen was introduced in 2.7.0.  Use that instead of hand
   creating vector.

   Starting in 2.8.0 creating strings via vectors was deprecated in
   order to allow for use of CHARSXP caches. */

  Rf_protect(t = Rf_allocVector(STRSXP, 1));
#if R_VERSION >=  R_Version(2,7,0)
  c = Rf_mkCharLen(carray, size);
#else
  c = Rf_allocVector(CHARSXP, size);
  strncpy((char *)CHAR(c), carray, size);
#endif
  SET_STRING_ELT(t, 0, c);
  Rf_unprotect(1);
  return t;
}


SWIGINTERNINLINE SEXP
SWIG_From_std_string  (const std::string& s)
{
  return SWIG_FromCharPtrAndSize(s.data(), s.size());
}


namespace swig {
  template <class Type>
  struct noconst_traits {
    typedef Type noconst_type;
  };

  template <class Type>
  struct noconst_traits<const Type> {
    typedef Type noconst_type;
  };

  /*
    type categories
  */
  struct pointer_category { };
  struct value_category { };

  /*
    General traits that provides type_name and type_info
  */
  template <class Type> struct traits { };

  template <class Type>
  inline const char* type_name() {
    return traits<typename noconst_traits<Type >::noconst_type >::type_name();
  }

  template <class Type> struct traits_info {
    static swig_type_info *type_query(std::string name) {
      name += " *";
      return SWIG_TypeQuery(name.c_str());
    }
    static swig_type_info *type_info() {
      static swig_type_info *info = type_query(type_name<Type>());
      return info;
    }
  };

  /*
    Partial specialization for pointers (traits_info)
  */
  template <class Type> struct traits_info<Type *> {
    static swig_type_info *type_query(std::string name) {
      name += " *";
      return SWIG_TypeQuery(name.c_str());
    }
    static swig_type_info *type_info() {
      static swig_type_info *info = type_query(type_name<Type>());
      return info;
    }
  };

  template <class Type>
  inline swig_type_info *type_info() {
    return traits_info<Type>::type_info();
  }

  /*
    Partial specialization for pointers (traits)
  */
  template <class Type> struct traits <Type *> {
    typedef pointer_category category;
    static std::string make_ptr_name(const char* name) {
      std::string ptrname = name;
      ptrname += " *";
      return ptrname;
    }
    static const char* type_name() {
      static std::string name = make_ptr_name(swig::type_name<Type>());
      return name.c_str();
    }
  };

  template <class Type, class Category>
  struct traits_as { };

  template <class Type, class Category>
  struct traits_check { };

}


namespace swig {  
  /*
    Traits that provides the from method
  */

  template <class Type> struct traits_from_ptr {
    static SEXP from(Type *val, int owner = 0) {
      return SWIG_R_NewPointerObj(val, type_info<Type>(), owner);
    }
  };

  template <class Type> struct traits_from {
    static SEXP from(const Type& val) {
      return traits_from_ptr<Type>::from(new Type(val), 1);
    }
  };

  template <class Type> struct traits_from<Type *> {
    static SEXP from(Type* val) {
      return traits_from_ptr<Type>::from(val, 0);
    }
  };

  template <class Type>
  inline SEXP from(const Type& val) {
    return traits_from<Type>::from(val);
  }

  template <class Type>
  inline SEXP from_ptr(Type* val, int owner) {
    return traits_from_ptr<Type>::from(val, owner);
  }

  /*
    Traits that provides the asval/as/check method
  */
  template <class Type>
  struct traits_asptr {   
    static int asptr(SEXP obj, Type **val) {
      Type *p = 0;
      swig_type_info *descriptor = type_info<Type>();
      int res = descriptor ? SWIG_R_ConvertPtr(obj, (void **)&p, descriptor, 0) : SWIG_ERROR;
      if (SWIG_IsOK(res)) {
	if (val) *val = p;
      }
      return res;
    }
  }; 

  template <class Type>
  inline int asptr(SEXP obj, Type **vptr) {
    return traits_asptr<Type>::asptr(obj, vptr);
  }

  template <class Type> 
  struct traits_asval {
    static int asval(SEXP obj, Type *val) {
      if (val) {
	Type *p = 0;
	int res = traits_asptr<Type>::asptr(obj, &p);
	if (!SWIG_IsOK(res)) return res;	
	if (p) {
	  typedef typename noconst_traits<Type>::noconst_type noconst_type;
	  *(const_cast<noconst_type*>(val)) = *p;
	  if (SWIG_IsNewObj(res)){
	    delete p;
	    res = SWIG_DelNewMask(res);
	  }
	  return res;
	} else {
	  return SWIG_ERROR;
	}
      } else {
	return traits_asptr<Type>::asptr(obj, (Type **)(0));
      }
    }
  };

  template <class Type> struct traits_asval<Type*> {
    static int asval(SEXP obj, Type **val) {
      if (val) {
        typedef typename noconst_traits<Type>::noconst_type noconst_type;
        noconst_type *p = 0;
        int res = traits_asptr<noconst_type>::asptr(obj,  &p);
        if (SWIG_IsOK(res)) {
          *(const_cast<noconst_type**>(val)) = p;
	}
	return res;
      } else {
	return traits_asptr<Type>::asptr(obj, (Type **)(0));
      }
    }
  };
  
  template <class Type>
  inline int asval(SEXP obj, Type *val) {
    return traits_asval<Type>::asval(obj, val);
  }

  template <class Type> 
  struct traits_as<Type, value_category> {
    static Type as(SEXP obj) {
      Type v;
      int res = asval(obj, &v);
      if (!obj || !SWIG_IsOK(res)) {
        throw std::invalid_argument("bad type");
      }
      return v;
    }
  };

  template <class Type> 
  struct traits_as<Type, pointer_category> {
    static Type as(SEXP obj) {
      Type *v = 0;      
      int res = (obj ? traits_asptr<Type>::asptr(obj, &v) : SWIG_ERROR);
      if (SWIG_IsOK(res) && v) {
	if (SWIG_IsNewObj(res)) {
	  Type r(*v);
	  delete v;
	  return r;
	} else {
	  return *v;
	}
      } else {
          throw std::invalid_argument("bad type");
      }
    }
  };

  template <class Type> 
  struct traits_as<Type*, pointer_category> {
    static Type* as(SEXP obj, bool throw_error) {
      Type *v = 0;      
      int res = (obj ? traits_asptr<Type>::asptr(obj, &v) : SWIG_ERROR);
      if (SWIG_IsOK(res)) {
	return v;
      } else {
	if (throw_error)
          throw std::invalid_argument("bad type");
	return 0;
      }
    }
  };
    
  template <class Type>
  inline Type as(SEXP obj) {
    return traits_as<Type, typename traits<Type>::category>::as(obj);
  }

  template <class Type> 
  struct traits_check<Type, value_category> {
    static bool check(SEXP obj) {
      int res = obj ? asval(obj, (Type *)(0)) : SWIG_ERROR;
      return SWIG_IsOK(res) ? true : false;
    }
  };

  template <class Type> 
  struct traits_check<Type, pointer_category> {
    static bool check(SEXP obj) {
      int res = obj ? asptr(obj, (Type **)(0)) : SWIG_ERROR;
      return SWIG_IsOK(res) ? true : false;
    }
  };

  template <class Type>
  inline bool check(SEXP obj) {
    return traits_check<Type, typename traits<Type>::category>::check(obj);
  }
}


#include <functional>
namespace swig {
  inline size_t
  check_index(ptrdiff_t i, size_t size, bool insert = false) {
    if ( i < 0 ) {
      if ((size_t) (-i) <= size)
	return (size_t) (i + size);
    } else if ( (size_t) i < size ) {
      return (size_t) i;
    } else if (insert && ((size_t) i == size)) {
      return size;
    }
    
    throw std::out_of_range("index out of range");
  }

  inline size_t
  slice_index(ptrdiff_t i, size_t size) {
    if ( i < 0 ) {
      if ((size_t) (-i) <= size) {
	return (size_t) (i + size);
      } else {
	throw std::out_of_range("index out of range");
      }
    } else {
      return ( (size_t) i < size ) ? ((size_t) i) : size;
    }
  }

  template <class Sequence, class Difference>
  inline typename Sequence::iterator
  getpos(Sequence* self, Difference i)  {
    typename Sequence::iterator pos = self->begin();
    std::advance(pos, check_index(i,self->size()));
    return pos;
  }

  template <class Sequence, class Difference>
  inline typename Sequence::const_iterator
  cgetpos(const Sequence* self, Difference i)  {
    typename Sequence::const_iterator pos = self->begin();
    std::advance(pos, check_index(i,self->size()));
    return pos;
  }

  template <class Sequence, class Difference>
  inline Sequence*
  getslice(const Sequence* self, Difference i, Difference j) {
    typename Sequence::size_type size = self->size();
    typename Sequence::size_type ii = swig::check_index(i, size);
    typename Sequence::size_type jj = swig::slice_index(j, size);

    if (jj > ii) {
      typename Sequence::const_iterator vb = self->begin();
      typename Sequence::const_iterator ve = self->begin();
      std::advance(vb,ii);
      std::advance(ve,jj);
      return new Sequence(vb, ve);
    } else {
      return new Sequence();
    }
  }

  template <class Sequence, class Difference, class InputSeq>
  inline void
  setslice(Sequence* self, Difference i, Difference j, const InputSeq& v) {
    typename Sequence::size_type size = self->size();
    typename Sequence::size_type ii = swig::check_index(i, size, true);
    typename Sequence::size_type jj = swig::slice_index(j, size);
    if (jj < ii) jj = ii;
    size_t ssize = jj - ii;
    if (ssize <= v.size()) {
      typename Sequence::iterator sb = self->begin();
      typename InputSeq::const_iterator vmid = v.begin();
      std::advance(sb,ii);
      std::advance(vmid, jj - ii);
      self->insert(std::copy(v.begin(), vmid, sb), vmid, v.end());
    } else {
      typename Sequence::iterator sb = self->begin();
      typename Sequence::iterator se = self->begin();
      std::advance(sb,ii);
      std::advance(se,jj);
      self->erase(sb,se);
      self->insert(sb, v.begin(), v.end());
    }
  }

  template <class Sequence, class Difference>
  inline void
  delslice(Sequence* self, Difference i, Difference j) {
    typename Sequence::size_type size = self->size();
    typename Sequence::size_type ii = swig::check_index(i, size, true);
    typename Sequence::size_type jj = swig::slice_index(j, size);
    if (jj > ii) {
      typename Sequence::iterator sb = self->begin();
      typename Sequence::iterator se = self->begin();
      std::advance(sb,ii);
      std::advance(se,jj);
      self->erase(sb,se);
    }
  }
}


  namespace swig {
    // vectors of doubles
    template <>
      struct traits_from_ptr<std::vector<double> > {
      static SEXP from (std::vector<double > *val, int owner = 0) {
        SEXP result;
        PROTECT(result = Rf_allocVector(REALSXP, val->size()));
        for (unsigned pos = 0; pos < val->size(); pos++)
          {
            NUMERIC_POINTER(result)[pos] = ((*val)[pos]);
          }
        UNPROTECT(1);
        return(result);
      }
    };
    // vectors of floats
    template <>
      struct traits_from_ptr<std::vector<float> > {
      static SEXP from (std::vector<float > *val, int owner = 0) {
        SEXP result;
        PROTECT(result = Rf_allocVector(REALSXP, val->size()));
        for (unsigned pos = 0; pos < val->size(); pos++)
          {
            NUMERIC_POINTER(result)[pos] = ((*val)[pos]);
          }
        UNPROTECT(1);
        return(result);
      }
    };
    // vectors of unsigned 8bit int
    template <>
      struct traits_from_ptr<std::vector<unsigned char> > {
      static SEXP from (std::vector<unsigned char > *val, int owner = 0) {
        SEXP result;
        PROTECT(result = Rf_allocVector(INTSXP, val->size()));
        for (unsigned pos = 0; pos < val->size(); pos++)
          {
            INTEGER_POINTER(result)[pos] = ((*val)[pos]);
          }
        UNPROTECT(1);
        return(result);
      }
    };
    // vectors of 8bit int
    template <>
      struct traits_from_ptr<std::vector<signed char> > {
      static SEXP from (std::vector<signed char > *val, int owner = 0) {
        SEXP result;
        PROTECT(result = Rf_allocVector(INTSXP, val->size()));
        for (unsigned pos = 0; pos < val->size(); pos++)
          {
            INTEGER_POINTER(result)[pos] = ((*val)[pos]);
          }
        UNPROTECT(1);
        return(result);
      }
    };

    // vectors of unsigned 16bit int
    template <>
      struct traits_from_ptr<std::vector<unsigned short int> > {
      static SEXP from (std::vector<unsigned short int > *val, int owner = 0) {
        SEXP result;
        PROTECT(result = Rf_allocVector(INTSXP, val->size()));
        for (unsigned pos = 0; pos < val->size(); pos++)
          {
            INTEGER_POINTER(result)[pos] = ((*val)[pos]);
          }
        UNPROTECT(1);
        return(result);
      }
    };
    // vectors of 16bit int
    template <>
      struct traits_from_ptr<std::vector<short int> > {
      static SEXP from (std::vector<short int > *val, int owner = 0) {
        SEXP result;
        PROTECT(result = Rf_allocVector(INTSXP, val->size()));
        for (unsigned pos = 0; pos < val->size(); pos++)
          {
            INTEGER_POINTER(result)[pos] = ((*val)[pos]);
          }
        UNPROTECT(1);
        return(result);
      }
    };

   // vectors of 32 bit unsigned int
    template <>
      struct traits_from_ptr<std::vector<unsigned int> > {
      static SEXP from (std::vector<unsigned int> *val, int owner = 0) {
        SEXP result;
        PROTECT(result = Rf_allocVector(INTSXP, val->size()));
        for (unsigned pos = 0; pos < val->size(); pos++)
          {
            INTEGER_POINTER(result)[pos] = ((*val)[pos]);
          }
        UNPROTECT(1);
        return(result);
      }
    };

    // vectors of 32bit int
    template <>
      struct traits_from_ptr<std::vector<int> > {
      static SEXP from (std::vector<int > *val, int owner = 0) {
        SEXP result;
        PROTECT(result = Rf_allocVector(INTSXP, val->size()));
        for (unsigned pos = 0; pos < val->size(); pos++)
          {
            INTEGER_POINTER(result)[pos] = ((*val)[pos]);
          }
        UNPROTECT(1);
        return(result);
      }
    };

   // vectors of 64 bit unsigned int
#if defined(SWIGWORDSIZE64)
    template <>
      struct traits_from_ptr<std::vector<unsigned long int> > {
      static SEXP from (std::vector<unsigned long int> *val, int owner = 0) {
        SEXP result;
        PROTECT(result = Rf_allocVector(INTSXP, val->size()));
        for (unsigned pos = 0; pos < val->size(); pos++)
          {
            INTEGER_POINTER(result)[pos] = ((*val)[pos]);
          }
        UNPROTECT(1);
        return(result);
      }
    };
     // vectors of 64 bit int
    template <>
      struct traits_from_ptr<std::vector<long int> > {
      static SEXP from (std::vector<long int> *val, int owner = 0) {
        SEXP result;
        PROTECT(result = Rf_allocVector(INTSXP, val->size()));
        for (unsigned pos = 0; pos < val->size(); pos++)
          {
            INTEGER_POINTER(result)[pos] = ((*val)[pos]);
          }
        UNPROTECT(1);
        return(result);
      }
    };
#else
    template <>
      struct traits_from_ptr<std::vector<unsigned long long int> > {
      static SEXP from (std::vector<unsigned long long int> *val, int owner = 0) {
        SEXP result;
        PROTECT(result = Rf_allocVector(INTSXP, val->size()));
        for (unsigned pos = 0; pos < val->size(); pos++)
          {
            INTEGER_POINTER(result)[pos] = ((*val)[pos]);
          }
        UNPROTECT(1);
        return(result);
      }
    };
     // vectors of 64 bit int
    template <>
      struct traits_from_ptr<std::vector<long long int> > {
      static SEXP from (std::vector<long long int> *val, int owner = 0) {
        SEXP result;
        PROTECT(result = Rf_allocVector(INTSXP, val->size()));
        for (unsigned pos = 0; pos < val->size(); pos++)
          {
            INTEGER_POINTER(result)[pos] = ((*val)[pos]);
          }
        UNPROTECT(1);
        return(result);
      }
    };
#endif
    // vectors of bool
    template <>
      struct traits_from_ptr<std::vector<bool> > {
      static SEXP from (std::vector<bool> *val, int owner = 0) {
        SEXP result;
        PROTECT(result = Rf_allocVector(LGLSXP, val->size()));
        for (unsigned pos = 0; pos < val->size(); pos++)
          {
            LOGICAL_POINTER(result)[pos] = ((*val)[pos]);
          }
        UNPROTECT(1);
        return(result);
      }
    };
    
    // vectors of strings
    template <>
      struct traits_from_ptr<std::vector<std::basic_string<char> > > {
      static SEXP from (std::vector<std::basic_string<char> > *val, int owner = 0) {
        SEXP result;
         PROTECT(result = Rf_allocVector(STRSXP, val->size()));
         for (unsigned pos = 0; pos < val->size(); pos++)
           {
             CHARACTER_POINTER(result)[pos] = Rf_mkChar(((*val)[pos]).c_str());
           }
        UNPROTECT(1);
        return(result);
      }
    };

    // catch all that does everything with vectors
    template <typename T>
      struct traits_from_ptr< std::vector< T > > {
      static SEXP from (std::vector< T > *val, int owner = 0) {
        return SWIG_R_NewPointerObj(val, type_info< std::vector< T >  >(), owner);
      }
    };
    /////////////////////////////////////////////////
    template <>
  struct traits_asptr < std::vector<double> > {
    static int asptr(SEXP obj, std::vector<double> **val) {
      std::vector<double> *p;
      // not sure how to check the size of the SEXP obj is correct
      unsigned int sexpsz = Rf_length(obj);
      p = new std::vector<double>(sexpsz);
      double *S = NUMERIC_POINTER(obj);
      for (unsigned pos = 0; pos < p->size(); pos++)
        {
          (*p)[pos] = static_cast<double>(S[pos]);
        }
      int res = SWIG_OK;
      if (SWIG_IsOK(res)) {
        if (val) *val = p;
      }
      return res;
    }
  };

    template <>
  struct traits_asptr < std::vector<float> > {
    static int asptr(SEXP obj, std::vector<float> **val) {
      std::vector<float> *p;
      // not sure how to check the size of the SEXP obj is correct
      unsigned int sexpsz = Rf_length(obj);
      p = new std::vector<float>(sexpsz);
      double *S = NUMERIC_POINTER(obj);
      for (unsigned pos = 0; pos < p->size(); pos++)
        {
          (*p)[pos] = static_cast<double>(S[pos]);
        }
      int res = SWIG_OK;
      if (SWIG_IsOK(res)) {
        if (val) *val = p;
      }
      return res;
    }
  };

    // 8 bit integer types
    template <>
  struct traits_asptr < std::vector<unsigned char> > {
    static int asptr(SEXP obj, std::vector<unsigned char> **val) {
      std::vector<unsigned char> *p;
      unsigned int sexpsz = Rf_length(obj);
      p = new std::vector<unsigned char>(sexpsz);
      SEXP coerced;
      PROTECT(coerced = Rf_coerceVector(obj, INTSXP));
      int *S = INTEGER_POINTER(coerced);
      for (unsigned pos = 0; pos < p->size(); pos++)
        {
          (*p)[pos] = static_cast<unsigned char>(S[pos]);
        }
      int res = SWIG_OK;
      if (SWIG_IsOK(res)) {
        if (val) *val = p;
      }
      UNPROTECT(1);
      return res;
    }
  };

    template <>
  struct traits_asptr < std::vector<signed char> > {
    static int asptr(SEXP obj, std::vector<signed char> **val) {
      std::vector<signed char> *p;
      // not sure how to check the size of the SEXP obj is correct
      int sexpsz = Rf_length(obj);
      p = new std::vector<signed char>(sexpsz);
      SEXP coerced;
      PROTECT(coerced = Rf_coerceVector(obj, INTSXP));
      int *S = INTEGER_POINTER(coerced);
      for (unsigned pos = 0; pos < p->size(); pos++)
        {
          (*p)[pos] = static_cast<signed char>(S[pos]);
        }
      int res = SWIG_OK;
      if (SWIG_IsOK(res)) {
        if (val) *val = p;
      }
      UNPROTECT(1);
      return res;
    }
  };

   // 16 bit integer types
    template <>
  struct traits_asptr < std::vector<unsigned short int> > {
    static int asptr(SEXP obj, std::vector<unsigned short int> **val) {
      std::vector<unsigned short int> *p;
      unsigned int sexpsz = Rf_length(obj);
      p = new std::vector<unsigned short int>(sexpsz);
      SEXP coerced;
      PROTECT(coerced = Rf_coerceVector(obj, INTSXP));
      int *S = INTEGER_POINTER(coerced);
      for (unsigned pos = 0; pos < p->size(); pos++)
        {
          (*p)[pos] = static_cast<unsigned short int>(S[pos]);
        }
      int res = SWIG_OK;
      if (SWIG_IsOK(res)) {
        if (val) *val = p;
      }
      UNPROTECT(1);
      return res;
    }
  };

    template <>
  struct traits_asptr < std::vector<short int> > {
    static int asptr(SEXP obj, std::vector<short int> **val) {
      std::vector<short int> *p;
      // not sure how to check the size of the SEXP obj is correct
      int sexpsz = Rf_length(obj);
      p = new std::vector<short int>(sexpsz);
      SEXP coerced;
      PROTECT(coerced = Rf_coerceVector(obj, INTSXP));
      int *S = INTEGER_POINTER(coerced);
      for (unsigned pos = 0; pos < p->size(); pos++)
        {
          (*p)[pos] = static_cast<short int>(S[pos]);
        }
      int res = SWIG_OK;
      if (SWIG_IsOK(res)) {
        if (val) *val = p;
      }
      UNPROTECT(1);
      return res;
    }
  };
    // 32 bit integer types
    template <>
  struct traits_asptr < std::vector<unsigned int> > {
    static int asptr(SEXP obj, std::vector<unsigned int> **val) {
      std::vector<unsigned int> *p;
      unsigned int sexpsz = Rf_length(obj);
      p = new std::vector<unsigned int>(sexpsz);
      SEXP coerced;
      PROTECT(coerced = Rf_coerceVector(obj, INTSXP));
      int *S = INTEGER_POINTER(coerced);
      for (unsigned pos = 0; pos < p->size(); pos++)
        {
          (*p)[pos] = static_cast<unsigned int>(S[pos]);
        }
      int res = SWIG_OK;
      if (SWIG_IsOK(res)) {
        if (val) *val = p;
      }
      UNPROTECT(1);
      return res;
    }
  };

    template <>
  struct traits_asptr < std::vector<int> > {
    static int asptr(SEXP obj, std::vector<int> **val) {
      std::vector<int> *p;
      // not sure how to check the size of the SEXP obj is correct
      int sexpsz = Rf_length(obj);
      p = new std::vector<int>(sexpsz);
      SEXP coerced;
      PROTECT(coerced = Rf_coerceVector(obj, INTSXP));
      int *S = INTEGER_POINTER(coerced);
      for (unsigned pos = 0; pos < p->size(); pos++)
        {
          (*p)[pos] = static_cast<int>(S[pos]);
        }
      int res = SWIG_OK;
      if (SWIG_IsOK(res)) {
        if (val) *val = p;
      }
      UNPROTECT(1);
      return res;
    }
  };

#if defined(SWIGWORDSIZE64)
    // 64 bit integer types
    template <>
  struct traits_asptr < std::vector<unsigned long int> > {
    static int asptr(SEXP obj, std::vector<unsigned long int> **val) {
      std::vector<unsigned long int> *p;
      unsigned int sexpsz = Rf_length(obj);
      p = new std::vector<unsigned long int>(sexpsz);
      SEXP coerced;
      PROTECT(coerced = Rf_coerceVector(obj, INTSXP));
      int *S = INTEGER_POINTER(coerced);
      for (unsigned pos = 0; pos < p->size(); pos++)
        {
          (*p)[pos] = static_cast<unsigned long int>(S[pos]);
        }
      int res = SWIG_OK;
      if (SWIG_IsOK(res)) {
        if (val) *val = p;
      }
      UNPROTECT(1);
      return res;
    }
  };

    template <>
  struct traits_asptr < std::vector<long int> > {
    static int asptr(SEXP obj, std::vector<long int> **val) {
      std::vector<long int> *p;
      // not sure how to check the size of the SEXP obj is correct
      int sexpsz = Rf_length(obj);
      p = new std::vector<long int>(sexpsz);
      SEXP coerced;
      PROTECT(coerced = Rf_coerceVector(obj, INTSXP));
      int *S = INTEGER_POINTER(coerced);
      for (unsigned pos = 0; pos < p->size(); pos++)
        {
          (*p)[pos] = static_cast<long int>(S[pos]);
        }
      int res = SWIG_OK;
      if (SWIG_IsOK(res)) {
        if (val) *val = p;
      }
      UNPROTECT(1);
      return res;
    }
  };

#else
    // 64 bit integer types
    template <>
  struct traits_asptr < std::vector<unsigned long long int> > {
    static int asptr(SEXP obj, std::vector<unsigned long long int> **val) {
      std::vector<unsigned long long int> *p;
      unsigned int sexpsz = Rf_length(obj);
      p = new std::vector<unsigned long long int>(sexpsz);
      SEXP coerced;
      PROTECT(coerced = Rf_coerceVector(obj, INTSXP));
      int *S = INTEGER_POINTER(coerced);
      for (unsigned pos = 0; pos < p->size(); pos++)
        {
          (*p)[pos] = static_cast<unsigned long long int>(S[pos]);
        }
      int res = SWIG_OK;
      if (SWIG_IsOK(res)) {
        if (val) *val = p;
      }
      UNPROTECT(1);
      return res;
    }
  };

    template <>
  struct traits_asptr < std::vector<long long int> > {
    static int asptr(SEXP obj, std::vector<long long int> **val) {
      std::vector<long long int> *p;
      // not sure how to check the size of the SEXP obj is correct
      int sexpsz = Rf_length(obj);
      p = new std::vector<long long int>(sexpsz);
      SEXP coerced;
      PROTECT(coerced = Rf_coerceVector(obj, INTSXP));
      int *S = INTEGER_POINTER(coerced);
      for (unsigned pos = 0; pos < p->size(); pos++)
        {
          (*p)[pos] = static_cast<long long int>(S[pos]);
        }
      int res = SWIG_OK;
      if (SWIG_IsOK(res)) {
        if (val) *val = p;
      }
      UNPROTECT(1);
      return res;
    }
  };

#endif

    template <>
  struct traits_asptr < std::vector<bool> > {
    static int asptr(SEXP obj, std::vector<bool> **val) {
      std::vector<bool> *p;
      // not sure how to check the size of the SEXP obj is correct
      int sexpsz = Rf_length(obj);
      p = new std::vector<bool>(sexpsz);
      SEXP coerced;
      PROTECT(coerced = Rf_coerceVector(obj, LGLSXP));
      int *S = LOGICAL_POINTER(coerced);
      for (unsigned pos = 0; pos < p->size(); pos++)
        {
          (*p)[pos] = static_cast<bool>(S[pos]);
        }
      int res = SWIG_OK;
      if (SWIG_IsOK(res)) {
        if (val) *val = p;
      }
      UNPROTECT(1);
      return res;
    }
  };

    template <>
      struct traits_asptr < std::vector<std::basic_string<char> > > {
      static int asptr(SEXP obj, std::vector<std::basic_string<char> > **val) {
	std::vector<std::basic_string<char> > *p;
      // R character vectors are STRSXP containing CHARSXP
      // access a CHARSXP using STRING_ELT
      int sexpsz = Rf_length(obj);
      p = new std::vector<std::basic_string<char> >(sexpsz);
      SEXP coerced;
      PROTECT(coerced = Rf_coerceVector(obj, STRSXP));
      //SEXP *S = CHARACTER_POINTER(coerced);
      for (unsigned pos = 0; pos < p->size(); pos++)
        {
	  const char * thecstring = CHAR(STRING_ELT(coerced, pos));
          (*p)[pos] = std::basic_string<char>(thecstring);
        }
      int res = SWIG_OK;
      if (SWIG_IsOK(res)) {
        if (val) *val = p;
      }
      UNPROTECT(1);
      return res;
    }
  };

    // catchall for R to vector conversion
  template <typename T>
  struct traits_asptr < std::vector<T> > {
    static int asptr(SEXP obj, std::vector<T> **val) {
      std::vector<T> *p;
      int res = SWIG_ConvertPtr(obj, (void**)&p, type_info< std::vector<T> >(), 0);
      if (SWIG_IsOK(res)) {
        if (val) *val = p;
      }
      return res;
    }
  };

  // now for vectors of vectors. These will be represented as lists of vectors on the
  // catch all that does everything with vectors
  template <>
    struct traits_from_ptr<std::vector<std::vector<unsigned int> > > {
      static SEXP from (std::vector< std::vector<unsigned int> > *val, int owner = 0) {
        SEXP result;
        // allocate the R list
        PROTECT(result = Rf_allocVector(VECSXP, val->size()));
        for (unsigned pos = 0; pos < val->size(); pos++)
          {
            // allocate the R vector
            SET_VECTOR_ELT(result, pos, Rf_allocVector(INTSXP, val->at(pos).size()));
            // Fill the R vector
            for (unsigned vpos = 0; vpos < val->at(pos).size(); ++vpos)
              {
                INTEGER_POINTER(VECTOR_ELT(result, pos))[vpos] = static_cast<int>(val->at(pos).at(vpos));
              }
          }
        UNPROTECT(1);
        return(result);
      }
    };


  template <>
    struct traits_from_ptr<std::vector<std::vector<int> > > {
      static SEXP from (std::vector< std::vector<int > > *val, int owner = 0) {
        SEXP result;
        // allocate the R list
        PROTECT(result = Rf_allocVector(VECSXP, val->size()));
        for (unsigned pos = 0; pos < val->size(); pos++)
          {
            // allocate the R vector
            SET_VECTOR_ELT(result, pos, Rf_allocVector(INTSXP, val->at(pos).size()));
            // Fill the R vector
            for (unsigned vpos = 0; vpos < val->at(pos).size(); ++vpos)
              {
                INTEGER_POINTER(VECTOR_ELT(result, pos))[vpos] = static_cast<int>(val->at(pos).at(vpos));
              }
          }
        UNPROTECT(1);
        return(result);
      }
    };

  template <>
    struct traits_from_ptr<std::vector<std::vector<float> > > {
      static SEXP from (std::vector< std::vector<float > > *val, int owner = 0) {
        SEXP result;
        // allocate the R list
        PROTECT(result = Rf_allocVector(VECSXP, val->size()));
        for (unsigned pos = 0; pos < val->size(); pos++)
          {
            // allocate the R vector
            SET_VECTOR_ELT(result, pos, Rf_allocVector(REALSXP, val->at(pos).size()));
            // Fill the R vector
            for (unsigned vpos = 0; vpos < val->at(pos).size(); ++vpos)
              {
                NUMERIC_POINTER(VECTOR_ELT(result, pos))[vpos] = static_cast<double>(val->at(pos).at(vpos));
              }
          }
        UNPROTECT(1);
        return(result);
      }
    };

  template <>
    struct traits_from_ptr<std::vector<std::vector<double> > > {
      static SEXP from (std::vector< std::vector<double > > *val, int owner = 0) {
        SEXP result;
        // allocate the R list
        PROTECT(result = Rf_allocVector(VECSXP, val->size()));
        for (unsigned pos = 0; pos < val->size(); pos++)
          {
            // allocate the R vector
            SET_VECTOR_ELT(result, pos, Rf_allocVector(REALSXP, val->at(pos).size()));
            // Fill the R vector
            for (unsigned vpos = 0; vpos < val->at(pos).size(); ++vpos)
              {
                NUMERIC_POINTER(VECTOR_ELT(result, pos))[vpos] = static_cast<double>(val->at(pos).at(vpos));
              }
          }
        UNPROTECT(1);
        return(result);
      }
    };

  template <>
    struct traits_from_ptr<std::vector<std::vector<bool> > > {
      static SEXP from (std::vector< std::vector<bool> > *val, int owner = 0) {
        SEXP result;
        // allocate the R list
        PROTECT(result = Rf_allocVector(VECSXP, val->size()));
        for (unsigned pos = 0; pos < val->size(); pos++)
          {
            // allocate the R vector
            SET_VECTOR_ELT(result, pos, Rf_allocVector(LGLSXP, val->at(pos).size()));
            // Fill the R vector
            for (unsigned vpos = 0; vpos < val->at(pos).size(); ++vpos)
              {
                LOGICAL_POINTER(VECTOR_ELT(result, pos))[vpos] = (val->at(pos).at(vpos));
              }
          }
        UNPROTECT(1);
        return(result);
      }
    };

  template <>
    struct traits_from_ptr<std::vector<std::vector<std::basic_string<char> > > > {
      static SEXP from (std::vector< std::vector<std::basic_string<char> > > *val, int owner = 0) {
        SEXP result;
        // allocate the R list
        PROTECT(result = Rf_allocVector(VECSXP, val->size()));
        for (unsigned pos = 0; pos < val->size(); pos++)
          {
            // allocate the R vector
            SET_VECTOR_ELT(result, pos, Rf_allocVector(STRSXP, val->at(pos).size()));
            // Fill the R vector
            for (unsigned vpos = 0; vpos < val->at(pos).size(); ++vpos)
              {
                CHARACTER_POINTER(VECTOR_ELT(result, pos))[vpos] = Rf_mkChar(val->at(pos).at(vpos).c_str());
              }
          }
        UNPROTECT(1);
        return(result);
      }
    };

  template <typename T>
    struct traits_from_ptr< std::vector < std::vector< T > > > {
    static SEXP from (std::vector < std::vector< T > > *val, int owner = 0) {
      return SWIG_R_NewPointerObj(val, type_info< std::vector < std::vector< T > > >(), owner);
    }
  };

  /////////////////////////////////////////////////////////////////

  // R side
  template <>
    struct traits_asptr < std::vector< std::vector<unsigned int> > > {
    static int asptr(SEXP obj, std::vector< std::vector<unsigned int> > **val) {
      std::vector <std::vector<unsigned int> > *p;
      // this is the length of the list
      unsigned int sexpsz = Rf_length(obj);
      p = new std::vector< std::vector<unsigned int> > (sexpsz);

      for (unsigned listpos = 0; listpos < sexpsz; ++listpos)
        {
          unsigned vecsize = Rf_length(VECTOR_ELT(obj, listpos));
          for (unsigned vpos = 0; vpos < vecsize; ++vpos)
            {
              (*p)[listpos].push_back(static_cast<int>(INTEGER_POINTER(VECTOR_ELT(obj, listpos))[vpos]));
            }
        }

      int res = SWIG_OK;

      if (SWIG_IsOK(res)) {
        if (val) *val = p;
      }
      return res;
    }
  };

  template <>
    struct traits_asptr < std::vector< std::vector< int> > > {
    static int asptr(SEXP obj, std::vector< std::vector< int> > **val) {
      std::vector <std::vector< int> > *p;
      // this is the length of the list
      unsigned int sexpsz = Rf_length(obj);
      p = new std::vector< std::vector< int> > (sexpsz);

      for (unsigned listpos = 0; listpos < sexpsz; ++listpos)
        {
          unsigned vecsize = Rf_length(VECTOR_ELT(obj, listpos));
          for (unsigned vpos = 0; vpos < vecsize; ++vpos)
            {
              (*p)[listpos].push_back(static_cast<int>(INTEGER_POINTER(VECTOR_ELT(obj, listpos))[vpos]));
            }
        }

      int res = SWIG_OK;

      if (SWIG_IsOK(res)) {
        if (val) *val = p;
      }
      return res;
    }
  };

  template <>
    struct traits_asptr < std::vector< std::vector< float> > > {
    static int asptr(SEXP obj, std::vector< std::vector< float> > **val) {
      std::vector <std::vector< float> > *p;
      // this is the length of the list
      unsigned int sexpsz = Rf_length(obj);
      p = new std::vector< std::vector< float> > (sexpsz);

      for (unsigned listpos = 0; listpos < sexpsz; ++listpos)
        {
          unsigned vecsize = Rf_length(VECTOR_ELT(obj, listpos));
          for (unsigned vpos = 0; vpos < vecsize; ++vpos)
            {
              (*p)[listpos].push_back(static_cast<float>(NUMERIC_POINTER(VECTOR_ELT(obj, listpos))[vpos]));
            }
        }

      int res = SWIG_OK;

      if (SWIG_IsOK(res)) {
        if (val) *val = p;
      }
      return res;
    }
  };

  template <>
    struct traits_asptr < std::vector< std::vector< double> > > {
    static int asptr(SEXP obj, std::vector< std::vector< double> > **val) {
      std::vector <std::vector< double> > *p;
      // this is the length of the list
      unsigned int sexpsz = Rf_length(obj);
      p = new std::vector< std::vector< double> > (sexpsz);

      for (unsigned listpos = 0; listpos < sexpsz; ++listpos)
        {
          unsigned vecsize = Rf_length(VECTOR_ELT(obj, listpos));
          for (unsigned vpos = 0; vpos < vecsize; ++vpos)
            {
              (*p)[listpos].push_back(static_cast<double>(NUMERIC_POINTER(VECTOR_ELT(obj, listpos))[vpos]));
            }
        }

      int res = SWIG_OK;

      if (SWIG_IsOK(res)) {
        if (val) *val = p;
      }
      return res;
    }
  };

  template <>
    struct traits_asptr < std::vector< std::vector< bool > > > {
    static int asptr(SEXP obj, std::vector< std::vector< bool> > **val) {
      std::vector <std::vector< bool > > *p;
      // this is the length of the list
      unsigned int sexpsz = Rf_length(obj);
      p = new std::vector< std::vector< bool > > (sexpsz);

      for (unsigned listpos = 0; listpos < sexpsz; ++listpos)
        {
          unsigned vecsize = Rf_length(VECTOR_ELT(obj, listpos));
          for (unsigned vpos = 0; vpos < vecsize; ++vpos)
            {
              (*p)[listpos].push_back(static_cast<bool>(LOGICAL_POINTER(VECTOR_ELT(obj, listpos))[vpos]));
            }
        }

      int res = SWIG_OK;

      if (SWIG_IsOK(res)) {
        if (val) *val = p;
      }
      return res;
    }
  };

  //  catchall
  template <typename T>
    struct traits_asptr < std::vector< std::vector<T> > > {
    static int asptr(SEXP obj, std::vector< std::vector<T> > **val) {
      std::vector< std::vector<T> > *p;
      Rprintf("vector of vectors - unsupported content\n");
      int res = SWIG_ConvertPtr(obj, (void**)&p, type_info< std::vector< std::vector<T> > > (), 0);
      if (SWIG_IsOK(res)) {
        if (val) *val = p;
      }
      return res;
    }
  };

  }


  namespace swig {
    template <>  struct traits< std::vector<double> > {
      typedef pointer_category category;
      static const char* type_name() {
        return"std::vector<double>";
      }
    };
  }
 

SWIGINTERNINLINE SEXP
SWIG_From_float  (float value)
{    
  return SWIG_From_double  (value);
}


SWIGINTERN int
SWIG_AsCharPtrAndSize(SEXP obj, char** cptr, size_t* psize, int *alloc)
{
  if (cptr && Rf_isString(obj)) {
    char *cstr = const_cast< char * >(CHAR(STRING_ELT(obj, 0)));
    int len = strlen(cstr);

    if (alloc) {
      if (*alloc == SWIG_NEWOBJ) {
        *cptr = reinterpret_cast< char* >(memcpy(new char[len + 1], cstr, sizeof(char)*(len + 1)));
        *alloc = SWIG_NEWOBJ;
      } else {
        *cptr = cstr;
      }
    } else {
      *cptr = reinterpret_cast< char * >(malloc(len + 1));
      ::strncpy(*cptr, cstr, len); // ::strcpy_s(*cptr, sizeof(*cptr), cstr);
    }
    if (psize) *psize = len + 1;
    return SWIG_OK;
  }
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsPtr_std_string (SEXP obj, std::string **val) 
{
  char* buf = 0 ; size_t size = 0; int alloc = SWIG_OLDOBJ;
  if (SWIG_IsOK((SWIG_AsCharPtrAndSize(obj, &buf, &size, &alloc)))) {
    if (buf) {
      if (val) *val = new std::string(buf, size - 1);
      if (alloc == SWIG_NEWOBJ) delete[] buf;
      return SWIG_NEWOBJ;
    } else {
      if (val) *val = 0;
      return SWIG_OLDOBJ;
    }
  } else {
    static int init = 0;
    static swig_type_info* descriptor = 0;
    if (!init) {
      descriptor = SWIG_TypeQuery("std::string" " *");
      init = 1;
    }
    if (descriptor) {
      std::string *vptr;
      int res = SWIG_R_ConvertPtr(obj, (void**)&vptr, descriptor, 0);
      if (SWIG_IsOK(res) && val) *val = vptr;
      return res;
    }
  }
  return SWIG_ERROR;
}


#include <limits.h>
#if !defined(SWIG_NO_LLONG_MAX)
# if !defined(LLONG_MAX) && defined(__GNUC__) && defined (__LONG_LONG_MAX__)
#   define LLONG_MAX __LONG_LONG_MAX__
#   define LLONG_MIN (-LLONG_MAX - 1LL)
#   define ULLONG_MAX (LLONG_MAX * 2ULL + 1ULL)
# endif
#endif


SWIGINTERNINLINE  int
SWIG_AsVal_long (SEXP obj, long *val)
{
   if (val) *val = Rf_asInteger(obj);
   return SWIG_OK;
}


SWIGINTERN int
SWIG_AsVal_int (SEXP obj, int *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < INT_MIN || v > INT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< int >(v);
    }
  }  
  return res;
}


  namespace swig {
    template <>  struct traits< std::vector<float> > {
      typedef pointer_category category;
      static const char* type_name() {
        return"std::vector<float>";
      }
    };
  }
 

SWIGINTERN int
SWIG_AsVal_std_string (SEXP obj, std::string *val)
{
  std::string* v = (std::string *) 0;
  int res = SWIG_AsPtr_std_string (obj, &v);
  if (!SWIG_IsOK(res)) return res;
  if (v) {
    if (val) *val = *v;
    if (SWIG_IsNewObj(res)) {
      delete v;
      res = SWIG_DelNewMask(res);
    }
    return res;
  }
  return SWIG_ERROR;
}


namespace swig {
  template <> struct traits< std::string > {
    typedef value_category category;
    static const char* type_name() { return"std::string"; }
  };
  template <>  struct traits_asval< std::string > {
    typedef std::string value_type;
    static int asval(SEXP obj, value_type *val) {
      return SWIG_AsVal_std_string (obj, val);
    }
  };
  template <>  struct traits_from< std::string > {
    typedef std::string value_type;
    static SEXP from(const value_type& val) {
      return SWIG_From_std_string  (val);
    }
  };
}


      namespace swig {
	template <>  struct traits<std::vector< std::string, std::allocator< std::string > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "std::string" "," "std::allocator< std::string >" " >";
	  }
	};
      }
    
SWIGINTERN bool std_vector_Sl_std_string_Sg____nonzero__(std::vector< std::string > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< std::string >::size_type std_vector_Sl_std_string_Sg____len__(std::vector< std::string > const *self){
      return self->size();
    }
SWIGINTERN std::vector< std::string >::value_type std_vector_Sl_std_string_Sg__pop(std::vector< std::string > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector< std::string,std::allocator< std::string > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN std::vector< std::string,std::allocator< std::string > > *std_vector_Sl_std_string_Sg____getslice__(std::vector< std::string > *self,std::vector< std::string >::difference_type i,std::vector< std::string >::difference_type j){
      return swig::getslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_std_string_Sg____setslice__(std::vector< std::string > *self,std::vector< std::string >::difference_type i,std::vector< std::string >::difference_type j,std::vector< std::string,std::allocator< std::string > > const &v){
      swig::setslice(self, i, j, v);
    }
SWIGINTERN void std_vector_Sl_std_string_Sg____delslice__(std::vector< std::string > *self,std::vector< std::string >::difference_type i,std::vector< std::string >::difference_type j){
      swig::delslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_std_string_Sg____delitem__(std::vector< std::string > *self,std::vector< std::string >::difference_type i){
      self->erase(swig::getpos(self,i));
    }
SWIGINTERN std::vector< std::string >::value_type const &std_vector_Sl_std_string_Sg____getitem__(std::vector< std::string > const *self,std::vector< std::string >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_std_string_Sg____setitem__(std::vector< std::string > *self,std::vector< std::string >::difference_type i,std::vector< std::string >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN void std_vector_Sl_std_string_Sg__append(std::vector< std::string > *self,std::vector< std::string >::value_type const &x){
      self->push_back(x);
    }

#include <float.h>


#include <math.h>


/* Getting isfinite working pre C99 across multiple platforms is non-trivial. Users can provide SWIG_isfinite on older platforms. */
#ifndef SWIG_isfinite
/* isfinite() is a macro for C99 */
# if defined(isfinite)
#  define SWIG_isfinite(X) (isfinite(X))
# elif defined(__cplusplus) && __cplusplus >= 201103L
/* Use a template so that this works whether isfinite() is std::isfinite() or
 * in the global namespace.  The reality seems to vary between compiler
 * versions.
 *
 * Make sure namespace std exists to avoid compiler warnings.
 *
 * extern "C++" is required as this fragment can end up inside an extern "C" { } block
 */
namespace std { }
extern "C++" template<typename T>
inline int SWIG_isfinite_func(T x) {
  using namespace std;
  return isfinite(x);
}
#  define SWIG_isfinite(X) (SWIG_isfinite_func(X))
# elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 2))
#  define SWIG_isfinite(X) (__builtin_isfinite(X))
# elif defined(_MSC_VER)
#  define SWIG_isfinite(X) (_finite(X))
# elif defined(__sun) && defined(__SVR4)
#  include <ieeefp.h>
#  define SWIG_isfinite(X) (finite(X))
# endif
#endif


/* Accept infinite as a valid float value unless we are unable to check if a value is finite */
#ifdef SWIG_isfinite
# define SWIG_Float_Overflow_Check(X) ((X < -FLT_MAX || X > FLT_MAX) && SWIG_isfinite(X))
#else
# define SWIG_Float_Overflow_Check(X) ((X < -FLT_MAX || X > FLT_MAX))
#endif


SWIGINTERNINLINE  int
SWIG_AsVal_double (SEXP obj, double *val)
{
   if (val) *val = Rf_asReal(obj);
   return SWIG_OK;
}


SWIGINTERN int
SWIG_AsVal_float (SEXP obj, float *val)
{
  double v;
  int res = SWIG_AsVal_double (obj, &v);
  if (SWIG_IsOK(res)) {
    if (SWIG_Float_Overflow_Check(v)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< float >(v);
    }
  }  
  return res;
}


#include <memory>


SWIGINTERN int
SWIG_AsVal_bool (SEXP obj, bool *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, val ? &v : 0);
  if (SWIG_IsOK(res)) {    
    if (val) *val = v ? true : false;
    return res;
  }  
  return SWIG_TypeError;
}

SWIGINTERN bool std_vector_Sl_float_Sg____nonzero__(std::vector< float > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< float >::size_type std_vector_Sl_float_Sg____len__(std::vector< float > const *self){
      return self->size();
    }
SWIGINTERN std::vector< float >::value_type std_vector_Sl_float_Sg__pop(std::vector< float > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector< float,std::allocator< float > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN std::vector< float,std::allocator< float > > *std_vector_Sl_float_Sg____getslice__(std::vector< float > *self,std::vector< float >::difference_type i,std::vector< float >::difference_type j){
      return swig::getslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_float_Sg____setslice__(std::vector< float > *self,std::vector< float >::difference_type i,std::vector< float >::difference_type j,std::vector< float,std::allocator< float > > const &v){
      swig::setslice(self, i, j, v);
    }
SWIGINTERN void std_vector_Sl_float_Sg____delslice__(std::vector< float > *self,std::vector< float >::difference_type i,std::vector< float >::difference_type j){
      swig::delslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_float_Sg____delitem__(std::vector< float > *self,std::vector< float >::difference_type i){
      self->erase(swig::getpos(self,i));
    }
SWIGINTERN std::vector< float >::value_type const &std_vector_Sl_float_Sg____getitem__(std::vector< float > const *self,std::vector< float >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_float_Sg____setitem__(std::vector< float > *self,std::vector< float >::difference_type i,std::vector< float >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN void std_vector_Sl_float_Sg__append(std::vector< float > *self,std::vector< float >::value_type const &x){
      self->push_back(x);
    }
SWIGINTERN bool std_vector_Sl_double_Sg____nonzero__(std::vector< double > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< double >::size_type std_vector_Sl_double_Sg____len__(std::vector< double > const *self){
      return self->size();
    }
SWIGINTERN std::vector< double >::value_type std_vector_Sl_double_Sg__pop(std::vector< double > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector< double,std::allocator< double > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN std::vector< double,std::allocator< double > > *std_vector_Sl_double_Sg____getslice__(std::vector< double > *self,std::vector< double >::difference_type i,std::vector< double >::difference_type j){
      return swig::getslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_double_Sg____setslice__(std::vector< double > *self,std::vector< double >::difference_type i,std::vector< double >::difference_type j,std::vector< double,std::allocator< double > > const &v){
      swig::setslice(self, i, j, v);
    }
SWIGINTERN void std_vector_Sl_double_Sg____delslice__(std::vector< double > *self,std::vector< double >::difference_type i,std::vector< double >::difference_type j){
      swig::delslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_double_Sg____delitem__(std::vector< double > *self,std::vector< double >::difference_type i){
      self->erase(swig::getpos(self,i));
    }
SWIGINTERN std::vector< double >::value_type const &std_vector_Sl_double_Sg____getitem__(std::vector< double > const *self,std::vector< double >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_double_Sg____setitem__(std::vector< double > *self,std::vector< double >::difference_type i,std::vector< double >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN void std_vector_Sl_double_Sg__append(std::vector< double > *self,std::vector< double >::value_type const &x){
      self->push_back(x);
    }

  namespace swig {
    template <>  struct traits< Pair< cweeDateTime,float > > {
      typedef pointer_category category;
      static const char* type_name() { return"Pair< cweeDateTime,float >"; }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector< Pair< cweeDateTime,float >, std::allocator< Pair< cweeDateTime,float > > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "Pair< cweeDateTime,float >" "," "std::allocator< Pair< cweeDateTime,float > >" " >";
	  }
	};
      }
    
SWIGINTERN bool std_vector_Sl_Pair_Sl_cweeDateTime_Sc_float_Sg__Sg____nonzero__(std::vector< Pair< cweeDateTime,float > > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< Pair< cweeDateTime,float > >::size_type std_vector_Sl_Pair_Sl_cweeDateTime_Sc_float_Sg__Sg____len__(std::vector< Pair< cweeDateTime,float > > const *self){
      return self->size();
    }
SWIGINTERN std::vector< Pair< cweeDateTime,float > >::value_type std_vector_Sl_Pair_Sl_cweeDateTime_Sc_float_Sg__Sg__pop(std::vector< Pair< cweeDateTime,float > > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector< Pair< cweeDateTime,float >,std::allocator< Pair< cweeDateTime,float > > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN std::vector< Pair< cweeDateTime,float >,std::allocator< Pair< cweeDateTime,float > > > *std_vector_Sl_Pair_Sl_cweeDateTime_Sc_float_Sg__Sg____getslice__(std::vector< Pair< cweeDateTime,float > > *self,std::vector< Pair< cweeDateTime,float > >::difference_type i,std::vector< Pair< cweeDateTime,float > >::difference_type j){
      return swig::getslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_Pair_Sl_cweeDateTime_Sc_float_Sg__Sg____setslice__(std::vector< Pair< cweeDateTime,float > > *self,std::vector< Pair< cweeDateTime,float > >::difference_type i,std::vector< Pair< cweeDateTime,float > >::difference_type j,std::vector< Pair< cweeDateTime,float >,std::allocator< Pair< cweeDateTime,float > > > const &v){
      swig::setslice(self, i, j, v);
    }
SWIGINTERN void std_vector_Sl_Pair_Sl_cweeDateTime_Sc_float_Sg__Sg____delslice__(std::vector< Pair< cweeDateTime,float > > *self,std::vector< Pair< cweeDateTime,float > >::difference_type i,std::vector< Pair< cweeDateTime,float > >::difference_type j){
      swig::delslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_Pair_Sl_cweeDateTime_Sc_float_Sg__Sg____delitem__(std::vector< Pair< cweeDateTime,float > > *self,std::vector< Pair< cweeDateTime,float > >::difference_type i){
      self->erase(swig::getpos(self,i));
    }
SWIGINTERN std::vector< Pair< cweeDateTime,float > >::value_type const &std_vector_Sl_Pair_Sl_cweeDateTime_Sc_float_Sg__Sg____getitem__(std::vector< Pair< cweeDateTime,float > > const *self,std::vector< Pair< cweeDateTime,float > >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_Pair_Sl_cweeDateTime_Sc_float_Sg__Sg____setitem__(std::vector< Pair< cweeDateTime,float > > *self,std::vector< Pair< cweeDateTime,float > >::difference_type i,std::vector< Pair< cweeDateTime,float > >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN void std_vector_Sl_Pair_Sl_cweeDateTime_Sc_float_Sg__Sg__append(std::vector< Pair< cweeDateTime,float > > *self,std::vector< Pair< cweeDateTime,float > >::value_type const &x){
      self->push_back(x);
    }

  namespace swig {
    template <>  struct traits< Pair< double,double > > {
      typedef pointer_category category;
      static const char* type_name() { return"Pair< double,double >"; }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector< Pair< double,double >, std::allocator< Pair< double,double > > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "Pair< double,double >" "," "std::allocator< Pair< double,double > >" " >";
	  }
	};
      }
    
SWIGINTERN bool std_vector_Sl_Pair_Sl_double_Sc_double_Sg__Sg____nonzero__(std::vector< Pair< double,double > > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< Pair< double,double > >::size_type std_vector_Sl_Pair_Sl_double_Sc_double_Sg__Sg____len__(std::vector< Pair< double,double > > const *self){
      return self->size();
    }
SWIGINTERN std::vector< Pair< double,double > >::value_type std_vector_Sl_Pair_Sl_double_Sc_double_Sg__Sg__pop(std::vector< Pair< double,double > > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector< Pair< double,double >,std::allocator< Pair< double,double > > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN std::vector< Pair< double,double >,std::allocator< Pair< double,double > > > *std_vector_Sl_Pair_Sl_double_Sc_double_Sg__Sg____getslice__(std::vector< Pair< double,double > > *self,std::vector< Pair< double,double > >::difference_type i,std::vector< Pair< double,double > >::difference_type j){
      return swig::getslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_Pair_Sl_double_Sc_double_Sg__Sg____setslice__(std::vector< Pair< double,double > > *self,std::vector< Pair< double,double > >::difference_type i,std::vector< Pair< double,double > >::difference_type j,std::vector< Pair< double,double >,std::allocator< Pair< double,double > > > const &v){
      swig::setslice(self, i, j, v);
    }
SWIGINTERN void std_vector_Sl_Pair_Sl_double_Sc_double_Sg__Sg____delslice__(std::vector< Pair< double,double > > *self,std::vector< Pair< double,double > >::difference_type i,std::vector< Pair< double,double > >::difference_type j){
      swig::delslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_Pair_Sl_double_Sc_double_Sg__Sg____delitem__(std::vector< Pair< double,double > > *self,std::vector< Pair< double,double > >::difference_type i){
      self->erase(swig::getpos(self,i));
    }
SWIGINTERN std::vector< Pair< double,double > >::value_type const &std_vector_Sl_Pair_Sl_double_Sc_double_Sg__Sg____getitem__(std::vector< Pair< double,double > > const *self,std::vector< Pair< double,double > >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_Pair_Sl_double_Sc_double_Sg__Sg____setitem__(std::vector< Pair< double,double > > *self,std::vector< Pair< double,double > >::difference_type i,std::vector< Pair< double,double > >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN void std_vector_Sl_Pair_Sl_double_Sc_double_Sg__Sg__append(std::vector< Pair< double,double > > *self,std::vector< Pair< double,double > >::value_type const &x){
      self->push_back(x);
    }

  namespace swig {
    template <>  struct traits< ScriptingNode > {
      typedef pointer_category category;
      static const char* type_name() { return"ScriptingNode"; }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector< ScriptingNode, std::allocator< ScriptingNode > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "ScriptingNode" "," "std::allocator< ScriptingNode >" " >";
	  }
	};
      }
    
SWIGINTERN bool std_vector_Sl_ScriptingNode_Sg____nonzero__(std::vector< ScriptingNode > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< ScriptingNode >::size_type std_vector_Sl_ScriptingNode_Sg____len__(std::vector< ScriptingNode > const *self){
      return self->size();
    }
SWIGINTERN std::vector< ScriptingNode >::value_type std_vector_Sl_ScriptingNode_Sg__pop(std::vector< ScriptingNode > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector< ScriptingNode,std::allocator< ScriptingNode > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN std::vector< ScriptingNode,std::allocator< ScriptingNode > > *std_vector_Sl_ScriptingNode_Sg____getslice__(std::vector< ScriptingNode > *self,std::vector< ScriptingNode >::difference_type i,std::vector< ScriptingNode >::difference_type j){
      return swig::getslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_ScriptingNode_Sg____setslice__(std::vector< ScriptingNode > *self,std::vector< ScriptingNode >::difference_type i,std::vector< ScriptingNode >::difference_type j,std::vector< ScriptingNode,std::allocator< ScriptingNode > > const &v){
      swig::setslice(self, i, j, v);
    }
SWIGINTERN void std_vector_Sl_ScriptingNode_Sg____delslice__(std::vector< ScriptingNode > *self,std::vector< ScriptingNode >::difference_type i,std::vector< ScriptingNode >::difference_type j){
      swig::delslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_ScriptingNode_Sg____delitem__(std::vector< ScriptingNode > *self,std::vector< ScriptingNode >::difference_type i){
      self->erase(swig::getpos(self,i));
    }
SWIGINTERN std::vector< ScriptingNode >::value_type const &std_vector_Sl_ScriptingNode_Sg____getitem__(std::vector< ScriptingNode > const *self,std::vector< ScriptingNode >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_ScriptingNode_Sg____setitem__(std::vector< ScriptingNode > *self,std::vector< ScriptingNode >::difference_type i,std::vector< ScriptingNode >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN void std_vector_Sl_ScriptingNode_Sg__append(std::vector< ScriptingNode > *self,std::vector< ScriptingNode >::value_type const &x){
      self->push_back(x);
    }

  namespace swig {
    template <>  struct traits< MapBackground_Interop > {
      typedef pointer_category category;
      static const char* type_name() { return"MapBackground_Interop"; }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector< MapBackground_Interop, std::allocator< MapBackground_Interop > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "MapBackground_Interop" "," "std::allocator< MapBackground_Interop >" " >";
	  }
	};
      }
    
SWIGINTERN bool std_vector_Sl_MapBackground_Interop_Sg____nonzero__(std::vector< MapBackground_Interop > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< MapBackground_Interop >::size_type std_vector_Sl_MapBackground_Interop_Sg____len__(std::vector< MapBackground_Interop > const *self){
      return self->size();
    }
SWIGINTERN std::vector< MapBackground_Interop >::value_type std_vector_Sl_MapBackground_Interop_Sg__pop(std::vector< MapBackground_Interop > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector< MapBackground_Interop,std::allocator< MapBackground_Interop > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN std::vector< MapBackground_Interop,std::allocator< MapBackground_Interop > > *std_vector_Sl_MapBackground_Interop_Sg____getslice__(std::vector< MapBackground_Interop > *self,std::vector< MapBackground_Interop >::difference_type i,std::vector< MapBackground_Interop >::difference_type j){
      return swig::getslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_MapBackground_Interop_Sg____setslice__(std::vector< MapBackground_Interop > *self,std::vector< MapBackground_Interop >::difference_type i,std::vector< MapBackground_Interop >::difference_type j,std::vector< MapBackground_Interop,std::allocator< MapBackground_Interop > > const &v){
      swig::setslice(self, i, j, v);
    }
SWIGINTERN void std_vector_Sl_MapBackground_Interop_Sg____delslice__(std::vector< MapBackground_Interop > *self,std::vector< MapBackground_Interop >::difference_type i,std::vector< MapBackground_Interop >::difference_type j){
      swig::delslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_MapBackground_Interop_Sg____delitem__(std::vector< MapBackground_Interop > *self,std::vector< MapBackground_Interop >::difference_type i){
      self->erase(swig::getpos(self,i));
    }
SWIGINTERN std::vector< MapBackground_Interop >::value_type const &std_vector_Sl_MapBackground_Interop_Sg____getitem__(std::vector< MapBackground_Interop > const *self,std::vector< MapBackground_Interop >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_MapBackground_Interop_Sg____setitem__(std::vector< MapBackground_Interop > *self,std::vector< MapBackground_Interop >::difference_type i,std::vector< MapBackground_Interop >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN void std_vector_Sl_MapBackground_Interop_Sg__append(std::vector< MapBackground_Interop > *self,std::vector< MapBackground_Interop >::value_type const &x){
      self->push_back(x);
    }

  namespace swig {
    template <>  struct traits< Color_Interop > {
      typedef pointer_category category;
      static const char* type_name() { return"Color_Interop"; }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector< Color_Interop, std::allocator< Color_Interop > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "Color_Interop" "," "std::allocator< Color_Interop >" " >";
	  }
	};
      }
    
SWIGINTERN bool std_vector_Sl_Color_Interop_Sg____nonzero__(std::vector< Color_Interop > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< Color_Interop >::size_type std_vector_Sl_Color_Interop_Sg____len__(std::vector< Color_Interop > const *self){
      return self->size();
    }
SWIGINTERN std::vector< Color_Interop >::value_type std_vector_Sl_Color_Interop_Sg__pop(std::vector< Color_Interop > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector< Color_Interop,std::allocator< Color_Interop > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN std::vector< Color_Interop,std::allocator< Color_Interop > > *std_vector_Sl_Color_Interop_Sg____getslice__(std::vector< Color_Interop > *self,std::vector< Color_Interop >::difference_type i,std::vector< Color_Interop >::difference_type j){
      return swig::getslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_Color_Interop_Sg____setslice__(std::vector< Color_Interop > *self,std::vector< Color_Interop >::difference_type i,std::vector< Color_Interop >::difference_type j,std::vector< Color_Interop,std::allocator< Color_Interop > > const &v){
      swig::setslice(self, i, j, v);
    }
SWIGINTERN void std_vector_Sl_Color_Interop_Sg____delslice__(std::vector< Color_Interop > *self,std::vector< Color_Interop >::difference_type i,std::vector< Color_Interop >::difference_type j){
      swig::delslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_Color_Interop_Sg____delitem__(std::vector< Color_Interop > *self,std::vector< Color_Interop >::difference_type i){
      self->erase(swig::getpos(self,i));
    }
SWIGINTERN std::vector< Color_Interop >::value_type const &std_vector_Sl_Color_Interop_Sg____getitem__(std::vector< Color_Interop > const *self,std::vector< Color_Interop >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_Color_Interop_Sg____setitem__(std::vector< Color_Interop > *self,std::vector< Color_Interop >::difference_type i,std::vector< Color_Interop >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN void std_vector_Sl_Color_Interop_Sg__append(std::vector< Color_Interop > *self,std::vector< Color_Interop >::value_type const &x){
      self->push_back(x);
    }

namespace swig {
  template <> struct traits< int > {
    typedef value_category category;
    static const char* type_name() { return"int"; }
  };
  template <>  struct traits_asval< int > {
    typedef int value_type;
    static int asval(SEXP obj, value_type *val) {
      return SWIG_AsVal_int (obj, val);
    }
  };
  template <>  struct traits_from< int > {
    typedef int value_type;
    static SEXP from(const value_type& val) {
      return SWIG_From_int  (val);
    }
  };
}




      namespace swig {
	template <>  struct traits<std::pair< int, MapBackground_Interop > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::pair<" "int" "," "MapBackground_Interop" " >";
	  }
	};
      }
    



      namespace swig {
	template <>  struct traits<std::map< int, MapBackground_Interop, std::less< int >, std::allocator< std::pair< int const,MapBackground_Interop > > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::map<" "int" "," "MapBackground_Interop" "," "std::less< int >" "," "std::allocator< std::pair< int const,MapBackground_Interop > >" " >";
	  }
	};
      }
    

  namespace swig {
    template <>  struct traits< MapPolyline_Interop > {
      typedef pointer_category category;
      static const char* type_name() { return"MapPolyline_Interop"; }
    };
  }


      namespace swig {
	template <>  struct traits<std::pair< int, MapPolyline_Interop > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::pair<" "int" "," "MapPolyline_Interop" " >";
	  }
	};
      }
    

      namespace swig {
	template <>  struct traits<std::map< int, MapPolyline_Interop, std::less< int >, std::allocator< std::pair< int const,MapPolyline_Interop > > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::map<" "int" "," "MapPolyline_Interop" "," "std::less< int >" "," "std::allocator< std::pair< int const,MapPolyline_Interop > >" " >";
	  }
	};
      }
    

  namespace swig {
    template <>  struct traits< MapIcon_Interop > {
      typedef pointer_category category;
      static const char* type_name() { return"MapIcon_Interop"; }
    };
  }


      namespace swig {
	template <>  struct traits<std::pair< int, MapIcon_Interop > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::pair<" "int" "," "MapIcon_Interop" " >";
	  }
	};
      }
    

      namespace swig {
	template <>  struct traits<std::map< int, MapIcon_Interop, std::less< int >, std::allocator< std::pair< int const,MapIcon_Interop > > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::map<" "int" "," "MapIcon_Interop" "," "std::less< int >" "," "std::allocator< std::pair< int const,MapIcon_Interop > >" " >";
	  }
	};
      }
    

#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT SEXP
R_swig_uwp_color_RED_get ( SEXP s_swig_copy)
{
  {
    uwp_color result;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    result = (uwp_color)RED;
    r_ans = SWIG_From_int(static_cast< int >(result));
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_uwp_color_BLUE_get ( SEXP s_swig_copy)
{
  {
    uwp_color result;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    result = (uwp_color)BLUE;
    r_ans = SWIG_From_int(static_cast< int >(result));
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_uwp_color_GREEN_get ( SEXP s_swig_copy)
{
  {
    uwp_color result;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    result = (uwp_color)GREEN;
    r_ans = SWIG_From_int(static_cast< int >(result));
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_uwp_patternInterpType_LEFT_get ( SEXP s_swig_copy)
{
  {
    uwp_patternInterpType result;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    result = (uwp_patternInterpType)LEFT;
    r_ans = SWIG_From_int(static_cast< int >(result));
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_uwp_patternInterpType_RIGHT_get ( SEXP s_swig_copy)
{
  {
    uwp_patternInterpType result;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    result = (uwp_patternInterpType)RIGHT;
    r_ans = SWIG_From_int(static_cast< int >(result));
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_uwp_patternInterpType_LINEAR_get ( SEXP s_swig_copy)
{
  {
    uwp_patternInterpType result;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    result = (uwp_patternInterpType)LINEAR;
    r_ans = SWIG_From_int(static_cast< int >(result));
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_uwp_patternInterpType_SPLINE_get ( SEXP s_swig_copy)
{
  {
    uwp_patternInterpType result;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    result = (uwp_patternInterpType)SPLINE;
    r_ans = SWIG_From_int(static_cast< int >(result));
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_new_cweeDateTime__SWIG_0 ( )
{
  {
    cweeDateTime *result = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    result = (cweeDateTime *)new cweeDateTime();
    r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cweeDateTime, SWIG_POINTER_OWN |  0 );
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_new_cweeDateTime__SWIG_1 ( SEXP x)
{
  {
    cweeDateTime *result = 0 ;
    double arg1 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    arg1 = static_cast< double >(REAL(x)[0]);
    result = (cweeDateTime *)new cweeDateTime(arg1);
    r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cweeDateTime, SWIG_POINTER_OWN |  0 );
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_cweeDateTime_unixTime_set ( SEXP self, SEXP s_unixTime)
{
  {
    cweeDateTime *arg1 = (cweeDateTime *) 0 ;
    double arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_cweeDateTime, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cweeDateTime_unixTime_set" "', argument " "1"" of type '" "cweeDateTime *""'"); 
    }
    arg1 = reinterpret_cast< cweeDateTime * >(argp1);
    arg2 = static_cast< double >(REAL(s_unixTime)[0]);
    if (arg1) (arg1)->unixTime = arg2;
    r_ans = R_NilValue;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_cweeDateTime_unixTime_get ( SEXP self, SEXP s_swig_copy)
{
  {
    double result;
    cweeDateTime *arg1 = (cweeDateTime *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_cweeDateTime, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cweeDateTime_unixTime_get" "', argument " "1"" of type '" "cweeDateTime *""'"); 
    }
    arg1 = reinterpret_cast< cweeDateTime * >(argp1);
    result = (double) ((arg1)->unixTime);
    r_ans = SWIG_From_double(static_cast< double >(result));
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_cweeDateTime_year_set ( SEXP self, SEXP s_year)
{
  {
    cweeDateTime *arg1 = (cweeDateTime *) 0 ;
    int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_cweeDateTime, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cweeDateTime_year_set" "', argument " "1"" of type '" "cweeDateTime *""'"); 
    }
    arg1 = reinterpret_cast< cweeDateTime * >(argp1);
    arg2 = static_cast< int >(INTEGER(s_year)[0]);
    if (arg1) (arg1)->year = arg2;
    r_ans = R_NilValue;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_cweeDateTime_year_get ( SEXP self, SEXP s_swig_copy)
{
  {
    int result;
    cweeDateTime *arg1 = (cweeDateTime *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_cweeDateTime, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cweeDateTime_year_get" "', argument " "1"" of type '" "cweeDateTime *""'"); 
    }
    arg1 = reinterpret_cast< cweeDateTime * >(argp1);
    result = (int) ((arg1)->year);
    r_ans = Rf_ScalarInteger(result);
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_cweeDateTime_month_set ( SEXP self, SEXP s_month)
{
  {
    cweeDateTime *arg1 = (cweeDateTime *) 0 ;
    int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_cweeDateTime, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cweeDateTime_month_set" "', argument " "1"" of type '" "cweeDateTime *""'"); 
    }
    arg1 = reinterpret_cast< cweeDateTime * >(argp1);
    arg2 = static_cast< int >(INTEGER(s_month)[0]);
    if (arg1) (arg1)->month = arg2;
    r_ans = R_NilValue;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_cweeDateTime_month_get ( SEXP self, SEXP s_swig_copy)
{
  {
    int result;
    cweeDateTime *arg1 = (cweeDateTime *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_cweeDateTime, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cweeDateTime_month_get" "', argument " "1"" of type '" "cweeDateTime *""'"); 
    }
    arg1 = reinterpret_cast< cweeDateTime * >(argp1);
    result = (int) ((arg1)->month);
    r_ans = Rf_ScalarInteger(result);
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_cweeDateTime_day_set ( SEXP self, SEXP s_day)
{
  {
    cweeDateTime *arg1 = (cweeDateTime *) 0 ;
    int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_cweeDateTime, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cweeDateTime_day_set" "', argument " "1"" of type '" "cweeDateTime *""'"); 
    }
    arg1 = reinterpret_cast< cweeDateTime * >(argp1);
    arg2 = static_cast< int >(INTEGER(s_day)[0]);
    if (arg1) (arg1)->day = arg2;
    r_ans = R_NilValue;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_cweeDateTime_day_get ( SEXP self, SEXP s_swig_copy)
{
  {
    int result;
    cweeDateTime *arg1 = (cweeDateTime *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_cweeDateTime, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cweeDateTime_day_get" "', argument " "1"" of type '" "cweeDateTime *""'"); 
    }
    arg1 = reinterpret_cast< cweeDateTime * >(argp1);
    result = (int) ((arg1)->day);
    r_ans = Rf_ScalarInteger(result);
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_cweeDateTime_hour_set ( SEXP self, SEXP s_hour)
{
  {
    cweeDateTime *arg1 = (cweeDateTime *) 0 ;
    int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_cweeDateTime, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cweeDateTime_hour_set" "', argument " "1"" of type '" "cweeDateTime *""'"); 
    }
    arg1 = reinterpret_cast< cweeDateTime * >(argp1);
    arg2 = static_cast< int >(INTEGER(s_hour)[0]);
    if (arg1) (arg1)->hour = arg2;
    r_ans = R_NilValue;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_cweeDateTime_hour_get ( SEXP self, SEXP s_swig_copy)
{
  {
    int result;
    cweeDateTime *arg1 = (cweeDateTime *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_cweeDateTime, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cweeDateTime_hour_get" "', argument " "1"" of type '" "cweeDateTime *""'"); 
    }
    arg1 = reinterpret_cast< cweeDateTime * >(argp1);
    result = (int) ((arg1)->hour);
    r_ans = Rf_ScalarInteger(result);
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_cweeDateTime_minute_set ( SEXP self, SEXP s_minute)
{
  {
    cweeDateTime *arg1 = (cweeDateTime *) 0 ;
    int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_cweeDateTime, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cweeDateTime_minute_set" "', argument " "1"" of type '" "cweeDateTime *""'"); 
    }
    arg1 = reinterpret_cast< cweeDateTime * >(argp1);
    arg2 = static_cast< int >(INTEGER(s_minute)[0]);
    if (arg1) (arg1)->minute = arg2;
    r_ans = R_NilValue;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_cweeDateTime_minute_get ( SEXP self, SEXP s_swig_copy)
{
  {
    int result;
    cweeDateTime *arg1 = (cweeDateTime *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_cweeDateTime, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cweeDateTime_minute_get" "', argument " "1"" of type '" "cweeDateTime *""'"); 
    }
    arg1 = reinterpret_cast< cweeDateTime * >(argp1);
    result = (int) ((arg1)->minute);
    r_ans = Rf_ScalarInteger(result);
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_cweeDateTime_second_set ( SEXP self, SEXP s_second)
{
  {
    cweeDateTime *arg1 = (cweeDateTime *) 0 ;
    int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_cweeDateTime, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cweeDateTime_second_set" "', argument " "1"" of type '" "cweeDateTime *""'"); 
    }
    arg1 = reinterpret_cast< cweeDateTime * >(argp1);
    arg2 = static_cast< int >(INTEGER(s_second)[0]);
    if (arg1) (arg1)->second = arg2;
    r_ans = R_NilValue;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_cweeDateTime_second_get ( SEXP self, SEXP s_swig_copy)
{
  {
    int result;
    cweeDateTime *arg1 = (cweeDateTime *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_cweeDateTime, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cweeDateTime_second_get" "', argument " "1"" of type '" "cweeDateTime *""'"); 
    }
    arg1 = reinterpret_cast< cweeDateTime * >(argp1);
    result = (int) ((arg1)->second);
    r_ans = Rf_ScalarInteger(result);
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_cweeDateTime_milliseconds_set ( SEXP self, SEXP s_milliseconds)
{
  {
    cweeDateTime *arg1 = (cweeDateTime *) 0 ;
    int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_cweeDateTime, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cweeDateTime_milliseconds_set" "', argument " "1"" of type '" "cweeDateTime *""'"); 
    }
    arg1 = reinterpret_cast< cweeDateTime * >(argp1);
    arg2 = static_cast< int >(INTEGER(s_milliseconds)[0]);
    if (arg1) (arg1)->milliseconds = arg2;
    r_ans = R_NilValue;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_cweeDateTime_milliseconds_get ( SEXP self, SEXP s_swig_copy)
{
  {
    int result;
    cweeDateTime *arg1 = (cweeDateTime *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_cweeDateTime, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cweeDateTime_milliseconds_get" "', argument " "1"" of type '" "cweeDateTime *""'"); 
    }
    arg1 = reinterpret_cast< cweeDateTime * >(argp1);
    result = (int) ((arg1)->milliseconds);
    r_ans = Rf_ScalarInteger(result);
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_delete_cweeDateTime ( SEXP self)
{
  {
    cweeDateTime *arg1 = (cweeDateTime *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_cweeDateTime, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_cweeDateTime" "', argument " "1"" of type '" "cweeDateTime *""'"); 
    }
    arg1 = reinterpret_cast< cweeDateTime * >(argp1);
    delete arg1;
    r_ans = R_NilValue;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    R_ClearExternalPtr(self);
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_new_Awaiter ( )
{
  {
    Awaiter *result = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    result = (Awaiter *)new Awaiter();
    r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Awaiter, SWIG_POINTER_OWN |  0 );
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_Awaiter_IsFinished ( SEXP self, SEXP s_swig_copy)
{
  {
    bool result;
    Awaiter *arg1 = (Awaiter *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_Awaiter, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Awaiter_IsFinished" "', argument " "1"" of type '" "Awaiter *""'"); 
    }
    arg1 = reinterpret_cast< Awaiter * >(argp1);
    result = (bool)(arg1)->IsFinished();
    r_ans = Rf_ScalarLogical(result);
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_Awaiter_Result ( SEXP self, SEXP s_swig_copy)
{
  {
    std::string result;
    Awaiter *arg1 = (Awaiter *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_Awaiter, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Awaiter_Result" "', argument " "1"" of type '" "Awaiter *""'"); 
    }
    arg1 = reinterpret_cast< Awaiter * >(argp1);
    result = (arg1)->Result();
    r_ans = SWIG_From_std_string(static_cast< std::string >(result));
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_Awaiter_data_m_set ( SEXP self, SEXP s_data_m)
{
  {
    Awaiter *arg1 = (Awaiter *) 0 ;
    std::shared_ptr< std::string > *arg2 = (std::shared_ptr< std::string > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_Awaiter, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Awaiter_data_m_set" "', argument " "1"" of type '" "Awaiter *""'"); 
    }
    arg1 = reinterpret_cast< Awaiter * >(argp1);
    res2 = SWIG_R_ConvertPtr(s_data_m, &argp2, SWIGTYPE_p_std__shared_ptrT_std__string_t, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Awaiter_data_m_set" "', argument " "2"" of type '" "std::shared_ptr< std::string > *""'"); 
    }
    arg2 = reinterpret_cast< std::shared_ptr< std::string > * >(argp2);
    if (arg1) (arg1)->data_m = *arg2;
    r_ans = R_NilValue;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_Awaiter_data_m_get ( SEXP self)
{
  {
    std::shared_ptr< std::string > *result = 0 ;
    Awaiter *arg1 = (Awaiter *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_Awaiter, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Awaiter_data_m_get" "', argument " "1"" of type '" "Awaiter *""'"); 
    }
    arg1 = reinterpret_cast< Awaiter * >(argp1);
    result = (std::shared_ptr< std::string > *)& ((arg1)->data_m);
    r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__shared_ptrT_std__string_t, 0 |  0 );
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_Awaiter_isFinished_m_set ( SEXP self, SEXP s_isFinished_m)
{
  {
    Awaiter *arg1 = (Awaiter *) 0 ;
    std::shared_ptr< bool > *arg2 = (std::shared_ptr< bool > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_Awaiter, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Awaiter_isFinished_m_set" "', argument " "1"" of type '" "Awaiter *""'"); 
    }
    arg1 = reinterpret_cast< Awaiter * >(argp1);
    res2 = SWIG_R_ConvertPtr(s_isFinished_m, &argp2, SWIGTYPE_p_std__shared_ptrT_bool_t, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Awaiter_isFinished_m_set" "', argument " "2"" of type '" "std::shared_ptr< bool > *""'"); 
    }
    arg2 = reinterpret_cast< std::shared_ptr< bool > * >(argp2);
    if (arg1) (arg1)->isFinished_m = *arg2;
    r_ans = R_NilValue;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_Awaiter_isFinished_m_get ( SEXP self)
{
  {
    std::shared_ptr< bool > *result = 0 ;
    Awaiter *arg1 = (Awaiter *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_Awaiter, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Awaiter_isFinished_m_get" "', argument " "1"" of type '" "Awaiter *""'"); 
    }
    arg1 = reinterpret_cast< Awaiter * >(argp1);
    result = (std::shared_ptr< bool > *)& ((arg1)->isFinished_m);
    r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__shared_ptrT_bool_t, 0 |  0 );
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_delete_Awaiter ( SEXP self)
{
  {
    Awaiter *arg1 = (Awaiter *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_Awaiter, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Awaiter" "', argument " "1"" of type '" "Awaiter *""'"); 
    }
    arg1 = reinterpret_cast< Awaiter * >(argp1);
    delete arg1;
    r_ans = R_NilValue;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    R_ClearExternalPtr(self);
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_new_SharedMatrix__SWIG_0 ( )
{
  {
    SharedMatrix *result = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    result = (SharedMatrix *)new SharedMatrix();
    r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_SharedMatrix, SWIG_POINTER_OWN |  0 );
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_new_SharedMatrix__SWIG_1 ( SEXP index, SEXP deleteDataWhenScopeEnds)
{
  {
    SharedMatrix *result = 0 ;
    int arg1 ;
    bool arg2 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    arg1 = static_cast< int >(INTEGER(index)[0]);
    arg2 = LOGICAL(deleteDataWhenScopeEnds)[0] ? true : false;
    result = (SharedMatrix *)new SharedMatrix(arg1,arg2);
    r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_SharedMatrix, SWIG_POINTER_OWN |  0 );
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_new_SharedMatrix__SWIG_2 ( SEXP index)
{
  {
    SharedMatrix *result = 0 ;
    int arg1 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    arg1 = static_cast< int >(INTEGER(index)[0]);
    result = (SharedMatrix *)new SharedMatrix(arg1);
    r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_SharedMatrix, SWIG_POINTER_OWN |  0 );
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_new_SharedMatrix__SWIG_3 ( SEXP other)
{
  {
    SharedMatrix *result = 0 ;
    SharedMatrix *arg1 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(other, &argp1, SWIGTYPE_p_SharedMatrix,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SharedMatrix" "', argument " "1"" of type '" "SharedMatrix const &""'"); 
    }
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SharedMatrix" "', argument " "1"" of type '" "SharedMatrix const &""'"); 
    }
    arg1 = reinterpret_cast< SharedMatrix * >(argp1);
    result = (SharedMatrix *)new SharedMatrix((SharedMatrix const &)*arg1);
    r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_SharedMatrix, SWIG_POINTER_OWN |  0 );
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_delete_SharedMatrix ( SEXP self)
{
  {
    SharedMatrix *arg1 = (SharedMatrix *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_SharedMatrix, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SharedMatrix" "', argument " "1"" of type '" "SharedMatrix *""'"); 
    }
    arg1 = reinterpret_cast< SharedMatrix * >(argp1);
    delete arg1;
    r_ans = R_NilValue;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    R_ClearExternalPtr(self);
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_SharedMatrix_Clear ( SEXP self)
{
  {
    SharedMatrix *arg1 = (SharedMatrix *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_SharedMatrix, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SharedMatrix_Clear" "', argument " "1"" of type '" "SharedMatrix *""'"); 
    }
    arg1 = reinterpret_cast< SharedMatrix * >(argp1);
    (arg1)->Clear();
    r_ans = R_NilValue;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_SharedMatrix_AppendData ( SEXP self, SEXP X, SEXP Y, SEXP value)
{
  {
    SharedMatrix *arg1 = (SharedMatrix *) 0 ;
    double arg2 ;
    double arg3 ;
    float arg4 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_SharedMatrix, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SharedMatrix_AppendData" "', argument " "1"" of type '" "SharedMatrix *""'"); 
    }
    arg1 = reinterpret_cast< SharedMatrix * >(argp1);
    arg2 = static_cast< double >(REAL(X)[0]);
    arg3 = static_cast< double >(REAL(Y)[0]);
    arg4 = static_cast< float >(REAL(value)[0]);
    (arg1)->AppendData(arg2,arg3,arg4);
    r_ans = R_NilValue;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_SharedMatrix_GetValue ( SEXP self, SEXP X, SEXP Y, SEXP s_swig_copy)
{
  {
    double result;
    SharedMatrix *arg1 = (SharedMatrix *) 0 ;
    double arg2 ;
    double arg3 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_SharedMatrix, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SharedMatrix_GetValue" "', argument " "1"" of type '" "SharedMatrix *""'"); 
    }
    arg1 = reinterpret_cast< SharedMatrix * >(argp1);
    arg2 = static_cast< double >(REAL(X)[0]);
    arg3 = static_cast< double >(REAL(Y)[0]);
    result = (double)(arg1)->GetValue(arg2,arg3);
    r_ans = SWIG_From_double(static_cast< double >(result));
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_SharedMatrix_GetKnotSeries ( SEXP self, SEXP Left, SEXP Top, SEXP Right, SEXP Bottom, SEXP numColumns, SEXP numRows, SEXP s_swig_copy)
{
  {
    std::vector< double,std::allocator< double > > result;
    SharedMatrix *arg1 = (SharedMatrix *) 0 ;
    double arg2 ;
    double arg3 ;
    double arg4 ;
    double arg5 ;
    int arg6 ;
    int arg7 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_SharedMatrix, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SharedMatrix_GetKnotSeries" "', argument " "1"" of type '" "SharedMatrix *""'"); 
    }
    arg1 = reinterpret_cast< SharedMatrix * >(argp1);
    arg2 = static_cast< double >(REAL(Left)[0]);
    arg3 = static_cast< double >(REAL(Top)[0]);
    arg4 = static_cast< double >(REAL(Right)[0]);
    arg5 = static_cast< double >(REAL(Bottom)[0]);
    arg6 = static_cast< int >(INTEGER(numColumns)[0]);
    arg7 = static_cast< int >(INTEGER(numRows)[0]);
    result = (arg1)->GetKnotSeries(arg2,arg3,arg4,arg5,arg6,arg7);
    r_ans = swig::from(static_cast< std::vector<double> >(result));
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_SharedMatrix_GetTimeSeries ( SEXP self, SEXP Left, SEXP Top, SEXP Right, SEXP Bottom, SEXP numColumns, SEXP numRows, SEXP s_swig_copy)
{
  {
    std::vector< double,std::allocator< double > > result;
    SharedMatrix *arg1 = (SharedMatrix *) 0 ;
    double arg2 ;
    double arg3 ;
    double arg4 ;
    double arg5 ;
    int arg6 ;
    int arg7 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_SharedMatrix, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SharedMatrix_GetTimeSeries" "', argument " "1"" of type '" "SharedMatrix *""'"); 
    }
    arg1 = reinterpret_cast< SharedMatrix * >(argp1);
    arg2 = static_cast< double >(REAL(Left)[0]);
    arg3 = static_cast< double >(REAL(Top)[0]);
    arg4 = static_cast< double >(REAL(Right)[0]);
    arg5 = static_cast< double >(REAL(Bottom)[0]);
    arg6 = static_cast< int >(INTEGER(numColumns)[0]);
    arg7 = static_cast< int >(INTEGER(numRows)[0]);
    result = (arg1)->GetTimeSeries(arg2,arg3,arg4,arg5,arg6,arg7);
    r_ans = swig::from(static_cast< std::vector<double> >(result));
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_SharedMatrix_GetMinX ( SEXP self, SEXP s_swig_copy)
{
  {
    double result;
    SharedMatrix *arg1 = (SharedMatrix *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_SharedMatrix, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SharedMatrix_GetMinX" "', argument " "1"" of type '" "SharedMatrix *""'"); 
    }
    arg1 = reinterpret_cast< SharedMatrix * >(argp1);
    result = (double)(arg1)->GetMinX();
    r_ans = SWIG_From_double(static_cast< double >(result));
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_SharedMatrix_GetMaxX ( SEXP self, SEXP s_swig_copy)
{
  {
    double result;
    SharedMatrix *arg1 = (SharedMatrix *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_SharedMatrix, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SharedMatrix_GetMaxX" "', argument " "1"" of type '" "SharedMatrix *""'"); 
    }
    arg1 = reinterpret_cast< SharedMatrix * >(argp1);
    result = (double)(arg1)->GetMaxX();
    r_ans = SWIG_From_double(static_cast< double >(result));
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_SharedMatrix_GetMinY ( SEXP self, SEXP s_swig_copy)
{
  {
    double result;
    SharedMatrix *arg1 = (SharedMatrix *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_SharedMatrix, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SharedMatrix_GetMinY" "', argument " "1"" of type '" "SharedMatrix *""'"); 
    }
    arg1 = reinterpret_cast< SharedMatrix * >(argp1);
    result = (double)(arg1)->GetMinY();
    r_ans = SWIG_From_double(static_cast< double >(result));
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_SharedMatrix_GetMaxY ( SEXP self, SEXP s_swig_copy)
{
  {
    double result;
    SharedMatrix *arg1 = (SharedMatrix *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_SharedMatrix, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SharedMatrix_GetMaxY" "', argument " "1"" of type '" "SharedMatrix *""'"); 
    }
    arg1 = reinterpret_cast< SharedMatrix * >(argp1);
    result = (double)(arg1)->GetMaxY();
    r_ans = SWIG_From_double(static_cast< double >(result));
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_SharedMatrix_GetMinValue ( SEXP self, SEXP s_swig_copy)
{
  {
    double result;
    SharedMatrix *arg1 = (SharedMatrix *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_SharedMatrix, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SharedMatrix_GetMinValue" "', argument " "1"" of type '" "SharedMatrix *""'"); 
    }
    arg1 = reinterpret_cast< SharedMatrix * >(argp1);
    result = (double)(arg1)->GetMinValue();
    r_ans = SWIG_From_double(static_cast< double >(result));
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_SharedMatrix_GetMaxValue ( SEXP self, SEXP s_swig_copy)
{
  {
    double result;
    SharedMatrix *arg1 = (SharedMatrix *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_SharedMatrix, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SharedMatrix_GetMaxValue" "', argument " "1"" of type '" "SharedMatrix *""'"); 
    }
    arg1 = reinterpret_cast< SharedMatrix * >(argp1);
    result = (double)(arg1)->GetMaxValue();
    r_ans = SWIG_From_double(static_cast< double >(result));
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_SharedMatrix_GetNumValues ( SEXP self, SEXP s_swig_copy)
{
  {
    int result;
    SharedMatrix *arg1 = (SharedMatrix *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_SharedMatrix, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SharedMatrix_GetNumValues" "', argument " "1"" of type '" "SharedMatrix *""'"); 
    }
    arg1 = reinterpret_cast< SharedMatrix * >(argp1);
    result = (int)(arg1)->GetNumValues();
    r_ans = Rf_ScalarInteger(result);
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_SharedMatrix_Index ( SEXP self, SEXP s_swig_copy)
{
  {
    int result;
    SharedMatrix *arg1 = (SharedMatrix *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_SharedMatrix, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SharedMatrix_Index" "', argument " "1"" of type '" "SharedMatrix *""'"); 
    }
    arg1 = reinterpret_cast< SharedMatrix * >(argp1);
    result = (int)(arg1)->Index();
    r_ans = Rf_ScalarInteger(result);
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_new_SharedTimeSeriesPattern__SWIG_0 ( )
{
  {
    SharedTimeSeriesPattern *result = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    result = (SharedTimeSeriesPattern *)new SharedTimeSeriesPattern();
    r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_SharedTimeSeriesPattern, SWIG_POINTER_OWN |  0 );
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_new_SharedTimeSeriesPattern__SWIG_1 ( SEXP index, SEXP deleteDataWhenScopeEnds)
{
  {
    SharedTimeSeriesPattern *result = 0 ;
    int arg1 ;
    bool arg2 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    arg1 = static_cast< int >(INTEGER(index)[0]);
    arg2 = LOGICAL(deleteDataWhenScopeEnds)[0] ? true : false;
    result = (SharedTimeSeriesPattern *)new SharedTimeSeriesPattern(arg1,arg2);
    r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_SharedTimeSeriesPattern, SWIG_POINTER_OWN |  0 );
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_new_SharedTimeSeriesPattern__SWIG_2 ( SEXP index)
{
  {
    SharedTimeSeriesPattern *result = 0 ;
    int arg1 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    arg1 = static_cast< int >(INTEGER(index)[0]);
    result = (SharedTimeSeriesPattern *)new SharedTimeSeriesPattern(arg1);
    r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_SharedTimeSeriesPattern, SWIG_POINTER_OWN |  0 );
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_delete_SharedTimeSeriesPattern ( SEXP self)
{
  {
    SharedTimeSeriesPattern *arg1 = (SharedTimeSeriesPattern *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_SharedTimeSeriesPattern, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SharedTimeSeriesPattern" "', argument " "1"" of type '" "SharedTimeSeriesPattern *""'"); 
    }
    arg1 = reinterpret_cast< SharedTimeSeriesPattern * >(argp1);
    delete arg1;
    r_ans = R_NilValue;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    R_ClearExternalPtr(self);
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_SharedTimeSeriesPattern_Clear ( SEXP self)
{
  {
    SharedTimeSeriesPattern *arg1 = (SharedTimeSeriesPattern *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_SharedTimeSeriesPattern, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SharedTimeSeriesPattern_Clear" "', argument " "1"" of type '" "SharedTimeSeriesPattern *""'"); 
    }
    arg1 = reinterpret_cast< SharedTimeSeriesPattern * >(argp1);
    (arg1)->Clear();
    r_ans = R_NilValue;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_SharedTimeSeriesPattern_AppendData ( SEXP self, SEXP time, SEXP value)
{
  {
    SharedTimeSeriesPattern *arg1 = (SharedTimeSeriesPattern *) 0 ;
    double arg2 ;
    float arg3 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_SharedTimeSeriesPattern, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SharedTimeSeriesPattern_AppendData" "', argument " "1"" of type '" "SharedTimeSeriesPattern *""'"); 
    }
    arg1 = reinterpret_cast< SharedTimeSeriesPattern * >(argp1);
    arg2 = static_cast< double >(REAL(time)[0]);
    arg3 = static_cast< float >(REAL(value)[0]);
    (arg1)->AppendData(arg2,arg3);
    r_ans = R_NilValue;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_SharedTimeSeriesPattern_GetValue ( SEXP self, SEXP time, SEXP s_swig_copy)
{
  {
    float result;
    SharedTimeSeriesPattern *arg1 = (SharedTimeSeriesPattern *) 0 ;
    double arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_SharedTimeSeriesPattern, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SharedTimeSeriesPattern_GetValue" "', argument " "1"" of type '" "SharedTimeSeriesPattern *""'"); 
    }
    arg1 = reinterpret_cast< SharedTimeSeriesPattern * >(argp1);
    arg2 = static_cast< double >(REAL(time)[0]);
    result = (float)(arg1)->GetValue(arg2);
    r_ans = SWIG_From_float(static_cast< float >(result));
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_SharedTimeSeriesPattern_GetAvgValue ( SEXP self, SEXP time1, SEXP time2, SEXP s_swig_copy)
{
  {
    float result;
    SharedTimeSeriesPattern *arg1 = (SharedTimeSeriesPattern *) 0 ;
    double arg2 ;
    double arg3 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_SharedTimeSeriesPattern, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SharedTimeSeriesPattern_GetAvgValue" "', argument " "1"" of type '" "SharedTimeSeriesPattern *""'"); 
    }
    arg1 = reinterpret_cast< SharedTimeSeriesPattern * >(argp1);
    arg2 = static_cast< double >(REAL(time1)[0]);
    arg3 = static_cast< double >(REAL(time2)[0]);
    result = (float)(arg1)->GetAvgValue(arg2,arg3);
    r_ans = SWIG_From_float(static_cast< float >(result));
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_SharedTimeSeriesPattern_GetTimeSeries ( SEXP self, SEXP s_swig_copy)
{
  {
    std::vector< Pair< double,double >,std::allocator< Pair< double,double > > > result;
    SharedTimeSeriesPattern *arg1 = (SharedTimeSeriesPattern *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_SharedTimeSeriesPattern, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SharedTimeSeriesPattern_GetTimeSeries" "', argument " "1"" of type '" "SharedTimeSeriesPattern *""'"); 
    }
    arg1 = reinterpret_cast< SharedTimeSeriesPattern * >(argp1);
    result = (arg1)->GetTimeSeries();
    r_ans = SWIG_R_NewPointerObj((new std::vector< Pair< double,double >,std::allocator< Pair< double,double > > >(result)), SWIGTYPE_p_std__vectorT_PairT_double_double_t_std__allocatorT_PairT_double_double_t_t_t, SWIG_POINTER_OWN |  0 );
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_SharedTimeSeriesPattern_GetMinTime ( SEXP self, SEXP s_swig_copy)
{
  {
    double result;
    SharedTimeSeriesPattern *arg1 = (SharedTimeSeriesPattern *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_SharedTimeSeriesPattern, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SharedTimeSeriesPattern_GetMinTime" "', argument " "1"" of type '" "SharedTimeSeriesPattern *""'"); 
    }
    arg1 = reinterpret_cast< SharedTimeSeriesPattern * >(argp1);
    result = (double)(arg1)->GetMinTime();
    r_ans = SWIG_From_double(static_cast< double >(result));
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_SharedTimeSeriesPattern_GetMaxTime ( SEXP self, SEXP s_swig_copy)
{
  {
    double result;
    SharedTimeSeriesPattern *arg1 = (SharedTimeSeriesPattern *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_SharedTimeSeriesPattern, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SharedTimeSeriesPattern_GetMaxTime" "', argument " "1"" of type '" "SharedTimeSeriesPattern *""'"); 
    }
    arg1 = reinterpret_cast< SharedTimeSeriesPattern * >(argp1);
    result = (double)(arg1)->GetMaxTime();
    r_ans = SWIG_From_double(static_cast< double >(result));
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_SharedTimeSeriesPattern_GetNumValues ( SEXP self, SEXP s_swig_copy)
{
  {
    int result;
    SharedTimeSeriesPattern *arg1 = (SharedTimeSeriesPattern *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_SharedTimeSeriesPattern, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SharedTimeSeriesPattern_GetNumValues" "', argument " "1"" of type '" "SharedTimeSeriesPattern *""'"); 
    }
    arg1 = reinterpret_cast< SharedTimeSeriesPattern * >(argp1);
    result = (int)(arg1)->GetNumValues();
    r_ans = Rf_ScalarInteger(result);
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_SharedTimeSeriesPattern_GetInterpolationType ( SEXP self, SEXP s_swig_copy)
{
  {
    uwp_patternInterpType result;
    SharedTimeSeriesPattern *arg1 = (SharedTimeSeriesPattern *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_SharedTimeSeriesPattern, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SharedTimeSeriesPattern_GetInterpolationType" "', argument " "1"" of type '" "SharedTimeSeriesPattern *""'"); 
    }
    arg1 = reinterpret_cast< SharedTimeSeriesPattern * >(argp1);
    result = (uwp_patternInterpType)(arg1)->GetInterpolationType();
    r_ans = SWIG_From_int(static_cast< int >(result));
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_SharedTimeSeriesPattern_X_Units ( SEXP self, SEXP s_swig_copy)
{
  {
    std::string result;
    SharedTimeSeriesPattern *arg1 = (SharedTimeSeriesPattern *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_SharedTimeSeriesPattern, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SharedTimeSeriesPattern_X_Units" "', argument " "1"" of type '" "SharedTimeSeriesPattern *""'"); 
    }
    arg1 = reinterpret_cast< SharedTimeSeriesPattern * >(argp1);
    result = (arg1)->X_Units();
    r_ans = SWIG_From_std_string(static_cast< std::string >(result));
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_SharedTimeSeriesPattern_Y_Units ( SEXP self, SEXP s_swig_copy)
{
  {
    std::string result;
    SharedTimeSeriesPattern *arg1 = (SharedTimeSeriesPattern *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_SharedTimeSeriesPattern, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SharedTimeSeriesPattern_Y_Units" "', argument " "1"" of type '" "SharedTimeSeriesPattern *""'"); 
    }
    arg1 = reinterpret_cast< SharedTimeSeriesPattern * >(argp1);
    result = (arg1)->Y_Units();
    r_ans = SWIG_From_std_string(static_cast< std::string >(result));
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_SharedTimeSeriesPattern_Index ( SEXP self, SEXP s_swig_copy)
{
  {
    int result;
    SharedTimeSeriesPattern *arg1 = (SharedTimeSeriesPattern *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_SharedTimeSeriesPattern, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SharedTimeSeriesPattern_Index" "', argument " "1"" of type '" "SharedTimeSeriesPattern *""'"); 
    }
    arg1 = reinterpret_cast< SharedTimeSeriesPattern * >(argp1);
    result = (int)(arg1)->Index();
    r_ans = Rf_ScalarInteger(result);
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_new_SharedString__SWIG_0 ( )
{
  {
    SharedString *result = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    result = (SharedString *)new SharedString();
    r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_SharedString, SWIG_POINTER_OWN |  0 );
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_new_SharedString__SWIG_1 ( SEXP index, SEXP deleteDataWhenScopeEnds)
{
  {
    SharedString *result = 0 ;
    int arg1 ;
    bool arg2 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    arg1 = static_cast< int >(INTEGER(index)[0]);
    arg2 = LOGICAL(deleteDataWhenScopeEnds)[0] ? true : false;
    result = (SharedString *)new SharedString(arg1,arg2);
    r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_SharedString, SWIG_POINTER_OWN |  0 );
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_new_SharedString__SWIG_2 ( SEXP index)
{
  {
    SharedString *result = 0 ;
    int arg1 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    arg1 = static_cast< int >(INTEGER(index)[0]);
    result = (SharedString *)new SharedString(arg1);
    r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_SharedString, SWIG_POINTER_OWN |  0 );
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_delete_SharedString ( SEXP self)
{
  {
    SharedString *arg1 = (SharedString *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_SharedString, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SharedString" "', argument " "1"" of type '" "SharedString *""'"); 
    }
    arg1 = reinterpret_cast< SharedString * >(argp1);
    delete arg1;
    r_ans = R_NilValue;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    R_ClearExternalPtr(self);
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_SharedString_Set ( SEXP self, SEXP v)
{
  {
    SharedString *arg1 = (SharedString *) 0 ;
    std::string arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_SharedString, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SharedString_Set" "', argument " "1"" of type '" "SharedString *""'"); 
    }
    arg1 = reinterpret_cast< SharedString * >(argp1);
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string(v, &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "SharedString_Set" "', argument " "2"" of type '" "std::string""'"); 
      }
      arg2 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    (arg1)->Set(arg2);
    r_ans = R_NilValue;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_SharedString_Get ( SEXP self, SEXP s_swig_copy)
{
  {
    std::string result;
    SharedString *arg1 = (SharedString *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_SharedString, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SharedString_Get" "', argument " "1"" of type '" "SharedString *""'"); 
    }
    arg1 = reinterpret_cast< SharedString * >(argp1);
    result = (arg1)->Get();
    r_ans = SWIG_From_std_string(static_cast< std::string >(result));
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_SharedString_Index ( SEXP self, SEXP s_swig_copy)
{
  {
    int result;
    SharedString *arg1 = (SharedString *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_SharedString, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SharedString_Index" "', argument " "1"" of type '" "SharedString *""'"); 
    }
    arg1 = reinterpret_cast< SharedString * >(argp1);
    result = (int)(arg1)->Index();
    r_ans = Rf_ScalarInteger(result);
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_new_WaterWatchEnums ( )
{
  {
    WaterWatchEnums *result = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    result = (WaterWatchEnums *)new WaterWatchEnums();
    r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_WaterWatchEnums, SWIG_POINTER_OWN |  0 );
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_delete_WaterWatchEnums ( SEXP self)
{
  {
    WaterWatchEnums *arg1 = (WaterWatchEnums *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_WaterWatchEnums, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_WaterWatchEnums" "', argument " "1"" of type '" "WaterWatchEnums *""'"); 
    }
    arg1 = reinterpret_cast< WaterWatchEnums * >(argp1);
    delete arg1;
    r_ans = R_NilValue;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    R_ClearExternalPtr(self);
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_WaterWatchEnums_Id_get ( SEXP s_swig_copy)
{
  {
    WaterWatchEnums::ScriptNodeType result;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    result = (WaterWatchEnums::ScriptNodeType)WaterWatchEnums::Id;
    r_ans = SWIG_From_int(static_cast< int >(result));
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_WaterWatchEnums_Fun_Call_get ( SEXP s_swig_copy)
{
  {
    WaterWatchEnums::ScriptNodeType result;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    result = (WaterWatchEnums::ScriptNodeType)WaterWatchEnums::Fun_Call;
    r_ans = SWIG_From_int(static_cast< int >(result));
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_WaterWatchEnums_Unused_Return_Fun_Call_get ( SEXP s_swig_copy)
{
  {
    WaterWatchEnums::ScriptNodeType result;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    result = (WaterWatchEnums::ScriptNodeType)WaterWatchEnums::Unused_Return_Fun_Call;
    r_ans = SWIG_From_int(static_cast< int >(result));
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_WaterWatchEnums_Arg_List_get ( SEXP s_swig_copy)
{
  {
    WaterWatchEnums::ScriptNodeType result;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    result = (WaterWatchEnums::ScriptNodeType)WaterWatchEnums::Arg_List;
    r_ans = SWIG_From_int(static_cast< int >(result));
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_WaterWatchEnums_Equation_get ( SEXP s_swig_copy)
{
  {
    WaterWatchEnums::ScriptNodeType result;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    result = (WaterWatchEnums::ScriptNodeType)WaterWatchEnums::Equation;
    r_ans = SWIG_From_int(static_cast< int >(result));
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_WaterWatchEnums_Var_Decl_get ( SEXP s_swig_copy)
{
  {
    WaterWatchEnums::ScriptNodeType result;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    result = (WaterWatchEnums::ScriptNodeType)WaterWatchEnums::Var_Decl;
    r_ans = SWIG_From_int(static_cast< int >(result));
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_WaterWatchEnums_Assign_Decl_get ( SEXP s_swig_copy)
{
  {
    WaterWatchEnums::ScriptNodeType result;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    result = (WaterWatchEnums::ScriptNodeType)WaterWatchEnums::Assign_Decl;
    r_ans = SWIG_From_int(static_cast< int >(result));
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_WaterWatchEnums_Array_Call_get ( SEXP s_swig_copy)
{
  {
    WaterWatchEnums::ScriptNodeType result;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    result = (WaterWatchEnums::ScriptNodeType)WaterWatchEnums::Array_Call;
    r_ans = SWIG_From_int(static_cast< int >(result));
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_WaterWatchEnums_Dot_Access_get ( SEXP s_swig_copy)
{
  {
    WaterWatchEnums::ScriptNodeType result;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    result = (WaterWatchEnums::ScriptNodeType)WaterWatchEnums::Dot_Access;
    r_ans = SWIG_From_int(static_cast< int >(result));
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_WaterWatchEnums_Lambda_get ( SEXP s_swig_copy)
{
  {
    WaterWatchEnums::ScriptNodeType result;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    result = (WaterWatchEnums::ScriptNodeType)WaterWatchEnums::Lambda;
    r_ans = SWIG_From_int(static_cast< int >(result));
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_WaterWatchEnums_Block_get ( SEXP s_swig_copy)
{
  {
    WaterWatchEnums::ScriptNodeType result;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    result = (WaterWatchEnums::ScriptNodeType)WaterWatchEnums::Block;
    r_ans = SWIG_From_int(static_cast< int >(result));
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_WaterWatchEnums_Scopeless_Block_get ( SEXP s_swig_copy)
{
  {
    WaterWatchEnums::ScriptNodeType result;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    result = (WaterWatchEnums::ScriptNodeType)WaterWatchEnums::Scopeless_Block;
    r_ans = SWIG_From_int(static_cast< int >(result));
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_WaterWatchEnums_Def_get ( SEXP s_swig_copy)
{
  {
    WaterWatchEnums::ScriptNodeType result;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    result = (WaterWatchEnums::ScriptNodeType)WaterWatchEnums::Def;
    r_ans = SWIG_From_int(static_cast< int >(result));
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_WaterWatchEnums_While_get ( SEXP s_swig_copy)
{
  {
    WaterWatchEnums::ScriptNodeType result;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    result = (WaterWatchEnums::ScriptNodeType)WaterWatchEnums::While;
    r_ans = SWIG_From_int(static_cast< int >(result));
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_WaterWatchEnums_If_get ( SEXP s_swig_copy)
{
  {
    WaterWatchEnums::ScriptNodeType result;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    result = (WaterWatchEnums::ScriptNodeType)WaterWatchEnums::If;
    r_ans = SWIG_From_int(static_cast< int >(result));
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_WaterWatchEnums_For_get ( SEXP s_swig_copy)
{
  {
    WaterWatchEnums::ScriptNodeType result;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    result = (WaterWatchEnums::ScriptNodeType)WaterWatchEnums::For;
    r_ans = SWIG_From_int(static_cast< int >(result));
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_WaterWatchEnums_Ranged_For_get ( SEXP s_swig_copy)
{
  {
    WaterWatchEnums::ScriptNodeType result;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    result = (WaterWatchEnums::ScriptNodeType)WaterWatchEnums::Ranged_For;
    r_ans = SWIG_From_int(static_cast< int >(result));
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_WaterWatchEnums_Inline_Array_get ( SEXP s_swig_copy)
{
  {
    WaterWatchEnums::ScriptNodeType result;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    result = (WaterWatchEnums::ScriptNodeType)WaterWatchEnums::Inline_Array;
    r_ans = SWIG_From_int(static_cast< int >(result));
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_WaterWatchEnums_Inline_Map_get ( SEXP s_swig_copy)
{
  {
    WaterWatchEnums::ScriptNodeType result;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    result = (WaterWatchEnums::ScriptNodeType)WaterWatchEnums::Inline_Map;
    r_ans = SWIG_From_int(static_cast< int >(result));
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_WaterWatchEnums_Return_get ( SEXP s_swig_copy)
{
  {
    WaterWatchEnums::ScriptNodeType result;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    result = (WaterWatchEnums::ScriptNodeType)WaterWatchEnums::Return;
    r_ans = SWIG_From_int(static_cast< int >(result));
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_WaterWatchEnums_File_get ( SEXP s_swig_copy)
{
  {
    WaterWatchEnums::ScriptNodeType result;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    result = (WaterWatchEnums::ScriptNodeType)WaterWatchEnums::File;
    r_ans = SWIG_From_int(static_cast< int >(result));
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_WaterWatchEnums_Prefix_get ( SEXP s_swig_copy)
{
  {
    WaterWatchEnums::ScriptNodeType result;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    result = (WaterWatchEnums::ScriptNodeType)WaterWatchEnums::Prefix;
    r_ans = SWIG_From_int(static_cast< int >(result));
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_WaterWatchEnums_Break_get ( SEXP s_swig_copy)
{
  {
    WaterWatchEnums::ScriptNodeType result;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    result = (WaterWatchEnums::ScriptNodeType)WaterWatchEnums::Break;
    r_ans = SWIG_From_int(static_cast< int >(result));
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_WaterWatchEnums_Continue_get ( SEXP s_swig_copy)
{
  {
    WaterWatchEnums::ScriptNodeType result;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    result = (WaterWatchEnums::ScriptNodeType)WaterWatchEnums::Continue;
    r_ans = SWIG_From_int(static_cast< int >(result));
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_WaterWatchEnums_Map_Pair_get ( SEXP s_swig_copy)
{
  {
    WaterWatchEnums::ScriptNodeType result;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    result = (WaterWatchEnums::ScriptNodeType)WaterWatchEnums::Map_Pair;
    r_ans = SWIG_From_int(static_cast< int >(result));
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_WaterWatchEnums_Value_Range_get ( SEXP s_swig_copy)
{
  {
    WaterWatchEnums::ScriptNodeType result;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    result = (WaterWatchEnums::ScriptNodeType)WaterWatchEnums::Value_Range;
    r_ans = SWIG_From_int(static_cast< int >(result));
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_WaterWatchEnums_Inline_Range_get ( SEXP s_swig_copy)
{
  {
    WaterWatchEnums::ScriptNodeType result;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    result = (WaterWatchEnums::ScriptNodeType)WaterWatchEnums::Inline_Range;
    r_ans = SWIG_From_int(static_cast< int >(result));
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_WaterWatchEnums_Do_get ( SEXP s_swig_copy)
{
  {
    WaterWatchEnums::ScriptNodeType result;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    result = (WaterWatchEnums::ScriptNodeType)WaterWatchEnums::Do;
    r_ans = SWIG_From_int(static_cast< int >(result));
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_WaterWatchEnums_Try_get ( SEXP s_swig_copy)
{
  {
    WaterWatchEnums::ScriptNodeType result;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    result = (WaterWatchEnums::ScriptNodeType)WaterWatchEnums::Try;
    r_ans = SWIG_From_int(static_cast< int >(result));
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_WaterWatchEnums_Catch_get ( SEXP s_swig_copy)
{
  {
    WaterWatchEnums::ScriptNodeType result;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    result = (WaterWatchEnums::ScriptNodeType)WaterWatchEnums::Catch;
    r_ans = SWIG_From_int(static_cast< int >(result));
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_WaterWatchEnums_Finally_get ( SEXP s_swig_copy)
{
  {
    WaterWatchEnums::ScriptNodeType result;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    result = (WaterWatchEnums::ScriptNodeType)WaterWatchEnums::Finally;
    r_ans = SWIG_From_int(static_cast< int >(result));
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_WaterWatchEnums_Method_get ( SEXP s_swig_copy)
{
  {
    WaterWatchEnums::ScriptNodeType result;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    result = (WaterWatchEnums::ScriptNodeType)WaterWatchEnums::Method;
    r_ans = SWIG_From_int(static_cast< int >(result));
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_WaterWatchEnums_Attr_Decl_get ( SEXP s_swig_copy)
{
  {
    WaterWatchEnums::ScriptNodeType result;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    result = (WaterWatchEnums::ScriptNodeType)WaterWatchEnums::Attr_Decl;
    r_ans = SWIG_From_int(static_cast< int >(result));
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_WaterWatchEnums_Logical_And_get ( SEXP s_swig_copy)
{
  {
    WaterWatchEnums::ScriptNodeType result;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    result = (WaterWatchEnums::ScriptNodeType)WaterWatchEnums::Logical_And;
    r_ans = SWIG_From_int(static_cast< int >(result));
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_WaterWatchEnums_Logical_Or_get ( SEXP s_swig_copy)
{
  {
    WaterWatchEnums::ScriptNodeType result;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    result = (WaterWatchEnums::ScriptNodeType)WaterWatchEnums::Logical_Or;
    r_ans = SWIG_From_int(static_cast< int >(result));
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_WaterWatchEnums_Reference_get ( SEXP s_swig_copy)
{
  {
    WaterWatchEnums::ScriptNodeType result;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    result = (WaterWatchEnums::ScriptNodeType)WaterWatchEnums::Reference;
    r_ans = SWIG_From_int(static_cast< int >(result));
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_WaterWatchEnums_Switch_get ( SEXP s_swig_copy)
{
  {
    WaterWatchEnums::ScriptNodeType result;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    result = (WaterWatchEnums::ScriptNodeType)WaterWatchEnums::Switch;
    r_ans = SWIG_From_int(static_cast< int >(result));
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_WaterWatchEnums_Case_get ( SEXP s_swig_copy)
{
  {
    WaterWatchEnums::ScriptNodeType result;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    result = (WaterWatchEnums::ScriptNodeType)WaterWatchEnums::Case;
    r_ans = SWIG_From_int(static_cast< int >(result));
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_WaterWatchEnums_Default_get ( SEXP s_swig_copy)
{
  {
    WaterWatchEnums::ScriptNodeType result;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    result = (WaterWatchEnums::ScriptNodeType)WaterWatchEnums::Default;
    r_ans = SWIG_From_int(static_cast< int >(result));
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_WaterWatchEnums_Noop_get ( SEXP s_swig_copy)
{
  {
    WaterWatchEnums::ScriptNodeType result;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    result = (WaterWatchEnums::ScriptNodeType)WaterWatchEnums::Noop;
    r_ans = SWIG_From_int(static_cast< int >(result));
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_WaterWatchEnums_Class_get ( SEXP s_swig_copy)
{
  {
    WaterWatchEnums::ScriptNodeType result;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    result = (WaterWatchEnums::ScriptNodeType)WaterWatchEnums::Class;
    r_ans = SWIG_From_int(static_cast< int >(result));
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_WaterWatchEnums_Binary_get ( SEXP s_swig_copy)
{
  {
    WaterWatchEnums::ScriptNodeType result;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    result = (WaterWatchEnums::ScriptNodeType)WaterWatchEnums::Binary;
    r_ans = SWIG_From_int(static_cast< int >(result));
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_WaterWatchEnums_Arg_get ( SEXP s_swig_copy)
{
  {
    WaterWatchEnums::ScriptNodeType result;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    result = (WaterWatchEnums::ScriptNodeType)WaterWatchEnums::Arg;
    r_ans = SWIG_From_int(static_cast< int >(result));
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_WaterWatchEnums_Global_Decl_get ( SEXP s_swig_copy)
{
  {
    WaterWatchEnums::ScriptNodeType result;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    result = (WaterWatchEnums::ScriptNodeType)WaterWatchEnums::Global_Decl;
    r_ans = SWIG_From_int(static_cast< int >(result));
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_WaterWatchEnums_Constant_get ( SEXP s_swig_copy)
{
  {
    WaterWatchEnums::ScriptNodeType result;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    result = (WaterWatchEnums::ScriptNodeType)WaterWatchEnums::Constant;
    r_ans = SWIG_From_int(static_cast< int >(result));
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_WaterWatchEnums_Compiled_get ( SEXP s_swig_copy)
{
  {
    WaterWatchEnums::ScriptNodeType result;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    result = (WaterWatchEnums::ScriptNodeType)WaterWatchEnums::Compiled;
    r_ans = SWIG_From_int(static_cast< int >(result));
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_WaterWatchEnums_ControlBlock_get ( SEXP s_swig_copy)
{
  {
    WaterWatchEnums::ScriptNodeType result;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    result = (WaterWatchEnums::ScriptNodeType)WaterWatchEnums::ControlBlock;
    r_ans = SWIG_From_int(static_cast< int >(result));
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_WaterWatchEnums_Postfix_get ( SEXP s_swig_copy)
{
  {
    WaterWatchEnums::ScriptNodeType result;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    result = (WaterWatchEnums::ScriptNodeType)WaterWatchEnums::Postfix;
    r_ans = SWIG_From_int(static_cast< int >(result));
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_WaterWatchEnums_Assign_Retroactively_get ( SEXP s_swig_copy)
{
  {
    WaterWatchEnums::ScriptNodeType result;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    result = (WaterWatchEnums::ScriptNodeType)WaterWatchEnums::Assign_Retroactively;
    r_ans = SWIG_From_int(static_cast< int >(result));
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_WaterWatchEnums_Error_get ( SEXP s_swig_copy)
{
  {
    WaterWatchEnums::ScriptNodeType result;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    result = (WaterWatchEnums::ScriptNodeType)WaterWatchEnums::Error;
    r_ans = SWIG_From_int(static_cast< int >(result));
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_new_ScriptingNode ( )
{
  {
    ScriptingNode *result = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    result = (ScriptingNode *)new ScriptingNode();
    r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ScriptingNode, SWIG_POINTER_OWN |  0 );
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_delete_ScriptingNode ( SEXP self)
{
  {
    ScriptingNode *arg1 = (ScriptingNode *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_ScriptingNode, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ScriptingNode" "', argument " "1"" of type '" "ScriptingNode *""'"); 
    }
    arg1 = reinterpret_cast< ScriptingNode * >(argp1);
    delete arg1;
    r_ans = R_NilValue;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    R_ClearExternalPtr(self);
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_ScriptingNode_text_get ( SEXP self, SEXP s_swig_copy)
{
  {
    std::string result;
    ScriptingNode *arg1 = (ScriptingNode *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_ScriptingNode, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScriptingNode_text_get" "', argument " "1"" of type '" "ScriptingNode const *""'"); 
    }
    arg1 = reinterpret_cast< ScriptingNode * >(argp1);
    result = ((ScriptingNode const *)arg1)->text_get();
    r_ans = SWIG_From_std_string(static_cast< std::string >(result));
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_ScriptingNode_startLine_get ( SEXP self, SEXP s_swig_copy)
{
  {
    int result;
    ScriptingNode *arg1 = (ScriptingNode *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_ScriptingNode, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScriptingNode_startLine_get" "', argument " "1"" of type '" "ScriptingNode const *""'"); 
    }
    arg1 = reinterpret_cast< ScriptingNode * >(argp1);
    result = (int)((ScriptingNode const *)arg1)->startLine_get();
    r_ans = Rf_ScalarInteger(result);
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_ScriptingNode_startColumn_get ( SEXP self, SEXP s_swig_copy)
{
  {
    int result;
    ScriptingNode *arg1 = (ScriptingNode *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_ScriptingNode, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScriptingNode_startColumn_get" "', argument " "1"" of type '" "ScriptingNode const *""'"); 
    }
    arg1 = reinterpret_cast< ScriptingNode * >(argp1);
    result = (int)((ScriptingNode const *)arg1)->startColumn_get();
    r_ans = Rf_ScalarInteger(result);
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_ScriptingNode_endLine_get ( SEXP self, SEXP s_swig_copy)
{
  {
    int result;
    ScriptingNode *arg1 = (ScriptingNode *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_ScriptingNode, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScriptingNode_endLine_get" "', argument " "1"" of type '" "ScriptingNode const *""'"); 
    }
    arg1 = reinterpret_cast< ScriptingNode * >(argp1);
    result = (int)((ScriptingNode const *)arg1)->endLine_get();
    r_ans = Rf_ScalarInteger(result);
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_ScriptingNode_endColumn_get ( SEXP self, SEXP s_swig_copy)
{
  {
    int result;
    ScriptingNode *arg1 = (ScriptingNode *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_ScriptingNode, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScriptingNode_endColumn_get" "', argument " "1"" of type '" "ScriptingNode const *""'"); 
    }
    arg1 = reinterpret_cast< ScriptingNode * >(argp1);
    result = (int)((ScriptingNode const *)arg1)->endColumn_get();
    r_ans = Rf_ScalarInteger(result);
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_ScriptingNode_type_get ( SEXP self, SEXP s_swig_copy)
{
  {
    WaterWatchEnums::ScriptNodeType result;
    ScriptingNode *arg1 = (ScriptingNode *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_ScriptingNode, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScriptingNode_type_get" "', argument " "1"" of type '" "ScriptingNode const *""'"); 
    }
    arg1 = reinterpret_cast< ScriptingNode * >(argp1);
    result = (WaterWatchEnums::ScriptNodeType)((ScriptingNode const *)arg1)->type_get();
    r_ans = SWIG_From_int(static_cast< int >(result));
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_ScriptingNode_typeHint_get ( SEXP self, SEXP s_swig_copy)
{
  {
    std::string result;
    ScriptingNode *arg1 = (ScriptingNode *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_ScriptingNode, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScriptingNode_typeHint_get" "', argument " "1"" of type '" "ScriptingNode const *""'"); 
    }
    arg1 = reinterpret_cast< ScriptingNode * >(argp1);
    result = ((ScriptingNode const *)arg1)->typeHint_get();
    r_ans = SWIG_From_std_string(static_cast< std::string >(result));
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_ScriptingNode_depth_get ( SEXP self, SEXP s_swig_copy)
{
  {
    int result;
    ScriptingNode *arg1 = (ScriptingNode *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_ScriptingNode, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScriptingNode_depth_get" "', argument " "1"" of type '" "ScriptingNode const *""'"); 
    }
    arg1 = reinterpret_cast< ScriptingNode * >(argp1);
    result = (int)((ScriptingNode const *)arg1)->depth_get();
    r_ans = Rf_ScalarInteger(result);
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_ScriptingNode_text_set ( SEXP self, SEXP s)
{
  {
    ScriptingNode *arg1 = (ScriptingNode *) 0 ;
    std::string arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_ScriptingNode, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScriptingNode_text_set" "', argument " "1"" of type '" "ScriptingNode *""'"); 
    }
    arg1 = reinterpret_cast< ScriptingNode * >(argp1);
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string(s, &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "ScriptingNode_text_set" "', argument " "2"" of type '" "std::string""'"); 
      }
      arg2 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    (arg1)->text_set(arg2);
    r_ans = R_NilValue;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_ScriptingNode_startLine_set ( SEXP self, SEXP s)
{
  {
    ScriptingNode *arg1 = (ScriptingNode *) 0 ;
    int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_ScriptingNode, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScriptingNode_startLine_set" "', argument " "1"" of type '" "ScriptingNode *""'"); 
    }
    arg1 = reinterpret_cast< ScriptingNode * >(argp1);
    arg2 = static_cast< int >(INTEGER(s)[0]);
    (arg1)->startLine_set(arg2);
    r_ans = R_NilValue;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_ScriptingNode_startColumn_set ( SEXP self, SEXP s)
{
  {
    ScriptingNode *arg1 = (ScriptingNode *) 0 ;
    int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_ScriptingNode, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScriptingNode_startColumn_set" "', argument " "1"" of type '" "ScriptingNode *""'"); 
    }
    arg1 = reinterpret_cast< ScriptingNode * >(argp1);
    arg2 = static_cast< int >(INTEGER(s)[0]);
    (arg1)->startColumn_set(arg2);
    r_ans = R_NilValue;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_ScriptingNode_endLine_set ( SEXP self, SEXP s)
{
  {
    ScriptingNode *arg1 = (ScriptingNode *) 0 ;
    int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_ScriptingNode, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScriptingNode_endLine_set" "', argument " "1"" of type '" "ScriptingNode *""'"); 
    }
    arg1 = reinterpret_cast< ScriptingNode * >(argp1);
    arg2 = static_cast< int >(INTEGER(s)[0]);
    (arg1)->endLine_set(arg2);
    r_ans = R_NilValue;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_ScriptingNode_endColumn_set ( SEXP self, SEXP s)
{
  {
    ScriptingNode *arg1 = (ScriptingNode *) 0 ;
    int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_ScriptingNode, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScriptingNode_endColumn_set" "', argument " "1"" of type '" "ScriptingNode *""'"); 
    }
    arg1 = reinterpret_cast< ScriptingNode * >(argp1);
    arg2 = static_cast< int >(INTEGER(s)[0]);
    (arg1)->endColumn_set(arg2);
    r_ans = R_NilValue;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_ScriptingNode_type_set ( SEXP self, SEXP s)
{
  {
    ScriptingNode *arg1 = (ScriptingNode *) 0 ;
    WaterWatchEnums::ScriptNodeType arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_ScriptingNode, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScriptingNode_type_set" "', argument " "1"" of type '" "ScriptingNode *""'"); 
    }
    arg1 = reinterpret_cast< ScriptingNode * >(argp1);
    ecode2 = SWIG_AsVal_int(s, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ScriptingNode_type_set" "', argument " "2"" of type '" "WaterWatchEnums::ScriptNodeType""'");
    } 
    arg2 = static_cast< WaterWatchEnums::ScriptNodeType >(val2);
    (arg1)->type_set(arg2);
    r_ans = R_NilValue;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_ScriptingNode_typeHint_set ( SEXP self, SEXP s)
{
  {
    ScriptingNode *arg1 = (ScriptingNode *) 0 ;
    std::string arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_ScriptingNode, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScriptingNode_typeHint_set" "', argument " "1"" of type '" "ScriptingNode *""'"); 
    }
    arg1 = reinterpret_cast< ScriptingNode * >(argp1);
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string(s, &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "ScriptingNode_typeHint_set" "', argument " "2"" of type '" "std::string""'"); 
      }
      arg2 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    (arg1)->typeHint_set(arg2);
    r_ans = R_NilValue;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_ScriptingNode_depth_set ( SEXP self, SEXP s)
{
  {
    ScriptingNode *arg1 = (ScriptingNode *) 0 ;
    int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_ScriptingNode, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScriptingNode_depth_set" "', argument " "1"" of type '" "ScriptingNode *""'"); 
    }
    arg1 = reinterpret_cast< ScriptingNode * >(argp1);
    arg2 = static_cast< int >(INTEGER(s)[0]);
    (arg1)->depth_set(arg2);
    r_ans = R_NilValue;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_new_Color_Interop__SWIG_0 ( )
{
  {
    Color_Interop *result = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    result = (Color_Interop *)new Color_Interop();
    r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Color_Interop, SWIG_POINTER_OWN |  0 );
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_new_Color_Interop__SWIG_1 ( SEXP a)
{
  {
    Color_Interop *result = 0 ;
    Color_Interop *arg1 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(a, &argp1, SWIGTYPE_p_Color_Interop,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Color_Interop" "', argument " "1"" of type '" "Color_Interop const &""'"); 
    }
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Color_Interop" "', argument " "1"" of type '" "Color_Interop const &""'"); 
    }
    arg1 = reinterpret_cast< Color_Interop * >(argp1);
    result = (Color_Interop *)new Color_Interop((Color_Interop const &)*arg1);
    r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Color_Interop, SWIG_POINTER_OWN |  0 );
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_new_Color_Interop__SWIG_2 ( SEXP s_R, SEXP s_G, SEXP s_B, SEXP s_A)
{
  {
    Color_Interop *result = 0 ;
    double arg1 ;
    double arg2 ;
    double arg3 ;
    double arg4 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    arg1 = static_cast< double >(REAL(s_R)[0]);
    arg2 = static_cast< double >(REAL(s_G)[0]);
    arg3 = static_cast< double >(REAL(s_B)[0]);
    arg4 = static_cast< double >(REAL(s_A)[0]);
    result = (Color_Interop *)new Color_Interop(arg1,arg2,arg3,arg4);
    r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Color_Interop, SWIG_POINTER_OWN |  0 );
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_Color_Interop_R_set ( SEXP self, SEXP s_R)
{
  {
    Color_Interop *arg1 = (Color_Interop *) 0 ;
    double arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_Color_Interop, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Color_Interop_R_set" "', argument " "1"" of type '" "Color_Interop *""'"); 
    }
    arg1 = reinterpret_cast< Color_Interop * >(argp1);
    arg2 = static_cast< double >(REAL(s_R)[0]);
    if (arg1) (arg1)->R = arg2;
    r_ans = R_NilValue;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_Color_Interop_R_get ( SEXP self, SEXP s_swig_copy)
{
  {
    double result;
    Color_Interop *arg1 = (Color_Interop *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_Color_Interop, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Color_Interop_R_get" "', argument " "1"" of type '" "Color_Interop *""'"); 
    }
    arg1 = reinterpret_cast< Color_Interop * >(argp1);
    result = (double) ((arg1)->R);
    r_ans = SWIG_From_double(static_cast< double >(result));
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_Color_Interop_G_set ( SEXP self, SEXP s_G)
{
  {
    Color_Interop *arg1 = (Color_Interop *) 0 ;
    double arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_Color_Interop, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Color_Interop_G_set" "', argument " "1"" of type '" "Color_Interop *""'"); 
    }
    arg1 = reinterpret_cast< Color_Interop * >(argp1);
    arg2 = static_cast< double >(REAL(s_G)[0]);
    if (arg1) (arg1)->G = arg2;
    r_ans = R_NilValue;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_Color_Interop_G_get ( SEXP self, SEXP s_swig_copy)
{
  {
    double result;
    Color_Interop *arg1 = (Color_Interop *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_Color_Interop, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Color_Interop_G_get" "', argument " "1"" of type '" "Color_Interop *""'"); 
    }
    arg1 = reinterpret_cast< Color_Interop * >(argp1);
    result = (double) ((arg1)->G);
    r_ans = SWIG_From_double(static_cast< double >(result));
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_Color_Interop_B_set ( SEXP self, SEXP s_B)
{
  {
    Color_Interop *arg1 = (Color_Interop *) 0 ;
    double arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_Color_Interop, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Color_Interop_B_set" "', argument " "1"" of type '" "Color_Interop *""'"); 
    }
    arg1 = reinterpret_cast< Color_Interop * >(argp1);
    arg2 = static_cast< double >(REAL(s_B)[0]);
    if (arg1) (arg1)->B = arg2;
    r_ans = R_NilValue;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_Color_Interop_B_get ( SEXP self, SEXP s_swig_copy)
{
  {
    double result;
    Color_Interop *arg1 = (Color_Interop *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_Color_Interop, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Color_Interop_B_get" "', argument " "1"" of type '" "Color_Interop *""'"); 
    }
    arg1 = reinterpret_cast< Color_Interop * >(argp1);
    result = (double) ((arg1)->B);
    r_ans = SWIG_From_double(static_cast< double >(result));
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_Color_Interop_A_set ( SEXP self, SEXP s_A)
{
  {
    Color_Interop *arg1 = (Color_Interop *) 0 ;
    double arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_Color_Interop, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Color_Interop_A_set" "', argument " "1"" of type '" "Color_Interop *""'"); 
    }
    arg1 = reinterpret_cast< Color_Interop * >(argp1);
    arg2 = static_cast< double >(REAL(s_A)[0]);
    if (arg1) (arg1)->A = arg2;
    r_ans = R_NilValue;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_Color_Interop_A_get ( SEXP self, SEXP s_swig_copy)
{
  {
    double result;
    Color_Interop *arg1 = (Color_Interop *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_Color_Interop, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Color_Interop_A_get" "', argument " "1"" of type '" "Color_Interop *""'"); 
    }
    arg1 = reinterpret_cast< Color_Interop * >(argp1);
    result = (double) ((arg1)->A);
    r_ans = SWIG_From_double(static_cast< double >(result));
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_delete_Color_Interop ( SEXP self)
{
  {
    Color_Interop *arg1 = (Color_Interop *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_Color_Interop, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Color_Interop" "', argument " "1"" of type '" "Color_Interop *""'"); 
    }
    arg1 = reinterpret_cast< Color_Interop * >(argp1);
    delete arg1;
    r_ans = R_NilValue;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    R_ClearExternalPtr(self);
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_MapIcon_Interop_color_set ( SEXP self, SEXP s_color)
{
  {
    MapIcon_Interop *arg1 = (MapIcon_Interop *) 0 ;
    Color_Interop *arg2 = (Color_Interop *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_MapIcon_Interop, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MapIcon_Interop_color_set" "', argument " "1"" of type '" "MapIcon_Interop *""'"); 
    }
    arg1 = reinterpret_cast< MapIcon_Interop * >(argp1);
    res2 = SWIG_R_ConvertPtr(s_color, &argp2, SWIGTYPE_p_Color_Interop, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MapIcon_Interop_color_set" "', argument " "2"" of type '" "Color_Interop *""'"); 
    }
    arg2 = reinterpret_cast< Color_Interop * >(argp2);
    if (arg1) (arg1)->color = *arg2;
    r_ans = R_NilValue;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_MapIcon_Interop_color_get ( SEXP self)
{
  {
    Color_Interop *result = 0 ;
    MapIcon_Interop *arg1 = (MapIcon_Interop *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_MapIcon_Interop, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MapIcon_Interop_color_get" "', argument " "1"" of type '" "MapIcon_Interop *""'"); 
    }
    arg1 = reinterpret_cast< MapIcon_Interop * >(argp1);
    result = (Color_Interop *)& ((arg1)->color);
    r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Color_Interop, 0 |  0 );
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_MapIcon_Interop_size_set ( SEXP self, SEXP s_size)
{
  {
    MapIcon_Interop *arg1 = (MapIcon_Interop *) 0 ;
    double arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_MapIcon_Interop, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MapIcon_Interop_size_set" "', argument " "1"" of type '" "MapIcon_Interop *""'"); 
    }
    arg1 = reinterpret_cast< MapIcon_Interop * >(argp1);
    arg2 = static_cast< double >(REAL(s_size)[0]);
    if (arg1) (arg1)->size = arg2;
    r_ans = R_NilValue;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_MapIcon_Interop_size_get ( SEXP self, SEXP s_swig_copy)
{
  {
    double result;
    MapIcon_Interop *arg1 = (MapIcon_Interop *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_MapIcon_Interop, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MapIcon_Interop_size_get" "', argument " "1"" of type '" "MapIcon_Interop *""'"); 
    }
    arg1 = reinterpret_cast< MapIcon_Interop * >(argp1);
    result = (double) ((arg1)->size);
    r_ans = SWIG_From_double(static_cast< double >(result));
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_MapIcon_Interop_longitude_set ( SEXP self, SEXP s_longitude)
{
  {
    MapIcon_Interop *arg1 = (MapIcon_Interop *) 0 ;
    double arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_MapIcon_Interop, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MapIcon_Interop_longitude_set" "', argument " "1"" of type '" "MapIcon_Interop *""'"); 
    }
    arg1 = reinterpret_cast< MapIcon_Interop * >(argp1);
    arg2 = static_cast< double >(REAL(s_longitude)[0]);
    if (arg1) (arg1)->longitude = arg2;
    r_ans = R_NilValue;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_MapIcon_Interop_longitude_get ( SEXP self, SEXP s_swig_copy)
{
  {
    double result;
    MapIcon_Interop *arg1 = (MapIcon_Interop *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_MapIcon_Interop, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MapIcon_Interop_longitude_get" "', argument " "1"" of type '" "MapIcon_Interop *""'"); 
    }
    arg1 = reinterpret_cast< MapIcon_Interop * >(argp1);
    result = (double) ((arg1)->longitude);
    r_ans = SWIG_From_double(static_cast< double >(result));
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_MapIcon_Interop_latitude_set ( SEXP self, SEXP s_latitude)
{
  {
    MapIcon_Interop *arg1 = (MapIcon_Interop *) 0 ;
    double arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_MapIcon_Interop, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MapIcon_Interop_latitude_set" "', argument " "1"" of type '" "MapIcon_Interop *""'"); 
    }
    arg1 = reinterpret_cast< MapIcon_Interop * >(argp1);
    arg2 = static_cast< double >(REAL(s_latitude)[0]);
    if (arg1) (arg1)->latitude = arg2;
    r_ans = R_NilValue;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_MapIcon_Interop_latitude_get ( SEXP self, SEXP s_swig_copy)
{
  {
    double result;
    MapIcon_Interop *arg1 = (MapIcon_Interop *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_MapIcon_Interop, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MapIcon_Interop_latitude_get" "', argument " "1"" of type '" "MapIcon_Interop *""'"); 
    }
    arg1 = reinterpret_cast< MapIcon_Interop * >(argp1);
    result = (double) ((arg1)->latitude);
    r_ans = SWIG_From_double(static_cast< double >(result));
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_MapIcon_Interop_HideOnCollision_set ( SEXP self, SEXP s_HideOnCollision)
{
  {
    MapIcon_Interop *arg1 = (MapIcon_Interop *) 0 ;
    bool arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_MapIcon_Interop, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MapIcon_Interop_HideOnCollision_set" "', argument " "1"" of type '" "MapIcon_Interop *""'"); 
    }
    arg1 = reinterpret_cast< MapIcon_Interop * >(argp1);
    arg2 = LOGICAL(s_HideOnCollision)[0] ? true : false;
    if (arg1) (arg1)->HideOnCollision = arg2;
    r_ans = R_NilValue;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_MapIcon_Interop_HideOnCollision_get ( SEXP self, SEXP s_swig_copy)
{
  {
    bool result;
    MapIcon_Interop *arg1 = (MapIcon_Interop *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_MapIcon_Interop, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MapIcon_Interop_HideOnCollision_get" "', argument " "1"" of type '" "MapIcon_Interop *""'"); 
    }
    arg1 = reinterpret_cast< MapIcon_Interop * >(argp1);
    result = (bool) ((arg1)->HideOnCollision);
    r_ans = Rf_ScalarLogical(result);
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_MapIcon_Interop_IconPathGeometry_set ( SEXP self, SEXP s_IconPathGeometry)
{
  {
    MapIcon_Interop *arg1 = (MapIcon_Interop *) 0 ;
    std::string *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 = SWIG_OLDOBJ ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_MapIcon_Interop, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MapIcon_Interop_IconPathGeometry_set" "', argument " "1"" of type '" "MapIcon_Interop *""'"); 
    }
    arg1 = reinterpret_cast< MapIcon_Interop * >(argp1);
    {
      std::string *ptr = (std::string *)0;
      res2 = SWIG_AsPtr_std_string(s_IconPathGeometry, &ptr);
      if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MapIcon_Interop_IconPathGeometry_set" "', argument " "2"" of type '" "std::string const &""'"); 
      }
      if (!ptr) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MapIcon_Interop_IconPathGeometry_set" "', argument " "2"" of type '" "std::string const &""'"); 
      }
      arg2 = ptr;
    }
    if (arg1) (arg1)->IconPathGeometry = *arg2;
    r_ans = R_NilValue;
    if (SWIG_IsNewObj(res2)) delete arg2;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
    if (SWIG_IsNewObj(res2)) delete arg2;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_MapIcon_Interop_IconPathGeometry_get ( SEXP self, SEXP s_swig_copy)
{
  {
    std::string *result = 0 ;
    MapIcon_Interop *arg1 = (MapIcon_Interop *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_MapIcon_Interop, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MapIcon_Interop_IconPathGeometry_get" "', argument " "1"" of type '" "MapIcon_Interop *""'"); 
    }
    arg1 = reinterpret_cast< MapIcon_Interop * >(argp1);
    result = (std::string *) & ((arg1)->IconPathGeometry);
    r_ans = SWIG_From_std_string(static_cast< std::string >(*result));
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_MapIcon_Interop_Label_set ( SEXP self, SEXP s_Label)
{
  {
    MapIcon_Interop *arg1 = (MapIcon_Interop *) 0 ;
    std::string *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 = SWIG_OLDOBJ ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_MapIcon_Interop, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MapIcon_Interop_Label_set" "', argument " "1"" of type '" "MapIcon_Interop *""'"); 
    }
    arg1 = reinterpret_cast< MapIcon_Interop * >(argp1);
    {
      std::string *ptr = (std::string *)0;
      res2 = SWIG_AsPtr_std_string(s_Label, &ptr);
      if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MapIcon_Interop_Label_set" "', argument " "2"" of type '" "std::string const &""'"); 
      }
      if (!ptr) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MapIcon_Interop_Label_set" "', argument " "2"" of type '" "std::string const &""'"); 
      }
      arg2 = ptr;
    }
    if (arg1) (arg1)->Label = *arg2;
    r_ans = R_NilValue;
    if (SWIG_IsNewObj(res2)) delete arg2;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
    if (SWIG_IsNewObj(res2)) delete arg2;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_MapIcon_Interop_Label_get ( SEXP self, SEXP s_swig_copy)
{
  {
    std::string *result = 0 ;
    MapIcon_Interop *arg1 = (MapIcon_Interop *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_MapIcon_Interop, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MapIcon_Interop_Label_get" "', argument " "1"" of type '" "MapIcon_Interop *""'"); 
    }
    arg1 = reinterpret_cast< MapIcon_Interop * >(argp1);
    result = (std::string *) & ((arg1)->Label);
    r_ans = SWIG_From_std_string(static_cast< std::string >(*result));
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_new_MapIcon_Interop ( )
{
  {
    MapIcon_Interop *result = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    result = (MapIcon_Interop *)new MapIcon_Interop();
    r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_MapIcon_Interop, SWIG_POINTER_OWN |  0 );
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_delete_MapIcon_Interop ( SEXP self)
{
  {
    MapIcon_Interop *arg1 = (MapIcon_Interop *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_MapIcon_Interop, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MapIcon_Interop" "', argument " "1"" of type '" "MapIcon_Interop *""'"); 
    }
    arg1 = reinterpret_cast< MapIcon_Interop * >(argp1);
    delete arg1;
    r_ans = R_NilValue;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    R_ClearExternalPtr(self);
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_MapPolyline_Interop_color_set ( SEXP self, SEXP s_color)
{
  {
    MapPolyline_Interop *arg1 = (MapPolyline_Interop *) 0 ;
    Color_Interop *arg2 = (Color_Interop *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_MapPolyline_Interop, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MapPolyline_Interop_color_set" "', argument " "1"" of type '" "MapPolyline_Interop *""'"); 
    }
    arg1 = reinterpret_cast< MapPolyline_Interop * >(argp1);
    res2 = SWIG_R_ConvertPtr(s_color, &argp2, SWIGTYPE_p_Color_Interop, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MapPolyline_Interop_color_set" "', argument " "2"" of type '" "Color_Interop *""'"); 
    }
    arg2 = reinterpret_cast< Color_Interop * >(argp2);
    if (arg1) (arg1)->color = *arg2;
    r_ans = R_NilValue;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_MapPolyline_Interop_color_get ( SEXP self)
{
  {
    Color_Interop *result = 0 ;
    MapPolyline_Interop *arg1 = (MapPolyline_Interop *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_MapPolyline_Interop, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MapPolyline_Interop_color_get" "', argument " "1"" of type '" "MapPolyline_Interop *""'"); 
    }
    arg1 = reinterpret_cast< MapPolyline_Interop * >(argp1);
    result = (Color_Interop *)& ((arg1)->color);
    r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Color_Interop, 0 |  0 );
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_MapPolyline_Interop_thickness_set ( SEXP self, SEXP s_thickness)
{
  {
    MapPolyline_Interop *arg1 = (MapPolyline_Interop *) 0 ;
    double arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_MapPolyline_Interop, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MapPolyline_Interop_thickness_set" "', argument " "1"" of type '" "MapPolyline_Interop *""'"); 
    }
    arg1 = reinterpret_cast< MapPolyline_Interop * >(argp1);
    arg2 = static_cast< double >(REAL(s_thickness)[0]);
    if (arg1) (arg1)->thickness = arg2;
    r_ans = R_NilValue;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_MapPolyline_Interop_thickness_get ( SEXP self, SEXP s_swig_copy)
{
  {
    double result;
    MapPolyline_Interop *arg1 = (MapPolyline_Interop *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_MapPolyline_Interop, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MapPolyline_Interop_thickness_get" "', argument " "1"" of type '" "MapPolyline_Interop *""'"); 
    }
    arg1 = reinterpret_cast< MapPolyline_Interop * >(argp1);
    result = (double) ((arg1)->thickness);
    r_ans = SWIG_From_double(static_cast< double >(result));
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_MapPolyline_Interop_dashed_set ( SEXP self, SEXP s_dashed)
{
  {
    MapPolyline_Interop *arg1 = (MapPolyline_Interop *) 0 ;
    bool arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_MapPolyline_Interop, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MapPolyline_Interop_dashed_set" "', argument " "1"" of type '" "MapPolyline_Interop *""'"); 
    }
    arg1 = reinterpret_cast< MapPolyline_Interop * >(argp1);
    arg2 = LOGICAL(s_dashed)[0] ? true : false;
    if (arg1) (arg1)->dashed = arg2;
    r_ans = R_NilValue;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_MapPolyline_Interop_dashed_get ( SEXP self, SEXP s_swig_copy)
{
  {
    bool result;
    MapPolyline_Interop *arg1 = (MapPolyline_Interop *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_MapPolyline_Interop, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MapPolyline_Interop_dashed_get" "', argument " "1"" of type '" "MapPolyline_Interop *""'"); 
    }
    arg1 = reinterpret_cast< MapPolyline_Interop * >(argp1);
    result = (bool) ((arg1)->dashed);
    r_ans = Rf_ScalarLogical(result);
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_MapPolyline_Interop_coordinates_set ( SEXP self, SEXP s_coordinates)
{
  {
    MapPolyline_Interop *arg1 = (MapPolyline_Interop *) 0 ;
    std::vector< Pair< double,double >,std::allocator< Pair< double,double > > > *arg2 = (std::vector< Pair< double,double >,std::allocator< Pair< double,double > > > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_MapPolyline_Interop, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MapPolyline_Interop_coordinates_set" "', argument " "1"" of type '" "MapPolyline_Interop *""'"); 
    }
    arg1 = reinterpret_cast< MapPolyline_Interop * >(argp1);
    res2 = SWIG_R_ConvertPtr(s_coordinates, &argp2, SWIGTYPE_p_std__vectorT_PairT_double_double_t_std__allocatorT_PairT_double_double_t_t_t, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MapPolyline_Interop_coordinates_set" "', argument " "2"" of type '" "std::vector< Pair< double,double >,std::allocator< Pair< double,double > > > *""'"); 
    }
    arg2 = reinterpret_cast< std::vector< Pair< double,double >,std::allocator< Pair< double,double > > > * >(argp2);
    if (arg1) (arg1)->coordinates = *arg2;
    r_ans = R_NilValue;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_MapPolyline_Interop_coordinates_get ( SEXP self)
{
  {
    std::vector< Pair< double,double >,std::allocator< Pair< double,double > > > *result = 0 ;
    MapPolyline_Interop *arg1 = (MapPolyline_Interop *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_MapPolyline_Interop, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MapPolyline_Interop_coordinates_get" "', argument " "1"" of type '" "MapPolyline_Interop *""'"); 
    }
    arg1 = reinterpret_cast< MapPolyline_Interop * >(argp1);
    result = (std::vector< Pair< double,double >,std::allocator< Pair< double,double > > > *)& ((arg1)->coordinates);
    r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_PairT_double_double_t_std__allocatorT_PairT_double_double_t_t_t, 0 |  0 );
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_new_MapPolyline_Interop ( )
{
  {
    MapPolyline_Interop *result = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    result = (MapPolyline_Interop *)new MapPolyline_Interop();
    r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_MapPolyline_Interop, SWIG_POINTER_OWN |  0 );
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_delete_MapPolyline_Interop ( SEXP self)
{
  {
    MapPolyline_Interop *arg1 = (MapPolyline_Interop *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_MapPolyline_Interop, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MapPolyline_Interop" "', argument " "1"" of type '" "MapPolyline_Interop *""'"); 
    }
    arg1 = reinterpret_cast< MapPolyline_Interop * >(argp1);
    delete arg1;
    r_ans = R_NilValue;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    R_ClearExternalPtr(self);
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_MapBackground_Interop_highQuality_set ( SEXP self, SEXP s_highQuality)
{
  {
    MapBackground_Interop *arg1 = (MapBackground_Interop *) 0 ;
    bool arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_MapBackground_Interop, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MapBackground_Interop_highQuality_set" "', argument " "1"" of type '" "MapBackground_Interop *""'"); 
    }
    arg1 = reinterpret_cast< MapBackground_Interop * >(argp1);
    arg2 = LOGICAL(s_highQuality)[0] ? true : false;
    if (arg1) (arg1)->highQuality = arg2;
    r_ans = R_NilValue;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_MapBackground_Interop_highQuality_get ( SEXP self, SEXP s_swig_copy)
{
  {
    bool result;
    MapBackground_Interop *arg1 = (MapBackground_Interop *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_MapBackground_Interop, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MapBackground_Interop_highQuality_get" "', argument " "1"" of type '" "MapBackground_Interop *""'"); 
    }
    arg1 = reinterpret_cast< MapBackground_Interop * >(argp1);
    result = (bool) ((arg1)->highQuality);
    r_ans = Rf_ScalarLogical(result);
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_MapBackground_Interop_clipToBounds_set ( SEXP self, SEXP s_clipToBounds)
{
  {
    MapBackground_Interop *arg1 = (MapBackground_Interop *) 0 ;
    bool arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_MapBackground_Interop, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MapBackground_Interop_clipToBounds_set" "', argument " "1"" of type '" "MapBackground_Interop *""'"); 
    }
    arg1 = reinterpret_cast< MapBackground_Interop * >(argp1);
    arg2 = LOGICAL(s_clipToBounds)[0] ? true : false;
    if (arg1) (arg1)->clipToBounds = arg2;
    r_ans = R_NilValue;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_MapBackground_Interop_clipToBounds_get ( SEXP self, SEXP s_swig_copy)
{
  {
    bool result;
    MapBackground_Interop *arg1 = (MapBackground_Interop *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_MapBackground_Interop, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MapBackground_Interop_clipToBounds_get" "', argument " "1"" of type '" "MapBackground_Interop *""'"); 
    }
    arg1 = reinterpret_cast< MapBackground_Interop * >(argp1);
    result = (bool) ((arg1)->clipToBounds);
    r_ans = Rf_ScalarLogical(result);
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_MapBackground_Interop_minValue_set ( SEXP self, SEXP s_minValue)
{
  {
    MapBackground_Interop *arg1 = (MapBackground_Interop *) 0 ;
    double arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_MapBackground_Interop, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MapBackground_Interop_minValue_set" "', argument " "1"" of type '" "MapBackground_Interop *""'"); 
    }
    arg1 = reinterpret_cast< MapBackground_Interop * >(argp1);
    arg2 = static_cast< double >(REAL(s_minValue)[0]);
    if (arg1) (arg1)->minValue = arg2;
    r_ans = R_NilValue;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_MapBackground_Interop_minValue_get ( SEXP self, SEXP s_swig_copy)
{
  {
    double result;
    MapBackground_Interop *arg1 = (MapBackground_Interop *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_MapBackground_Interop, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MapBackground_Interop_minValue_get" "', argument " "1"" of type '" "MapBackground_Interop *""'"); 
    }
    arg1 = reinterpret_cast< MapBackground_Interop * >(argp1);
    result = (double) ((arg1)->minValue);
    r_ans = SWIG_From_double(static_cast< double >(result));
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_MapBackground_Interop_maxValue_set ( SEXP self, SEXP s_maxValue)
{
  {
    MapBackground_Interop *arg1 = (MapBackground_Interop *) 0 ;
    double arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_MapBackground_Interop, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MapBackground_Interop_maxValue_set" "', argument " "1"" of type '" "MapBackground_Interop *""'"); 
    }
    arg1 = reinterpret_cast< MapBackground_Interop * >(argp1);
    arg2 = static_cast< double >(REAL(s_maxValue)[0]);
    if (arg1) (arg1)->maxValue = arg2;
    r_ans = R_NilValue;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_MapBackground_Interop_maxValue_get ( SEXP self, SEXP s_swig_copy)
{
  {
    double result;
    MapBackground_Interop *arg1 = (MapBackground_Interop *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_MapBackground_Interop, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MapBackground_Interop_maxValue_get" "', argument " "1"" of type '" "MapBackground_Interop *""'"); 
    }
    arg1 = reinterpret_cast< MapBackground_Interop * >(argp1);
    result = (double) ((arg1)->maxValue);
    r_ans = SWIG_From_double(static_cast< double >(result));
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_MapBackground_Interop_matrix_set ( SEXP self, SEXP s_matrix)
{
  {
    MapBackground_Interop *arg1 = (MapBackground_Interop *) 0 ;
    int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_MapBackground_Interop, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MapBackground_Interop_matrix_set" "', argument " "1"" of type '" "MapBackground_Interop *""'"); 
    }
    arg1 = reinterpret_cast< MapBackground_Interop * >(argp1);
    arg2 = static_cast< int >(INTEGER(s_matrix)[0]);
    if (arg1) (arg1)->matrix = arg2;
    r_ans = R_NilValue;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_MapBackground_Interop_matrix_get ( SEXP self, SEXP s_swig_copy)
{
  {
    int result;
    MapBackground_Interop *arg1 = (MapBackground_Interop *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_MapBackground_Interop, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MapBackground_Interop_matrix_get" "', argument " "1"" of type '" "MapBackground_Interop *""'"); 
    }
    arg1 = reinterpret_cast< MapBackground_Interop * >(argp1);
    result = (int) ((arg1)->matrix);
    r_ans = Rf_ScalarInteger(result);
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_MapBackground_Interop_min_color_set ( SEXP self, SEXP s_min_color)
{
  {
    MapBackground_Interop *arg1 = (MapBackground_Interop *) 0 ;
    Color_Interop *arg2 = (Color_Interop *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_MapBackground_Interop, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MapBackground_Interop_min_color_set" "', argument " "1"" of type '" "MapBackground_Interop *""'"); 
    }
    arg1 = reinterpret_cast< MapBackground_Interop * >(argp1);
    res2 = SWIG_R_ConvertPtr(s_min_color, &argp2, SWIGTYPE_p_Color_Interop, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MapBackground_Interop_min_color_set" "', argument " "2"" of type '" "Color_Interop *""'"); 
    }
    arg2 = reinterpret_cast< Color_Interop * >(argp2);
    if (arg1) (arg1)->min_color = *arg2;
    r_ans = R_NilValue;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_MapBackground_Interop_min_color_get ( SEXP self)
{
  {
    Color_Interop *result = 0 ;
    MapBackground_Interop *arg1 = (MapBackground_Interop *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_MapBackground_Interop, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MapBackground_Interop_min_color_get" "', argument " "1"" of type '" "MapBackground_Interop *""'"); 
    }
    arg1 = reinterpret_cast< MapBackground_Interop * >(argp1);
    result = (Color_Interop *)& ((arg1)->min_color);
    r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Color_Interop, 0 |  0 );
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_MapBackground_Interop_max_color_set ( SEXP self, SEXP s_max_color)
{
  {
    MapBackground_Interop *arg1 = (MapBackground_Interop *) 0 ;
    Color_Interop *arg2 = (Color_Interop *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_MapBackground_Interop, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MapBackground_Interop_max_color_set" "', argument " "1"" of type '" "MapBackground_Interop *""'"); 
    }
    arg1 = reinterpret_cast< MapBackground_Interop * >(argp1);
    res2 = SWIG_R_ConvertPtr(s_max_color, &argp2, SWIGTYPE_p_Color_Interop, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MapBackground_Interop_max_color_set" "', argument " "2"" of type '" "Color_Interop *""'"); 
    }
    arg2 = reinterpret_cast< Color_Interop * >(argp2);
    if (arg1) (arg1)->max_color = *arg2;
    r_ans = R_NilValue;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_MapBackground_Interop_max_color_get ( SEXP self)
{
  {
    Color_Interop *result = 0 ;
    MapBackground_Interop *arg1 = (MapBackground_Interop *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_MapBackground_Interop, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MapBackground_Interop_max_color_get" "', argument " "1"" of type '" "MapBackground_Interop *""'"); 
    }
    arg1 = reinterpret_cast< MapBackground_Interop * >(argp1);
    result = (Color_Interop *)& ((arg1)->max_color);
    r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Color_Interop, 0 |  0 );
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_MapBackground_Interop_GetMatrix ( SEXP Left, SEXP Top, SEXP Right, SEXP Bottom, SEXP numColumns, SEXP numRows, SEXP backgrounds, SEXP s_swig_copy)
{
  {
    std::vector< Color_Interop,std::allocator< Color_Interop > > result;
    double arg1 ;
    double arg2 ;
    double arg3 ;
    double arg4 ;
    int arg5 ;
    int arg6 ;
    std::vector< MapBackground_Interop,std::allocator< MapBackground_Interop > > *arg7 = 0 ;
    void *argp7 = 0 ;
    int res7 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    arg1 = static_cast< double >(REAL(Left)[0]);
    arg2 = static_cast< double >(REAL(Top)[0]);
    arg3 = static_cast< double >(REAL(Right)[0]);
    arg4 = static_cast< double >(REAL(Bottom)[0]);
    arg5 = static_cast< int >(INTEGER(numColumns)[0]);
    arg6 = static_cast< int >(INTEGER(numRows)[0]);
    res7 = SWIG_R_ConvertPtr(backgrounds, &argp7, SWIGTYPE_p_std__vectorT_MapBackground_Interop_std__allocatorT_MapBackground_Interop_t_t,  0 );
    if (!SWIG_IsOK(res7)) {
      SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "MapBackground_Interop_GetMatrix" "', argument " "7"" of type '" "std::vector< MapBackground_Interop,std::allocator< MapBackground_Interop > > const &""'"); 
    }
    if (!argp7) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MapBackground_Interop_GetMatrix" "', argument " "7"" of type '" "std::vector< MapBackground_Interop,std::allocator< MapBackground_Interop > > const &""'"); 
    }
    arg7 = reinterpret_cast< std::vector< MapBackground_Interop,std::allocator< MapBackground_Interop > > * >(argp7);
    result = MapBackground_Interop::GetMatrix(arg1,arg2,arg3,arg4,arg5,arg6,(std::vector< MapBackground_Interop,std::allocator< MapBackground_Interop > > const &)*arg7);
    r_ans = SWIG_R_NewPointerObj((new std::vector< Color_Interop,std::allocator< Color_Interop > >(result)), SWIGTYPE_p_std__vectorT_Color_Interop_std__allocatorT_Color_Interop_t_t, SWIG_POINTER_OWN |  0 );
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_new_MapBackground_Interop ( )
{
  {
    MapBackground_Interop *result = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    result = (MapBackground_Interop *)new MapBackground_Interop();
    r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_MapBackground_Interop, SWIG_POINTER_OWN |  0 );
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_delete_MapBackground_Interop ( SEXP self)
{
  {
    MapBackground_Interop *arg1 = (MapBackground_Interop *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_MapBackground_Interop, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MapBackground_Interop" "', argument " "1"" of type '" "MapBackground_Interop *""'"); 
    }
    arg1 = reinterpret_cast< MapBackground_Interop * >(argp1);
    delete arg1;
    r_ans = R_NilValue;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    R_ClearExternalPtr(self);
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_MapLayer_Interop_polylines_set ( SEXP self, SEXP s_polylines)
{
  {
    MapLayer_Interop *arg1 = (MapLayer_Interop *) 0 ;
    std::map< int,MapPolyline_Interop,std::less< int >,std::allocator< std::pair< int const,MapPolyline_Interop > > > *arg2 = (std::map< int,MapPolyline_Interop,std::less< int >,std::allocator< std::pair< int const,MapPolyline_Interop > > > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_MapLayer_Interop, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MapLayer_Interop_polylines_set" "', argument " "1"" of type '" "MapLayer_Interop *""'"); 
    }
    arg1 = reinterpret_cast< MapLayer_Interop * >(argp1);
    res2 = SWIG_R_ConvertPtr(s_polylines, &argp2, SWIGTYPE_p_std__mapT_int_MapPolyline_Interop_std__lessT_int_t_std__allocatorT_std__pairT_int_const_MapPolyline_Interop_t_t_t, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MapLayer_Interop_polylines_set" "', argument " "2"" of type '" "std::map< int,MapPolyline_Interop,std::less< int >,std::allocator< std::pair< int const,MapPolyline_Interop > > > *""'"); 
    }
    arg2 = reinterpret_cast< std::map< int,MapPolyline_Interop,std::less< int >,std::allocator< std::pair< int const,MapPolyline_Interop > > > * >(argp2);
    if (arg1) (arg1)->polylines = *arg2;
    r_ans = R_NilValue;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_MapLayer_Interop_polylines_get ( SEXP self)
{
  {
    std::map< int,MapPolyline_Interop,std::less< int >,std::allocator< std::pair< int const,MapPolyline_Interop > > > *result = 0 ;
    MapLayer_Interop *arg1 = (MapLayer_Interop *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_MapLayer_Interop, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MapLayer_Interop_polylines_get" "', argument " "1"" of type '" "MapLayer_Interop *""'"); 
    }
    arg1 = reinterpret_cast< MapLayer_Interop * >(argp1);
    result = (std::map< int,MapPolyline_Interop,std::less< int >,std::allocator< std::pair< int const,MapPolyline_Interop > > > *)& ((arg1)->polylines);
    r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__mapT_int_MapPolyline_Interop_std__lessT_int_t_std__allocatorT_std__pairT_int_const_MapPolyline_Interop_t_t_t, 0 |  0 );
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_MapLayer_Interop_icons_set ( SEXP self, SEXP s_icons)
{
  {
    MapLayer_Interop *arg1 = (MapLayer_Interop *) 0 ;
    std::map< int,MapIcon_Interop,std::less< int >,std::allocator< std::pair< int const,MapIcon_Interop > > > *arg2 = (std::map< int,MapIcon_Interop,std::less< int >,std::allocator< std::pair< int const,MapIcon_Interop > > > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_MapLayer_Interop, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MapLayer_Interop_icons_set" "', argument " "1"" of type '" "MapLayer_Interop *""'"); 
    }
    arg1 = reinterpret_cast< MapLayer_Interop * >(argp1);
    res2 = SWIG_R_ConvertPtr(s_icons, &argp2, SWIGTYPE_p_std__mapT_int_MapIcon_Interop_std__lessT_int_t_std__allocatorT_std__pairT_int_const_MapIcon_Interop_t_t_t, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MapLayer_Interop_icons_set" "', argument " "2"" of type '" "std::map< int,MapIcon_Interop,std::less< int >,std::allocator< std::pair< int const,MapIcon_Interop > > > *""'"); 
    }
    arg2 = reinterpret_cast< std::map< int,MapIcon_Interop,std::less< int >,std::allocator< std::pair< int const,MapIcon_Interop > > > * >(argp2);
    if (arg1) (arg1)->icons = *arg2;
    r_ans = R_NilValue;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_MapLayer_Interop_icons_get ( SEXP self)
{
  {
    std::map< int,MapIcon_Interop,std::less< int >,std::allocator< std::pair< int const,MapIcon_Interop > > > *result = 0 ;
    MapLayer_Interop *arg1 = (MapLayer_Interop *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_MapLayer_Interop, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MapLayer_Interop_icons_get" "', argument " "1"" of type '" "MapLayer_Interop *""'"); 
    }
    arg1 = reinterpret_cast< MapLayer_Interop * >(argp1);
    result = (std::map< int,MapIcon_Interop,std::less< int >,std::allocator< std::pair< int const,MapIcon_Interop > > > *)& ((arg1)->icons);
    r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__mapT_int_MapIcon_Interop_std__lessT_int_t_std__allocatorT_std__pairT_int_const_MapIcon_Interop_t_t_t, 0 |  0 );
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_new_MapLayer_Interop ( )
{
  {
    MapLayer_Interop *result = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    result = (MapLayer_Interop *)new MapLayer_Interop();
    r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_MapLayer_Interop, SWIG_POINTER_OWN |  0 );
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_delete_MapLayer_Interop ( SEXP self)
{
  {
    MapLayer_Interop *arg1 = (MapLayer_Interop *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_MapLayer_Interop, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MapLayer_Interop" "', argument " "1"" of type '" "MapLayer_Interop *""'"); 
    }
    arg1 = reinterpret_cast< MapLayer_Interop * >(argp1);
    delete arg1;
    r_ans = R_NilValue;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    R_ClearExternalPtr(self);
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_new_ScriptObject ( SEXP p)
{
  {
    ScriptObject *result = 0 ;
    cweeSharedPtr< void > arg1 ;
    void *argp1 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    {
      res1 = SWIG_R_ConvertPtr(p, &argp1, SWIGTYPE_p_cweeSharedPtrT_void_t,  0 );
      if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ScriptObject" "', argument " "1"" of type '" "cweeSharedPtr< void >""'"); 
      }  
      if (!argp1) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ScriptObject" "', argument " "1"" of type '" "cweeSharedPtr< void >""'");
      } else {
        arg1 = *(reinterpret_cast< cweeSharedPtr< void > * >(argp1));
      }
    }
    result = (ScriptObject *)new ScriptObject(arg1);
    r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ScriptObject, SWIG_POINTER_OWN |  0 );
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_delete_ScriptObject ( SEXP self)
{
  {
    ScriptObject *arg1 = (ScriptObject *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_ScriptObject, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ScriptObject" "', argument " "1"" of type '" "ScriptObject *""'"); 
    }
    arg1 = reinterpret_cast< ScriptObject * >(argp1);
    delete arg1;
    r_ans = R_NilValue;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    R_ClearExternalPtr(self);
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_ScriptObject_Cast_String ( SEXP self, SEXP s_swig_copy)
{
  {
    std::string result;
    ScriptObject *arg1 = (ScriptObject *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_ScriptObject, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScriptObject_Cast_String" "', argument " "1"" of type '" "ScriptObject *""'"); 
    }
    arg1 = reinterpret_cast< ScriptObject * >(argp1);
    result = (arg1)->Cast_String();
    r_ans = SWIG_From_std_string(static_cast< std::string >(result));
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_ScriptObject_Cast_Color ( SEXP self, SEXP s_swig_copy)
{
  {
    Color_Interop result;
    ScriptObject *arg1 = (ScriptObject *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_ScriptObject, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScriptObject_Cast_Color" "', argument " "1"" of type '" "ScriptObject *""'"); 
    }
    arg1 = reinterpret_cast< ScriptObject * >(argp1);
    result = (arg1)->Cast_Color();
    r_ans = SWIG_R_NewPointerObj((new Color_Interop(result)), SWIGTYPE_p_Color_Interop, SWIG_POINTER_OWN |  0 );
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_ScriptObject_Cast_MapIcon ( SEXP self, SEXP s_swig_copy)
{
  {
    MapIcon_Interop result;
    ScriptObject *arg1 = (ScriptObject *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_ScriptObject, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScriptObject_Cast_MapIcon" "', argument " "1"" of type '" "ScriptObject *""'"); 
    }
    arg1 = reinterpret_cast< ScriptObject * >(argp1);
    result = (arg1)->Cast_MapIcon();
    r_ans = SWIG_R_NewPointerObj((new MapIcon_Interop(result)), SWIGTYPE_p_MapIcon_Interop, SWIG_POINTER_OWN |  0 );
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_ScriptObject_Cast_MapPolyline ( SEXP self, SEXP s_swig_copy)
{
  {
    MapPolyline_Interop result;
    ScriptObject *arg1 = (ScriptObject *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_ScriptObject, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScriptObject_Cast_MapPolyline" "', argument " "1"" of type '" "ScriptObject *""'"); 
    }
    arg1 = reinterpret_cast< ScriptObject * >(argp1);
    result = (arg1)->Cast_MapPolyline();
    r_ans = SWIG_R_NewPointerObj((new MapPolyline_Interop(result)), SWIGTYPE_p_MapPolyline_Interop, SWIG_POINTER_OWN |  0 );
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_ScriptObject_Cast_MapLayer ( SEXP self, SEXP s_swig_copy)
{
  {
    MapLayer_Interop result;
    ScriptObject *arg1 = (ScriptObject *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_ScriptObject, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScriptObject_Cast_MapLayer" "', argument " "1"" of type '" "ScriptObject *""'"); 
    }
    arg1 = reinterpret_cast< ScriptObject * >(argp1);
    result = (arg1)->Cast_MapLayer();
    r_ans = SWIG_R_NewPointerObj((new MapLayer_Interop(result)), SWIGTYPE_p_MapLayer_Interop, SWIG_POINTER_OWN |  0 );
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_new_ScriptEngine ( )
{
  {
    ScriptEngine *result = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    result = (ScriptEngine *)new ScriptEngine();
    r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ScriptEngine, SWIG_POINTER_OWN |  0 );
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_delete_ScriptEngine ( SEXP self)
{
  {
    ScriptEngine *arg1 = (ScriptEngine *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_ScriptEngine, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ScriptEngine" "', argument " "1"" of type '" "ScriptEngine *""'"); 
    }
    arg1 = reinterpret_cast< ScriptEngine * >(argp1);
    delete arg1;
    r_ans = R_NilValue;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    R_ClearExternalPtr(self);
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_ScriptEngine_DoScript_Cast_VectorStrings ( SEXP self, SEXP command, SEXP s_swig_copy)
{
  {
    std::vector< std::string,std::allocator< std::string > > result;
    ScriptEngine *arg1 = (ScriptEngine *) 0 ;
    std::string arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_ScriptEngine, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScriptEngine_DoScript_Cast_VectorStrings" "', argument " "1"" of type '" "ScriptEngine *""'"); 
    }
    arg1 = reinterpret_cast< ScriptEngine * >(argp1);
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string(command, &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "ScriptEngine_DoScript_Cast_VectorStrings" "', argument " "2"" of type '" "std::string""'"); 
      }
      arg2 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    result = (arg1)->DoScript_Cast_VectorStrings(arg2);
    r_ans = SWIG_R_NewPointerObj((new std::vector< std::string,std::allocator< std::string > >(result)), SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, SWIG_POINTER_OWN |  0 );
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_ScriptEngine_DoScript_Cast_VectorFloats ( SEXP self, SEXP command, SEXP s_swig_copy)
{
  {
    std::vector< float,std::allocator< float > > result;
    ScriptEngine *arg1 = (ScriptEngine *) 0 ;
    std::string arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_ScriptEngine, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScriptEngine_DoScript_Cast_VectorFloats" "', argument " "1"" of type '" "ScriptEngine *""'"); 
    }
    arg1 = reinterpret_cast< ScriptEngine * >(argp1);
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string(command, &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "ScriptEngine_DoScript_Cast_VectorFloats" "', argument " "2"" of type '" "std::string""'"); 
      }
      arg2 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    result = (arg1)->DoScript_Cast_VectorFloats(arg2);
    r_ans = swig::from(static_cast< std::vector<float> >(result));
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_ScriptEngine_DoScript ( SEXP self, SEXP command, SEXP s_swig_copy)
{
  {
    std::string result;
    ScriptEngine *arg1 = (ScriptEngine *) 0 ;
    std::string arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_ScriptEngine, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScriptEngine_DoScript" "', argument " "1"" of type '" "ScriptEngine *""'"); 
    }
    arg1 = reinterpret_cast< ScriptEngine * >(argp1);
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string(command, &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "ScriptEngine_DoScript" "', argument " "2"" of type '" "std::string""'"); 
      }
      arg2 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    result = (arg1)->DoScript(arg2);
    r_ans = SWIG_From_std_string(static_cast< std::string >(result));
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_ScriptEngine_DoScriptAsync ( SEXP self, SEXP command, SEXP s_swig_copy)
{
  {
    Awaiter result;
    ScriptEngine *arg1 = (ScriptEngine *) 0 ;
    std::string arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_ScriptEngine, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScriptEngine_DoScriptAsync" "', argument " "1"" of type '" "ScriptEngine *""'"); 
    }
    arg1 = reinterpret_cast< ScriptEngine * >(argp1);
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string(command, &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "ScriptEngine_DoScriptAsync" "', argument " "2"" of type '" "std::string""'"); 
      }
      arg2 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    result = (arg1)->DoScriptAsync(arg2);
    r_ans = SWIG_R_NewPointerObj((new Awaiter(result)), SWIGTYPE_p_Awaiter, SWIG_POINTER_OWN |  0 );
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_ScriptEngine_PreParseScript ( SEXP self, SEXP command, SEXP s_swig_copy)
{
  {
    std::vector< ScriptingNode,std::allocator< ScriptingNode > > result;
    ScriptEngine *arg1 = (ScriptEngine *) 0 ;
    std::string arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_ScriptEngine, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScriptEngine_PreParseScript" "', argument " "1"" of type '" "ScriptEngine *""'"); 
    }
    arg1 = reinterpret_cast< ScriptEngine * >(argp1);
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string(command, &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "ScriptEngine_PreParseScript" "', argument " "2"" of type '" "std::string""'"); 
      }
      arg2 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    result = (arg1)->PreParseScript(arg2);
    r_ans = SWIG_R_NewPointerObj((new std::vector< ScriptingNode,std::allocator< ScriptingNode > >(result)), SWIGTYPE_p_std__vectorT_ScriptingNode_std__allocatorT_ScriptingNode_t_t, SWIG_POINTER_OWN |  0 );
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_ScriptEngine_CompatibleFunctions ( SEXP self, SEXP TypeName, SEXP s_swig_copy)
{
  {
    std::vector< std::string,std::allocator< std::string > > result;
    ScriptEngine *arg1 = (ScriptEngine *) 0 ;
    std::string arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_ScriptEngine, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScriptEngine_CompatibleFunctions" "', argument " "1"" of type '" "ScriptEngine *""'"); 
    }
    arg1 = reinterpret_cast< ScriptEngine * >(argp1);
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string(TypeName, &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "ScriptEngine_CompatibleFunctions" "', argument " "2"" of type '" "std::string""'"); 
      }
      arg2 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    result = (arg1)->CompatibleFunctions(arg2);
    r_ans = SWIG_R_NewPointerObj((new std::vector< std::string,std::allocator< std::string > >(result)), SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, SWIG_POINTER_OWN |  0 );
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_ScriptEngine_FunctionsThatStartWith ( SEXP self, SEXP startsWith, SEXP s_swig_copy)
{
  {
    std::vector< std::string,std::allocator< std::string > > result;
    ScriptEngine *arg1 = (ScriptEngine *) 0 ;
    std::string arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_ScriptEngine, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScriptEngine_FunctionsThatStartWith" "', argument " "1"" of type '" "ScriptEngine *""'"); 
    }
    arg1 = reinterpret_cast< ScriptEngine * >(argp1);
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string(startsWith, &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "ScriptEngine_FunctionsThatStartWith" "', argument " "2"" of type '" "std::string""'"); 
      }
      arg2 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    result = (arg1)->FunctionsThatStartWith(arg2);
    r_ans = SWIG_R_NewPointerObj((new std::vector< std::string,std::allocator< std::string > >(result)), SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, SWIG_POINTER_OWN |  0 );
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_ScriptEngine_StopCurrentScript ( SEXP self)
{
  {
    ScriptEngine *arg1 = (ScriptEngine *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_ScriptEngine, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScriptEngine_StopCurrentScript" "', argument " "1"" of type '" "ScriptEngine *""'"); 
    }
    arg1 = reinterpret_cast< ScriptEngine * >(argp1);
    (arg1)->StopCurrentScript();
    r_ans = R_NilValue;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_ScriptEngine_Cast_String ( SEXP self, SEXP command, SEXP s_swig_copy)
{
  {
    std::string result;
    ScriptEngine *arg1 = (ScriptEngine *) 0 ;
    std::string arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_ScriptEngine, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScriptEngine_Cast_String" "', argument " "1"" of type '" "ScriptEngine *""'"); 
    }
    arg1 = reinterpret_cast< ScriptEngine * >(argp1);
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string(command, &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "ScriptEngine_Cast_String" "', argument " "2"" of type '" "std::string""'"); 
      }
      arg2 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    result = (arg1)->Cast_String(arg2);
    r_ans = SWIG_From_std_string(static_cast< std::string >(result));
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_ScriptEngine_Cast_Color ( SEXP self, SEXP command, SEXP s_swig_copy)
{
  {
    Color_Interop result;
    ScriptEngine *arg1 = (ScriptEngine *) 0 ;
    std::string arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_ScriptEngine, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScriptEngine_Cast_Color" "', argument " "1"" of type '" "ScriptEngine *""'"); 
    }
    arg1 = reinterpret_cast< ScriptEngine * >(argp1);
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string(command, &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "ScriptEngine_Cast_Color" "', argument " "2"" of type '" "std::string""'"); 
      }
      arg2 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    result = (arg1)->Cast_Color(arg2);
    r_ans = SWIG_R_NewPointerObj((new Color_Interop(result)), SWIGTYPE_p_Color_Interop, SWIG_POINTER_OWN |  0 );
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_ScriptEngine_Cast_MapIcon ( SEXP self, SEXP command, SEXP s_swig_copy)
{
  {
    MapIcon_Interop result;
    ScriptEngine *arg1 = (ScriptEngine *) 0 ;
    std::string arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_ScriptEngine, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScriptEngine_Cast_MapIcon" "', argument " "1"" of type '" "ScriptEngine *""'"); 
    }
    arg1 = reinterpret_cast< ScriptEngine * >(argp1);
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string(command, &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "ScriptEngine_Cast_MapIcon" "', argument " "2"" of type '" "std::string""'"); 
      }
      arg2 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    result = (arg1)->Cast_MapIcon(arg2);
    r_ans = SWIG_R_NewPointerObj((new MapIcon_Interop(result)), SWIGTYPE_p_MapIcon_Interop, SWIG_POINTER_OWN |  0 );
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_ScriptEngine_Cast_MapPolyline ( SEXP self, SEXP command, SEXP s_swig_copy)
{
  {
    MapPolyline_Interop result;
    ScriptEngine *arg1 = (ScriptEngine *) 0 ;
    std::string arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_ScriptEngine, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScriptEngine_Cast_MapPolyline" "', argument " "1"" of type '" "ScriptEngine *""'"); 
    }
    arg1 = reinterpret_cast< ScriptEngine * >(argp1);
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string(command, &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "ScriptEngine_Cast_MapPolyline" "', argument " "2"" of type '" "std::string""'"); 
      }
      arg2 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    result = (arg1)->Cast_MapPolyline(arg2);
    r_ans = SWIG_R_NewPointerObj((new MapPolyline_Interop(result)), SWIGTYPE_p_MapPolyline_Interop, SWIG_POINTER_OWN |  0 );
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_ScriptEngine_Cast_MapBackground ( SEXP self, SEXP command, SEXP s_swig_copy)
{
  {
    MapBackground_Interop result;
    ScriptEngine *arg1 = (ScriptEngine *) 0 ;
    std::string arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_ScriptEngine, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScriptEngine_Cast_MapBackground" "', argument " "1"" of type '" "ScriptEngine *""'"); 
    }
    arg1 = reinterpret_cast< ScriptEngine * >(argp1);
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string(command, &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "ScriptEngine_Cast_MapBackground" "', argument " "2"" of type '" "std::string""'"); 
      }
      arg2 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    result = (arg1)->Cast_MapBackground(arg2);
    r_ans = SWIG_R_NewPointerObj((new MapBackground_Interop(result)), SWIGTYPE_p_MapBackground_Interop, SWIG_POINTER_OWN |  0 );
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_ScriptEngine_Cast_MapLayer ( SEXP self, SEXP command, SEXP s_swig_copy)
{
  {
    MapLayer_Interop result;
    ScriptEngine *arg1 = (ScriptEngine *) 0 ;
    std::string arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_ScriptEngine, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScriptEngine_Cast_MapLayer" "', argument " "1"" of type '" "ScriptEngine *""'"); 
    }
    arg1 = reinterpret_cast< ScriptEngine * >(argp1);
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string(command, &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "ScriptEngine_Cast_MapLayer" "', argument " "2"" of type '" "std::string""'"); 
      }
      arg2 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    result = (arg1)->Cast_MapLayer(arg2);
    r_ans = SWIG_R_NewPointerObj((new MapLayer_Interop(result)), SWIGTYPE_p_MapLayer_Interop, SWIG_POINTER_OWN |  0 );
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_ScriptEngine_Cast_VectorFloats ( SEXP self, SEXP command, SEXP s_swig_copy)
{
  {
    std::vector< float,std::allocator< float > > result;
    ScriptEngine *arg1 = (ScriptEngine *) 0 ;
    std::string arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_ScriptEngine, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScriptEngine_Cast_VectorFloats" "', argument " "1"" of type '" "ScriptEngine *""'"); 
    }
    arg1 = reinterpret_cast< ScriptEngine * >(argp1);
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string(command, &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "ScriptEngine_Cast_VectorFloats" "', argument " "2"" of type '" "std::string""'"); 
      }
      arg2 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    result = (arg1)->Cast_VectorFloats(arg2);
    r_ans = swig::from(static_cast< std::vector<float> >(result));
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_WaterWatch_SubmitToast ( SEXP title, SEXP content)
{
  {
    std::string arg1 ;
    std::string arg2 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string(title, &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "WaterWatch_SubmitToast" "', argument " "1"" of type '" "std::string""'"); 
      }
      arg1 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string(content, &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "WaterWatch_SubmitToast" "', argument " "2"" of type '" "std::string""'"); 
      }
      arg2 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    WaterWatch::SubmitToast(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2));
    r_ans = R_NilValue;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_WaterWatch_TryGetToast ( SEXP s_swig_copy)
{
  {
    Pair< bool,Pair< std::string,std::string > > result;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    result = WaterWatch::TryGetToast();
    r_ans = SWIG_R_NewPointerObj((new Pair< bool,Pair< std::string,std::string > >(result)), SWIGTYPE_p_PairT_bool_PairT_std__string_std__string_t_t, SWIG_POINTER_OWN |  0 );
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_WaterWatch_TryGetAppRequest ( SEXP s_swig_copy)
{
  {
    Pair< int,Pair< std::string,std::vector< std::string,std::allocator< std::string > > > > result;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    result = WaterWatch::TryGetAppRequest();
    r_ans = SWIG_R_NewPointerObj((new Pair< int,Pair< std::string,std::vector< std::string,std::allocator< std::string > > > >(result)), SWIGTYPE_p_PairT_int_PairT_std__string_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t, SWIG_POINTER_OWN |  0 );
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_WaterWatch_CompleteAppRequest ( SEXP ID, SEXP reply)
{
  {
    int arg1 ;
    std::string arg2 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    arg1 = static_cast< int >(INTEGER(ID)[0]);
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string(reply, &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "WaterWatch_CompleteAppRequest" "', argument " "2"" of type '" "std::string""'"); 
      }
      arg2 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    WaterWatch::CompleteAppRequest(arg1,SWIG_STD_MOVE(arg2));
    r_ans = R_NilValue;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_WaterWatch_GetDataDirectory ( SEXP s_swig_copy)
{
  {
    std::string result;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    result = WaterWatch::GetDataDirectory();
    r_ans = SWIG_From_std_string(static_cast< std::string >(result));
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_WaterWatch_SetDataDirectory ( SEXP dir)
{
  {
    std::string arg1 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string(dir, &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "WaterWatch_SetDataDirectory" "', argument " "1"" of type '" "std::string""'"); 
      }
      arg1 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    WaterWatch::SetDataDirectory(SWIG_STD_MOVE(arg1));
    r_ans = R_NilValue;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_WaterWatch_GetTemporaryFilePath ( SEXP extension, SEXP s_swig_copy)
{
  {
    std::string result;
    std::string arg1 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string(extension, &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "WaterWatch_GetTemporaryFilePath" "', argument " "1"" of type '" "std::string""'"); 
      }
      arg1 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    result = WaterWatch::GetTemporaryFilePath(SWIG_STD_MOVE(arg1));
    r_ans = SWIG_From_std_string(static_cast< std::string >(result));
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_WaterWatch_GeocodeAddress__SWIG_0 ( SEXP address, SEXP s_swig_copy)
{
  {
    Pair< double,double > result;
    std::string arg1 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string(address, &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "WaterWatch_GeocodeAddress" "', argument " "1"" of type '" "std::string""'"); 
      }
      arg1 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    result = WaterWatch::GeocodeAddress(SWIG_STD_MOVE(arg1));
    r_ans = SWIG_R_NewPointerObj((new Pair< double,double >(result)), SWIGTYPE_p_PairT_double_double_t, SWIG_POINTER_OWN |  0 );
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_WaterWatch_GeocodeAddress__SWIG_1 ( SEXP longitude, SEXP latitude, SEXP s_swig_copy)
{
  {
    std::string result;
    double arg1 ;
    double arg2 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    arg1 = static_cast< double >(REAL(longitude)[0]);
    arg2 = static_cast< double >(REAL(latitude)[0]);
    result = WaterWatch::GeocodeAddress(arg1,arg2);
    r_ans = SWIG_From_std_string(static_cast< std::string >(result));
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_WaterWatch_GeocodeElevation ( SEXP longitude, SEXP latitude, SEXP s_swig_copy)
{
  {
    double result;
    double arg1 ;
    double arg2 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    arg1 = static_cast< double >(REAL(longitude)[0]);
    arg2 = static_cast< double >(REAL(latitude)[0]);
    result = (double)WaterWatch::GeocodeElevation(arg1,arg2);
    r_ans = SWIG_From_double(static_cast< double >(result));
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_WaterWatch_ValidateCoordinates ( SEXP longitude, SEXP latitude, SEXP s_swig_copy)
{
  {
    Pair< double,double > result;
    double arg1 ;
    double arg2 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    arg1 = static_cast< double >(REAL(longitude)[0]);
    arg2 = static_cast< double >(REAL(latitude)[0]);
    result = WaterWatch::ValidateCoordinates(arg1,arg2);
    r_ans = SWIG_R_NewPointerObj((new Pair< double,double >(result)), SWIGTYPE_p_PairT_double_double_t, SWIG_POINTER_OWN |  0 );
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_WaterWatch_Encode_2D_to_1D ( SEXP x, SEXP y, SEXP H, SEXP s_swig_copy)
{
  {
    double result;
    double arg1 ;
    double arg2 ;
    double arg3 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    arg1 = static_cast< double >(REAL(x)[0]);
    arg2 = static_cast< double >(REAL(y)[0]);
    arg3 = static_cast< double >(REAL(H)[0]);
    result = (double)WaterWatch::Encode_2D_to_1D(arg1,arg2,arg3);
    r_ans = SWIG_From_double(static_cast< double >(result));
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_WaterWatch_Decode_1D_to_2D ( SEXP l, SEXP H, SEXP s_swig_copy)
{
  {
    Pair< double,double > result;
    double arg1 ;
    double arg2 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    arg1 = static_cast< double >(REAL(l)[0]);
    arg2 = static_cast< double >(REAL(H)[0]);
    result = WaterWatch::Decode_1D_to_2D(arg1,arg2);
    r_ans = SWIG_R_NewPointerObj((new Pair< double,double >(result)), SWIGTYPE_p_PairT_double_double_t, SWIG_POINTER_OWN |  0 );
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_WaterWatch_PredictNext ( SEXP data, SEXP nextN, SEXP s_swig_copy)
{
  {
    std::vector< float,std::allocator< float > > result;
    std::vector< double,std::allocator< double > > *arg1 = 0 ;
    int arg2 ;
    int res1 = SWIG_OLDOBJ ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    {
      std::vector<double> *ptr = (std::vector<double> *)0;
      res1 = swig::asptr(data, &ptr);
      if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WaterWatch_PredictNext" "', argument " "1"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
      }
      if (!ptr) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WaterWatch_PredictNext" "', argument " "1"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
      }
      arg1 = ptr;
    }
    arg2 = static_cast< int >(INTEGER(nextN)[0]);
    result = WaterWatch::PredictNext((std::vector< double,std::allocator< double > > const &)*arg1,arg2);
    r_ans = swig::from(static_cast< std::vector<float> >(result));
    if (SWIG_IsNewObj(res1)) delete arg1;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
    if (SWIG_IsNewObj(res1)) delete arg1;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_WaterWatch_getCurrentTime ( SEXP s_swig_copy)
{
  {
    cweeDateTime result;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    result = WaterWatch::getCurrentTime();
    r_ans = SWIG_R_NewPointerObj((new cweeDateTime(result)), SWIGTYPE_p_cweeDateTime, SWIG_POINTER_OWN |  0 );
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_WaterWatch_RandomInt ( SEXP min, SEXP max, SEXP s_swig_copy)
{
  {
    int result;
    int arg1 ;
    int arg2 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    arg1 = static_cast< int >(INTEGER(min)[0]);
    arg2 = static_cast< int >(INTEGER(max)[0]);
    result = (int)WaterWatch::RandomInt(arg1,arg2);
    r_ans = Rf_ScalarInteger(result);
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_WaterWatch_RandomFloat ( SEXP min, SEXP max, SEXP s_swig_copy)
{
  {
    float result;
    float arg1 ;
    float arg2 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    arg1 = static_cast< float >(REAL(min)[0]);
    arg2 = static_cast< float >(REAL(max)[0]);
    result = (float)WaterWatch::RandomFloat(arg1,arg2);
    r_ans = SWIG_From_float(static_cast< float >(result));
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_WaterWatch_GetBestMatch ( SEXP input, SEXP options, SEXP s_swig_copy)
{
  {
    std::string result;
    std::string *arg1 = 0 ;
    std::vector< std::string,std::allocator< std::string > > *arg2 = 0 ;
    int res1 = SWIG_OLDOBJ ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    {
      std::string *ptr = (std::string *)0;
      res1 = SWIG_AsPtr_std_string(input, &ptr);
      if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WaterWatch_GetBestMatch" "', argument " "1"" of type '" "std::string const &""'"); 
      }
      if (!ptr) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WaterWatch_GetBestMatch" "', argument " "1"" of type '" "std::string const &""'"); 
      }
      arg1 = ptr;
    }
    res2 = SWIG_R_ConvertPtr(options, &argp2, SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "WaterWatch_GetBestMatch" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WaterWatch_GetBestMatch" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    arg2 = reinterpret_cast< std::vector< std::string,std::allocator< std::string > > * >(argp2);
    result = WaterWatch::GetBestMatch((std::string const &)*arg1,(std::vector< std::string,std::allocator< std::string > > const &)*arg2);
    r_ans = SWIG_From_std_string(static_cast< std::string >(result));
    if (SWIG_IsNewObj(res1)) delete arg1;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
    if (SWIG_IsNewObj(res1)) delete arg1;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_WaterWatch_GetNumMultithreadingCores ( SEXP s_swig_copy)
{
  {
    int result;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    result = (int)WaterWatch::GetNumMultithreadingCores();
    r_ans = Rf_ScalarInteger(result);
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_WaterWatch_GetNumLogicalCoresOnMachine ( SEXP s_swig_copy)
{
  {
    int result;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    result = (int)WaterWatch::GetNumLogicalCoresOnMachine();
    r_ans = Rf_ScalarInteger(result);
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_WaterWatch_GetNumPhysicalCoresOnMachine ( SEXP s_swig_copy)
{
  {
    int result;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    result = (int)WaterWatch::GetNumPhysicalCoresOnMachine();
    r_ans = Rf_ScalarInteger(result);
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_WaterWatch_GetPercentMemoryUsedOfMachine ( SEXP s_swig_copy)
{
  {
    float result;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    result = (float)WaterWatch::GetPercentMemoryUsedOfMachine();
    r_ans = SWIG_From_float(static_cast< float >(result));
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_WaterWatch_GetPercentCpuUsedOfMachine ( SEXP s_swig_copy)
{
  {
    float result;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    result = (float)WaterWatch::GetPercentCpuUsedOfMachine();
    r_ans = SWIG_From_float(static_cast< float >(result));
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_WaterWatch_DoScript ( SEXP command, SEXP s_swig_copy)
{
  {
    Awaiter result;
    std::string arg1 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string(command, &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "WaterWatch_DoScript" "', argument " "1"" of type '" "std::string""'"); 
      }
      arg1 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    result = WaterWatch::DoScript(SWIG_STD_MOVE(arg1));
    r_ans = SWIG_R_NewPointerObj((new Awaiter(result)), SWIGTYPE_p_Awaiter, SWIG_POINTER_OWN |  0 );
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_WaterWatch_DoScriptImmediately ( SEXP command, SEXP s_swig_copy)
{
  {
    std::string result;
    std::string arg1 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string(command, &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "WaterWatch_DoScriptImmediately" "', argument " "1"" of type '" "std::string""'"); 
      }
      arg1 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    result = WaterWatch::DoScriptImmediately(SWIG_STD_MOVE(arg1));
    r_ans = SWIG_From_std_string(static_cast< std::string >(result));
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_WaterWatch_AddToLog ( SEXP filePath, SEXP content)
{
  {
    std::string arg1 ;
    std::string arg2 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string(filePath, &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "WaterWatch_AddToLog" "', argument " "1"" of type '" "std::string""'"); 
      }
      arg1 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string(content, &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "WaterWatch_AddToLog" "', argument " "2"" of type '" "std::string""'"); 
      }
      arg2 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    WaterWatch::AddToLog(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2));
    r_ans = R_NilValue;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_WaterWatch_GetNanosecondsSinceStart ( SEXP s_swig_copy)
{
  {
    double result;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    result = (double)WaterWatch::GetNanosecondsSinceStart();
    r_ans = SWIG_From_double(static_cast< double >(result));
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_new_WaterWatch ( )
{
  {
    WaterWatch *result = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    result = (WaterWatch *)new WaterWatch();
    r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_WaterWatch, SWIG_POINTER_OWN |  0 );
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_delete_WaterWatch ( SEXP self)
{
  {
    WaterWatch *arg1 = (WaterWatch *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_WaterWatch, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_WaterWatch" "', argument " "1"" of type '" "WaterWatch *""'"); 
    }
    arg1 = reinterpret_cast< WaterWatch * >(argp1);
    delete arg1;
    r_ans = R_NilValue;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    R_ClearExternalPtr(self);
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_vector_string___nonzero__ ( SEXP self, SEXP s_swig_copy)
{
  {
    bool result;
    std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_string___nonzero__" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
    result = (bool)std_vector_Sl_std_string_Sg____nonzero__((std::vector< std::string > const *)arg1);
    r_ans = Rf_ScalarLogical(result);
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_vector_string___len__ ( SEXP self, SEXP s_swig_copy)
{
  {
    std::vector< std::string >::size_type result;
    std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_string___len__" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
    result = std_vector_Sl_std_string_Sg____len__((std::vector< std::string > const *)arg1);
    r_ans = SWIG_From_int(static_cast< int >(result));
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_vector_string_pop ( SEXP self, SEXP s_swig_copy)
{
  {
    std::vector< std::string >::value_type result;
    std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_string_pop" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
    try {
      result = std_vector_Sl_std_string_Sg__pop(arg1);
    } catch(std::out_of_range &_e) {
      SWIG_R_Raise(SWIG_R_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))), SWIGTYPE_p_std__out_of_range, SWIG_POINTER_OWN), "C/C++ exception of type " "std::out_of_range"); return R_NilValue;
    }
    r_ans = SWIG_From_std_string(static_cast< std::string >(result));
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_vector_string___getslice__ ( SEXP self, SEXP i, SEXP j)
{
  {
    std::vector< std::string,std::allocator< std::string > > *result = 0 ;
    std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
    std::vector< std::string >::difference_type arg2 ;
    std::vector< std::string >::difference_type arg3 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int val3 ;
    int ecode3 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_string___getslice__" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
    ecode2 = SWIG_AsVal_int(i, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_string___getslice__" "', argument " "2"" of type '" "std::vector< std::string >::difference_type""'");
    } 
    arg2 = static_cast< std::vector< std::string >::difference_type >(val2);
    ecode3 = SWIG_AsVal_int(j, &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_string___getslice__" "', argument " "3"" of type '" "std::vector< std::string >::difference_type""'");
    } 
    arg3 = static_cast< std::vector< std::string >::difference_type >(val3);
    try {
      result = (std::vector< std::string,std::allocator< std::string > > *)std_vector_Sl_std_string_Sg____getslice__(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
    } catch(std::out_of_range &_e) {
      SWIG_R_Raise(SWIG_R_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))), SWIGTYPE_p_std__out_of_range, SWIG_POINTER_OWN), "C/C++ exception of type " "std::out_of_range"); return R_NilValue;
    }
    r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, SWIG_POINTER_OWN |  0 );
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_vector_string___setslice__ ( SEXP self, SEXP i, SEXP j, SEXP v)
{
  {
    std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
    std::vector< std::string >::difference_type arg2 ;
    std::vector< std::string >::difference_type arg3 ;
    std::vector< std::string,std::allocator< std::string > > *arg4 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int val3 ;
    int ecode3 = 0 ;
    int res4 = SWIG_OLDOBJ ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_string___setslice__" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
    ecode2 = SWIG_AsVal_int(i, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_string___setslice__" "', argument " "2"" of type '" "std::vector< std::string >::difference_type""'");
    } 
    arg2 = static_cast< std::vector< std::string >::difference_type >(val2);
    ecode3 = SWIG_AsVal_int(j, &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_string___setslice__" "', argument " "3"" of type '" "std::vector< std::string >::difference_type""'");
    } 
    arg3 = static_cast< std::vector< std::string >::difference_type >(val3);
    {
      std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
      res4 = swig::asptr(v, &ptr);
      if (!SWIG_IsOK(res4)) {
        SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "vector_string___setslice__" "', argument " "4"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
      }
      if (!ptr) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_string___setslice__" "', argument " "4"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
      }
      arg4 = ptr;
    }
    try {
      std_vector_Sl_std_string_Sg____setslice__(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),(std::vector< std::string,std::allocator< std::string > > const &)*arg4);
    } catch(std::out_of_range &_e) {
      SWIG_R_Raise(SWIG_R_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))), SWIGTYPE_p_std__out_of_range, SWIG_POINTER_OWN), "C/C++ exception of type " "std::out_of_range"); return R_NilValue;
    } catch(std::invalid_argument &_e) {
      SWIG_R_Raise(SWIG_R_NewPointerObj((new std::invalid_argument(static_cast< const std::invalid_argument& >(_e))), SWIGTYPE_p_std__invalid_argument, SWIG_POINTER_OWN), "C/C++ exception of type " "std::invalid_argument"); return R_NilValue;
    }
    r_ans = R_NilValue;
    if (SWIG_IsNewObj(res4)) delete arg4;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
    if (SWIG_IsNewObj(res4)) delete arg4;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_vector_string___delslice__ ( SEXP self, SEXP i, SEXP j)
{
  {
    std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
    std::vector< std::string >::difference_type arg2 ;
    std::vector< std::string >::difference_type arg3 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int val3 ;
    int ecode3 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_string___delslice__" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
    ecode2 = SWIG_AsVal_int(i, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_string___delslice__" "', argument " "2"" of type '" "std::vector< std::string >::difference_type""'");
    } 
    arg2 = static_cast< std::vector< std::string >::difference_type >(val2);
    ecode3 = SWIG_AsVal_int(j, &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_string___delslice__" "', argument " "3"" of type '" "std::vector< std::string >::difference_type""'");
    } 
    arg3 = static_cast< std::vector< std::string >::difference_type >(val3);
    try {
      std_vector_Sl_std_string_Sg____delslice__(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
    } catch(std::out_of_range &_e) {
      SWIG_R_Raise(SWIG_R_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))), SWIGTYPE_p_std__out_of_range, SWIG_POINTER_OWN), "C/C++ exception of type " "std::out_of_range"); return R_NilValue;
    }
    r_ans = R_NilValue;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_vector_string___delitem__ ( SEXP self, SEXP i)
{
  {
    std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
    std::vector< std::string >::difference_type arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_string___delitem__" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
    ecode2 = SWIG_AsVal_int(i, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_string___delitem__" "', argument " "2"" of type '" "std::vector< std::string >::difference_type""'");
    } 
    arg2 = static_cast< std::vector< std::string >::difference_type >(val2);
    try {
      std_vector_Sl_std_string_Sg____delitem__(arg1,SWIG_STD_MOVE(arg2));
    } catch(std::out_of_range &_e) {
      SWIG_R_Raise(SWIG_R_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))), SWIGTYPE_p_std__out_of_range, SWIG_POINTER_OWN), "C/C++ exception of type " "std::out_of_range"); return R_NilValue;
    }
    r_ans = R_NilValue;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_vector_string___getitem__ ( SEXP self, SEXP i, SEXP s_swig_copy)
{
  {
    std::vector< std::string >::value_type *result = 0 ;
    std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
    std::vector< std::string >::difference_type arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_string___getitem__" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
    ecode2 = SWIG_AsVal_int(i, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_string___getitem__" "', argument " "2"" of type '" "std::vector< std::string >::difference_type""'");
    } 
    arg2 = static_cast< std::vector< std::string >::difference_type >(val2);
    try {
      result = (std::vector< std::string >::value_type *) &std_vector_Sl_std_string_Sg____getitem__((std::vector< std::string > const *)arg1,SWIG_STD_MOVE(arg2));
    } catch(std::out_of_range &_e) {
      SWIG_R_Raise(SWIG_R_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))), SWIGTYPE_p_std__out_of_range, SWIG_POINTER_OWN), "C/C++ exception of type " "std::out_of_range"); return R_NilValue;
    }
    r_ans = SWIG_From_std_string(static_cast< std::string >(*result));
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_vector_string___setitem__ ( SEXP self, SEXP i, SEXP x)
{
  {
    std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
    std::vector< std::string >::difference_type arg2 ;
    std::vector< std::string >::value_type *arg3 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int res3 = SWIG_OLDOBJ ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_string___setitem__" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
    ecode2 = SWIG_AsVal_int(i, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_string___setitem__" "', argument " "2"" of type '" "std::vector< std::string >::difference_type""'");
    } 
    arg2 = static_cast< std::vector< std::string >::difference_type >(val2);
    {
      std::string *ptr = (std::string *)0;
      res3 = SWIG_AsPtr_std_string(x, &ptr);
      if (!SWIG_IsOK(res3)) {
        SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vector_string___setitem__" "', argument " "3"" of type '" "std::vector< std::string >::value_type const &""'"); 
      }
      if (!ptr) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_string___setitem__" "', argument " "3"" of type '" "std::vector< std::string >::value_type const &""'"); 
      }
      arg3 = ptr;
    }
    try {
      std_vector_Sl_std_string_Sg____setitem__(arg1,SWIG_STD_MOVE(arg2),(std::string const &)*arg3);
    } catch(std::out_of_range &_e) {
      SWIG_R_Raise(SWIG_R_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))), SWIGTYPE_p_std__out_of_range, SWIG_POINTER_OWN), "C/C++ exception of type " "std::out_of_range"); return R_NilValue;
    }
    r_ans = R_NilValue;
    if (SWIG_IsNewObj(res3)) delete arg3;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
    if (SWIG_IsNewObj(res3)) delete arg3;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_vector_string_append ( SEXP self, SEXP x)
{
  {
    std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
    std::vector< std::string >::value_type *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 = SWIG_OLDOBJ ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_string_append" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
    {
      std::string *ptr = (std::string *)0;
      res2 = SWIG_AsPtr_std_string(x, &ptr);
      if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vector_string_append" "', argument " "2"" of type '" "std::vector< std::string >::value_type const &""'"); 
      }
      if (!ptr) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_string_append" "', argument " "2"" of type '" "std::vector< std::string >::value_type const &""'"); 
      }
      arg2 = ptr;
    }
    std_vector_Sl_std_string_Sg__append(arg1,(std::string const &)*arg2);
    r_ans = R_NilValue;
    if (SWIG_IsNewObj(res2)) delete arg2;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
    if (SWIG_IsNewObj(res2)) delete arg2;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_new_vector_string__SWIG_0 ( )
{
  {
    std::vector< std::string > *result = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    result = (std::vector< std::string > *)new std::vector< std::string >();
    r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, SWIG_POINTER_OWN |  0 );
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_new_vector_string__SWIG_1 ( SEXP other)
{
  {
    std::vector< std::string > *result = 0 ;
    std::vector< std::string > *arg1 = 0 ;
    int res1 = SWIG_OLDOBJ ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    {
      std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
      res1 = swig::asptr(other, &ptr);
      if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_vector_string" "', argument " "1"" of type '" "std::vector< std::string > const &""'"); 
      }
      if (!ptr) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_vector_string" "', argument " "1"" of type '" "std::vector< std::string > const &""'"); 
      }
      arg1 = ptr;
    }
    result = (std::vector< std::string > *)new std::vector< std::string >((std::vector< std::string > const &)*arg1);
    r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, SWIG_POINTER_OWN |  0 );
    if (SWIG_IsNewObj(res1)) delete arg1;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
    if (SWIG_IsNewObj(res1)) delete arg1;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_vector_string_empty ( SEXP self, SEXP s_swig_copy)
{
  {
    bool result;
    std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_string_empty" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
    result = (bool)((std::vector< std::string > const *)arg1)->empty();
    r_ans = Rf_ScalarLogical(result);
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_vector_string_size ( SEXP self, SEXP s_swig_copy)
{
  {
    std::vector< std::string >::size_type result;
    std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_string_size" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
    result = ((std::vector< std::string > const *)arg1)->size();
    r_ans = SWIG_From_int(static_cast< int >(result));
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_vector_string_swap ( SEXP self, SEXP v)
{
  {
    std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
    std::vector< std::string > *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_string_swap" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
    res2 = SWIG_R_ConvertPtr(v, &argp2, SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vector_string_swap" "', argument " "2"" of type '" "std::vector< std::string > &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_string_swap" "', argument " "2"" of type '" "std::vector< std::string > &""'"); 
    }
    arg2 = reinterpret_cast< std::vector< std::string > * >(argp2);
    (arg1)->swap(*arg2);
    r_ans = R_NilValue;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_vector_string_clear ( SEXP self)
{
  {
    std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_string_clear" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
    (arg1)->clear();
    r_ans = R_NilValue;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_vector_string_get_allocator ( SEXP self, SEXP s_swig_copy)
{
  {
    SwigValueWrapper< std::allocator< std::string > > result;
    std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_string_get_allocator" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
    result = ((std::vector< std::string > const *)arg1)->get_allocator();
    r_ans = SWIG_R_NewPointerObj((new std::vector< std::string >::allocator_type(result)), SWIGTYPE_p_std__allocatorT_std__string_t, SWIG_POINTER_OWN |  0 );
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_new_vector_string__SWIG_2 ( SEXP size)
{
  {
    std::vector< std::string > *result = 0 ;
    std::vector< std::string >::size_type arg1 ;
    int val1 ;
    int ecode1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    ecode1 = SWIG_AsVal_int(size, &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_vector_string" "', argument " "1"" of type '" "std::vector< std::string >::size_type""'");
    } 
    arg1 = static_cast< std::vector< std::string >::size_type >(val1);
    result = (std::vector< std::string > *)new std::vector< std::string >(arg1);
    r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, SWIG_POINTER_OWN |  0 );
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_vector_string_pop_back ( SEXP self)
{
  {
    std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_string_pop_back" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
    (arg1)->pop_back();
    r_ans = R_NilValue;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_vector_string_resize__SWIG_0 ( SEXP self, SEXP new_size)
{
  {
    std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
    std::vector< std::string >::size_type arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_string_resize" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
    ecode2 = SWIG_AsVal_int(new_size, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_string_resize" "', argument " "2"" of type '" "std::vector< std::string >::size_type""'");
    } 
    arg2 = static_cast< std::vector< std::string >::size_type >(val2);
    (arg1)->resize(arg2);
    r_ans = R_NilValue;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_new_vector_string__SWIG_3 ( SEXP size, SEXP value)
{
  {
    std::vector< std::string > *result = 0 ;
    std::vector< std::string >::size_type arg1 ;
    std::vector< std::string >::value_type *arg2 = 0 ;
    int val1 ;
    int ecode1 = 0 ;
    int res2 = SWIG_OLDOBJ ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    ecode1 = SWIG_AsVal_int(size, &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_vector_string" "', argument " "1"" of type '" "std::vector< std::string >::size_type""'");
    } 
    arg1 = static_cast< std::vector< std::string >::size_type >(val1);
    {
      std::string *ptr = (std::string *)0;
      res2 = SWIG_AsPtr_std_string(value, &ptr);
      if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_vector_string" "', argument " "2"" of type '" "std::vector< std::string >::value_type const &""'"); 
      }
      if (!ptr) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_vector_string" "', argument " "2"" of type '" "std::vector< std::string >::value_type const &""'"); 
      }
      arg2 = ptr;
    }
    result = (std::vector< std::string > *)new std::vector< std::string >(arg1,(std::vector< std::string >::value_type const &)*arg2);
    r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, SWIG_POINTER_OWN |  0 );
    if (SWIG_IsNewObj(res2)) delete arg2;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
    if (SWIG_IsNewObj(res2)) delete arg2;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_vector_string_push_back ( SEXP self, SEXP x)
{
  {
    std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
    std::vector< std::string >::value_type *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 = SWIG_OLDOBJ ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_string_push_back" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
    {
      std::string *ptr = (std::string *)0;
      res2 = SWIG_AsPtr_std_string(x, &ptr);
      if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vector_string_push_back" "', argument " "2"" of type '" "std::vector< std::string >::value_type const &""'"); 
      }
      if (!ptr) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_string_push_back" "', argument " "2"" of type '" "std::vector< std::string >::value_type const &""'"); 
      }
      arg2 = ptr;
    }
    (arg1)->push_back((std::vector< std::string >::value_type const &)*arg2);
    r_ans = R_NilValue;
    if (SWIG_IsNewObj(res2)) delete arg2;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
    if (SWIG_IsNewObj(res2)) delete arg2;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_vector_string_front ( SEXP self, SEXP s_swig_copy)
{
  {
    std::vector< std::string >::value_type *result = 0 ;
    std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_string_front" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
    result = (std::vector< std::string >::value_type *) &((std::vector< std::string > const *)arg1)->front();
    r_ans = SWIG_From_std_string(static_cast< std::string >(*result));
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_vector_string_back ( SEXP self, SEXP s_swig_copy)
{
  {
    std::vector< std::string >::value_type *result = 0 ;
    std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_string_back" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
    result = (std::vector< std::string >::value_type *) &((std::vector< std::string > const *)arg1)->back();
    r_ans = SWIG_From_std_string(static_cast< std::string >(*result));
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_vector_string_assign ( SEXP self, SEXP n, SEXP x)
{
  {
    std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
    std::vector< std::string >::size_type arg2 ;
    std::vector< std::string >::value_type *arg3 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int res3 = SWIG_OLDOBJ ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_string_assign" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
    ecode2 = SWIG_AsVal_int(n, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_string_assign" "', argument " "2"" of type '" "std::vector< std::string >::size_type""'");
    } 
    arg2 = static_cast< std::vector< std::string >::size_type >(val2);
    {
      std::string *ptr = (std::string *)0;
      res3 = SWIG_AsPtr_std_string(x, &ptr);
      if (!SWIG_IsOK(res3)) {
        SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vector_string_assign" "', argument " "3"" of type '" "std::vector< std::string >::value_type const &""'"); 
      }
      if (!ptr) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_string_assign" "', argument " "3"" of type '" "std::vector< std::string >::value_type const &""'"); 
      }
      arg3 = ptr;
    }
    (arg1)->assign(arg2,(std::vector< std::string >::value_type const &)*arg3);
    r_ans = R_NilValue;
    if (SWIG_IsNewObj(res3)) delete arg3;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
    if (SWIG_IsNewObj(res3)) delete arg3;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_vector_string_resize__SWIG_1 ( SEXP self, SEXP new_size, SEXP x)
{
  {
    std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
    std::vector< std::string >::size_type arg2 ;
    std::vector< std::string >::value_type *arg3 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int res3 = SWIG_OLDOBJ ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_string_resize" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
    ecode2 = SWIG_AsVal_int(new_size, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_string_resize" "', argument " "2"" of type '" "std::vector< std::string >::size_type""'");
    } 
    arg2 = static_cast< std::vector< std::string >::size_type >(val2);
    {
      std::string *ptr = (std::string *)0;
      res3 = SWIG_AsPtr_std_string(x, &ptr);
      if (!SWIG_IsOK(res3)) {
        SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vector_string_resize" "', argument " "3"" of type '" "std::vector< std::string >::value_type const &""'"); 
      }
      if (!ptr) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_string_resize" "', argument " "3"" of type '" "std::vector< std::string >::value_type const &""'"); 
      }
      arg3 = ptr;
    }
    (arg1)->resize(arg2,(std::vector< std::string >::value_type const &)*arg3);
    r_ans = R_NilValue;
    if (SWIG_IsNewObj(res3)) delete arg3;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
    if (SWIG_IsNewObj(res3)) delete arg3;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_vector_string_reserve ( SEXP self, SEXP n)
{
  {
    std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
    std::vector< std::string >::size_type arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_string_reserve" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
    ecode2 = SWIG_AsVal_int(n, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_string_reserve" "', argument " "2"" of type '" "std::vector< std::string >::size_type""'");
    } 
    arg2 = static_cast< std::vector< std::string >::size_type >(val2);
    (arg1)->reserve(arg2);
    r_ans = R_NilValue;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_vector_string_capacity ( SEXP self, SEXP s_swig_copy)
{
  {
    std::vector< std::string >::size_type result;
    std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_string_capacity" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
    result = ((std::vector< std::string > const *)arg1)->capacity();
    r_ans = SWIG_From_int(static_cast< int >(result));
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_delete_vector_string ( SEXP self)
{
  {
    std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_vector_string" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
    delete arg1;
    r_ans = R_NilValue;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    R_ClearExternalPtr(self);
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_new_pair_timeseries__SWIG_0 ( )
{
  {
    Pair< cweeDateTime,float > *result = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    result = (Pair< cweeDateTime,float > *)new Pair< cweeDateTime,float >();
    r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_PairT_cweeDateTime_float_t, SWIG_POINTER_OWN |  0 );
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_new_pair_timeseries__SWIG_1 ( SEXP t1, SEXP t2)
{
  {
    Pair< cweeDateTime,float > *result = 0 ;
    cweeDateTime *arg1 = 0 ;
    float *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    float temp2 ;
    float val2 ;
    int ecode2 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(t1, &argp1, SWIGTYPE_p_cweeDateTime,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_pair_timeseries" "', argument " "1"" of type '" "cweeDateTime const &""'"); 
    }
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_pair_timeseries" "', argument " "1"" of type '" "cweeDateTime const &""'"); 
    }
    arg1 = reinterpret_cast< cweeDateTime * >(argp1);
    ecode2 = SWIG_AsVal_float(t2, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_pair_timeseries" "', argument " "2"" of type '" "float""'");
    } 
    temp2 = static_cast< float >(val2);
    arg2 = &temp2;
    result = (Pair< cweeDateTime,float > *)new Pair< cweeDateTime,float >((cweeDateTime const &)*arg1,(float const &)*arg2);
    r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_PairT_cweeDateTime_float_t, SWIG_POINTER_OWN |  0 );
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_new_pair_timeseries__SWIG_2 ( SEXP t1, SEXP t2)
{
  {
    Pair< cweeDateTime,float > *result = 0 ;
    cweeDateTime *arg1 = 0 ;
    float *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    std::unique_ptr< cweeDateTime > rvrdeleter1 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    std::unique_ptr< float > rvrdeleter2 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(t1, &argp1, SWIGTYPE_p_cweeDateTime, SWIG_POINTER_RELEASE |  0 );
    if (!SWIG_IsOK(res1)) {
      if (res1 == SWIG_ERROR_RELEASE_NOT_OWNED) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_pair_timeseries" "', cannot release ownership as memory is not owned for argument " "1"" of type '" "cweeDateTime &&""'");
      } else {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_pair_timeseries" "', argument " "1"" of type '" "cweeDateTime &&""'"); 
      }
    }
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_pair_timeseries" "', argument " "1"" of type '" "cweeDateTime &&""'"); 
    }
    arg1 = reinterpret_cast< cweeDateTime * >(argp1);
    rvrdeleter1.reset(arg1);
    res2 = SWIG_R_ConvertPtr(t2, &argp2, SWIGTYPE_p_float, SWIG_POINTER_RELEASE |  0 );
    if (!SWIG_IsOK(res2)) {
      if (res2 == SWIG_ERROR_RELEASE_NOT_OWNED) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_pair_timeseries" "', cannot release ownership as memory is not owned for argument " "2"" of type '" "float &&""'");
      } else {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_pair_timeseries" "', argument " "2"" of type '" "float &&""'"); 
      }
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_pair_timeseries" "', argument " "2"" of type '" "float &&""'"); 
    }
    arg2 = reinterpret_cast< float * >(argp2);
    rvrdeleter2.reset(arg2);
    result = (Pair< cweeDateTime,float > *)new Pair< cweeDateTime,float >((cweeDateTime &&)*arg1,(float &&)*arg2);
    r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_PairT_cweeDateTime_float_t, SWIG_POINTER_OWN |  0 );
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_new_pair_timeseries__SWIG_3 ( SEXP t)
{
  {
    Pair< cweeDateTime,float > *result = 0 ;
    std::pair< cweeDateTime,float > *arg1 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(t, &argp1, SWIGTYPE_p_std__pairT_cweeDateTime_float_t,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_pair_timeseries" "', argument " "1"" of type '" "std::pair< cweeDateTime,float > const &""'"); 
    }
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_pair_timeseries" "', argument " "1"" of type '" "std::pair< cweeDateTime,float > const &""'"); 
    }
    arg1 = reinterpret_cast< std::pair< cweeDateTime,float > * >(argp1);
    result = (Pair< cweeDateTime,float > *)new Pair< cweeDateTime,float >((std::pair< cweeDateTime,float > const &)*arg1);
    r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_PairT_cweeDateTime_float_t, SWIG_POINTER_OWN |  0 );
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_pair_timeseries_first_set ( SEXP self, SEXP s_first)
{
  {
    Pair< cweeDateTime,float > *arg1 = (Pair< cweeDateTime,float > *) 0 ;
    cweeDateTime *arg2 = (cweeDateTime *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PairT_cweeDateTime_float_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pair_timeseries_first_set" "', argument " "1"" of type '" "Pair< cweeDateTime,float > *""'"); 
    }
    arg1 = reinterpret_cast< Pair< cweeDateTime,float > * >(argp1);
    res2 = SWIG_R_ConvertPtr(s_first, &argp2, SWIGTYPE_p_cweeDateTime, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "pair_timeseries_first_set" "', argument " "2"" of type '" "cweeDateTime *""'"); 
    }
    arg2 = reinterpret_cast< cweeDateTime * >(argp2);
    if (arg1) (arg1)->first = *arg2;
    r_ans = R_NilValue;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_pair_timeseries_first_get ( SEXP self)
{
  {
    cweeDateTime *result = 0 ;
    Pair< cweeDateTime,float > *arg1 = (Pair< cweeDateTime,float > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PairT_cweeDateTime_float_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pair_timeseries_first_get" "', argument " "1"" of type '" "Pair< cweeDateTime,float > *""'"); 
    }
    arg1 = reinterpret_cast< Pair< cweeDateTime,float > * >(argp1);
    result = (cweeDateTime *)& ((arg1)->first);
    r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cweeDateTime, 0 |  0 );
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_pair_timeseries_second_set ( SEXP self, SEXP s_second)
{
  {
    Pair< cweeDateTime,float > *arg1 = (Pair< cweeDateTime,float > *) 0 ;
    float arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PairT_cweeDateTime_float_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pair_timeseries_second_set" "', argument " "1"" of type '" "Pair< cweeDateTime,float > *""'"); 
    }
    arg1 = reinterpret_cast< Pair< cweeDateTime,float > * >(argp1);
    arg2 = static_cast< float >(REAL(s_second)[0]);
    if (arg1) (arg1)->second = arg2;
    r_ans = R_NilValue;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_pair_timeseries_second_get ( SEXP self, SEXP s_swig_copy)
{
  {
    float result;
    Pair< cweeDateTime,float > *arg1 = (Pair< cweeDateTime,float > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PairT_cweeDateTime_float_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pair_timeseries_second_get" "', argument " "1"" of type '" "Pair< cweeDateTime,float > *""'"); 
    }
    arg1 = reinterpret_cast< Pair< cweeDateTime,float > * >(argp1);
    result = (float) ((arg1)->second);
    r_ans = SWIG_From_float(static_cast< float >(result));
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_delete_pair_timeseries ( SEXP self)
{
  {
    Pair< cweeDateTime,float > *arg1 = (Pair< cweeDateTime,float > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PairT_cweeDateTime_float_t, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_pair_timeseries" "', argument " "1"" of type '" "Pair< cweeDateTime,float > *""'"); 
    }
    arg1 = reinterpret_cast< Pair< cweeDateTime,float > * >(argp1);
    delete arg1;
    r_ans = R_NilValue;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    R_ClearExternalPtr(self);
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_new_pair_string_vector_string__SWIG_0 ( )
{
  {
    Pair< std::string,std::vector< std::string > > *result = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    result = (Pair< std::string,std::vector< std::string > > *)new Pair< std::string,std::vector< std::string > >();
    r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_PairT_std__string_std__vectorT_std__string_std__allocatorT_std__string_t_t_t, SWIG_POINTER_OWN |  0 );
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_new_pair_string_vector_string__SWIG_1 ( SEXP t1, SEXP t2)
{
  {
    Pair< std::string,std::vector< std::string > > *result = 0 ;
    std::string *arg1 = 0 ;
    std::vector< std::string,std::allocator< std::string > > *arg2 = 0 ;
    int res1 = SWIG_OLDOBJ ;
    int res2 = SWIG_OLDOBJ ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    {
      std::string *ptr = (std::string *)0;
      res1 = SWIG_AsPtr_std_string(t1, &ptr);
      if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_pair_string_vector_string" "', argument " "1"" of type '" "std::string const &""'"); 
      }
      if (!ptr) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_pair_string_vector_string" "', argument " "1"" of type '" "std::string const &""'"); 
      }
      arg1 = ptr;
    }
    {
      std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
      res2 = swig::asptr(t2, &ptr);
      if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_pair_string_vector_string" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
      }
      if (!ptr) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_pair_string_vector_string" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
      }
      arg2 = ptr;
    }
    result = (Pair< std::string,std::vector< std::string > > *)new Pair< std::string,std::vector< std::string > >((std::string const &)*arg1,(std::vector< std::string,std::allocator< std::string > > const &)*arg2);
    r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_PairT_std__string_std__vectorT_std__string_std__allocatorT_std__string_t_t_t, SWIG_POINTER_OWN |  0 );
    if (SWIG_IsNewObj(res1)) delete arg1;
    if (SWIG_IsNewObj(res2)) delete arg2;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
    if (SWIG_IsNewObj(res1)) delete arg1;
    if (SWIG_IsNewObj(res2)) delete arg2;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_new_pair_string_vector_string__SWIG_2 ( SEXP t1, SEXP t2)
{
  {
    Pair< std::string,std::vector< std::string > > *result = 0 ;
    std::string *arg1 = 0 ;
    std::vector< std::string,std::allocator< std::string > > *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    std::unique_ptr< std::string > rvrdeleter1 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    std::unique_ptr< std::vector< std::string,std::allocator< std::string > > > rvrdeleter2 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(t1, &argp1, SWIGTYPE_p_std__string, SWIG_POINTER_RELEASE |  0 );
    if (!SWIG_IsOK(res1)) {
      if (res1 == SWIG_ERROR_RELEASE_NOT_OWNED) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_pair_string_vector_string" "', cannot release ownership as memory is not owned for argument " "1"" of type '" "std::string &&""'");
      } else {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_pair_string_vector_string" "', argument " "1"" of type '" "std::string &&""'"); 
      }
    }
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_pair_string_vector_string" "', argument " "1"" of type '" "std::string &&""'"); 
    }
    arg1 = reinterpret_cast< std::string * >(argp1);
    rvrdeleter1.reset(arg1);
    res2 = SWIG_R_ConvertPtr(t2, &argp2, SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, SWIG_POINTER_RELEASE |  0 );
    if (!SWIG_IsOK(res2)) {
      if (res2 == SWIG_ERROR_RELEASE_NOT_OWNED) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_pair_string_vector_string" "', cannot release ownership as memory is not owned for argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > &&""'");
      } else {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_pair_string_vector_string" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > &&""'"); 
      }
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_pair_string_vector_string" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > &&""'"); 
    }
    arg2 = reinterpret_cast< std::vector< std::string,std::allocator< std::string > > * >(argp2);
    rvrdeleter2.reset(arg2);
    result = (Pair< std::string,std::vector< std::string > > *)new Pair< std::string,std::vector< std::string > >((std::string &&)*arg1,(std::vector< std::string,std::allocator< std::string > > &&)*arg2);
    r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_PairT_std__string_std__vectorT_std__string_std__allocatorT_std__string_t_t_t, SWIG_POINTER_OWN |  0 );
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_new_pair_string_vector_string__SWIG_3 ( SEXP t)
{
  {
    Pair< std::string,std::vector< std::string > > *result = 0 ;
    std::pair< std::string,std::vector< std::string,std::allocator< std::string > > > *arg1 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(t, &argp1, SWIGTYPE_p_std__pairT_std__string_std__vectorT_std__string_std__allocatorT_std__string_t_t_t,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_pair_string_vector_string" "', argument " "1"" of type '" "std::pair< std::string,std::vector< std::string,std::allocator< std::string > > > const &""'"); 
    }
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_pair_string_vector_string" "', argument " "1"" of type '" "std::pair< std::string,std::vector< std::string,std::allocator< std::string > > > const &""'"); 
    }
    arg1 = reinterpret_cast< std::pair< std::string,std::vector< std::string,std::allocator< std::string > > > * >(argp1);
    result = (Pair< std::string,std::vector< std::string > > *)new Pair< std::string,std::vector< std::string > >((std::pair< std::string,std::vector< std::string,std::allocator< std::string > > > const &)*arg1);
    r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_PairT_std__string_std__vectorT_std__string_std__allocatorT_std__string_t_t_t, SWIG_POINTER_OWN |  0 );
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_pair_string_vector_string_first_set ( SEXP self, SEXP s_first)
{
  {
    Pair< std::string,std::vector< std::string > > *arg1 = (Pair< std::string,std::vector< std::string > > *) 0 ;
    std::string *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 = SWIG_OLDOBJ ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PairT_std__string_std__vectorT_std__string_std__allocatorT_std__string_t_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pair_string_vector_string_first_set" "', argument " "1"" of type '" "Pair< std::string,std::vector< std::string > > *""'"); 
    }
    arg1 = reinterpret_cast< Pair< std::string,std::vector< std::string > > * >(argp1);
    {
      std::string *ptr = (std::string *)0;
      res2 = SWIG_AsPtr_std_string(s_first, &ptr);
      if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "pair_string_vector_string_first_set" "', argument " "2"" of type '" "std::string const &""'"); 
      }
      if (!ptr) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "pair_string_vector_string_first_set" "', argument " "2"" of type '" "std::string const &""'"); 
      }
      arg2 = ptr;
    }
    if (arg1) (arg1)->first = *arg2;
    r_ans = R_NilValue;
    if (SWIG_IsNewObj(res2)) delete arg2;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
    if (SWIG_IsNewObj(res2)) delete arg2;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_pair_string_vector_string_first_get ( SEXP self, SEXP s_swig_copy)
{
  {
    std::string *result = 0 ;
    Pair< std::string,std::vector< std::string > > *arg1 = (Pair< std::string,std::vector< std::string > > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PairT_std__string_std__vectorT_std__string_std__allocatorT_std__string_t_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pair_string_vector_string_first_get" "', argument " "1"" of type '" "Pair< std::string,std::vector< std::string > > *""'"); 
    }
    arg1 = reinterpret_cast< Pair< std::string,std::vector< std::string > > * >(argp1);
    result = (std::string *) & ((arg1)->first);
    r_ans = SWIG_From_std_string(static_cast< std::string >(*result));
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_pair_string_vector_string_second_set ( SEXP self, SEXP s_second)
{
  {
    Pair< std::string,std::vector< std::string > > *arg1 = (Pair< std::string,std::vector< std::string > > *) 0 ;
    std::vector< std::string,std::allocator< std::string > > *arg2 = (std::vector< std::string,std::allocator< std::string > > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PairT_std__string_std__vectorT_std__string_std__allocatorT_std__string_t_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pair_string_vector_string_second_set" "', argument " "1"" of type '" "Pair< std::string,std::vector< std::string > > *""'"); 
    }
    arg1 = reinterpret_cast< Pair< std::string,std::vector< std::string > > * >(argp1);
    res2 = SWIG_R_ConvertPtr(s_second, &argp2, SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "pair_string_vector_string_second_set" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > *""'"); 
    }
    arg2 = reinterpret_cast< std::vector< std::string,std::allocator< std::string > > * >(argp2);
    if (arg1) (arg1)->second = *arg2;
    r_ans = R_NilValue;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_pair_string_vector_string_second_get ( SEXP self)
{
  {
    std::vector< std::string,std::allocator< std::string > > *result = 0 ;
    Pair< std::string,std::vector< std::string > > *arg1 = (Pair< std::string,std::vector< std::string > > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PairT_std__string_std__vectorT_std__string_std__allocatorT_std__string_t_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pair_string_vector_string_second_get" "', argument " "1"" of type '" "Pair< std::string,std::vector< std::string > > *""'"); 
    }
    arg1 = reinterpret_cast< Pair< std::string,std::vector< std::string > > * >(argp1);
    result = (std::vector< std::string,std::allocator< std::string > > *)& ((arg1)->second);
    r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_delete_pair_string_vector_string ( SEXP self)
{
  {
    Pair< std::string,std::vector< std::string > > *arg1 = (Pair< std::string,std::vector< std::string > > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PairT_std__string_std__vectorT_std__string_std__allocatorT_std__string_t_t_t, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_pair_string_vector_string" "', argument " "1"" of type '" "Pair< std::string,std::vector< std::string > > *""'"); 
    }
    arg1 = reinterpret_cast< Pair< std::string,std::vector< std::string > > * >(argp1);
    delete arg1;
    r_ans = R_NilValue;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    R_ClearExternalPtr(self);
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_new_pair_int_pair_string_vector_string__SWIG_0 ( )
{
  {
    Pair< int,Pair< std::string,std::vector< std::string > > > *result = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    result = (Pair< int,Pair< std::string,std::vector< std::string > > > *)new Pair< int,Pair< std::string,std::vector< std::string > > >();
    r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_PairT_int_PairT_std__string_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t, SWIG_POINTER_OWN |  0 );
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_new_pair_int_pair_string_vector_string__SWIG_1 ( SEXP t1, SEXP t2)
{
  {
    Pair< int,Pair< std::string,std::vector< std::string > > > *result = 0 ;
    int *arg1 = 0 ;
    Pair< std::string,std::vector< std::string,std::allocator< std::string > > > *arg2 = 0 ;
    int temp1 ;
    int val1 ;
    int ecode1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    ecode1 = SWIG_AsVal_int(t1, &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_pair_int_pair_string_vector_string" "', argument " "1"" of type '" "int""'");
    } 
    temp1 = static_cast< int >(val1);
    arg1 = &temp1;
    res2 = SWIG_R_ConvertPtr(t2, &argp2, SWIGTYPE_p_PairT_std__string_std__vectorT_std__string_std__allocatorT_std__string_t_t_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_pair_int_pair_string_vector_string" "', argument " "2"" of type '" "Pair< std::string,std::vector< std::string,std::allocator< std::string > > > const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_pair_int_pair_string_vector_string" "', argument " "2"" of type '" "Pair< std::string,std::vector< std::string,std::allocator< std::string > > > const &""'"); 
    }
    arg2 = reinterpret_cast< Pair< std::string,std::vector< std::string,std::allocator< std::string > > > * >(argp2);
    result = (Pair< int,Pair< std::string,std::vector< std::string > > > *)new Pair< int,Pair< std::string,std::vector< std::string > > >((int const &)*arg1,(Pair< std::string,std::vector< std::string,std::allocator< std::string > > > const &)*arg2);
    r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_PairT_int_PairT_std__string_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t, SWIG_POINTER_OWN |  0 );
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_new_pair_int_pair_string_vector_string__SWIG_2 ( SEXP t1, SEXP t2)
{
  {
    Pair< int,Pair< std::string,std::vector< std::string > > > *result = 0 ;
    int *arg1 = 0 ;
    Pair< std::string,std::vector< std::string,std::allocator< std::string > > > *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    std::unique_ptr< int > rvrdeleter1 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    std::unique_ptr< Pair< std::string,std::vector< std::string,std::allocator< std::string > > > > rvrdeleter2 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(t1, &argp1, SWIGTYPE_p_int, SWIG_POINTER_RELEASE |  0 );
    if (!SWIG_IsOK(res1)) {
      if (res1 == SWIG_ERROR_RELEASE_NOT_OWNED) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_pair_int_pair_string_vector_string" "', cannot release ownership as memory is not owned for argument " "1"" of type '" "int &&""'");
      } else {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_pair_int_pair_string_vector_string" "', argument " "1"" of type '" "int &&""'"); 
      }
    }
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_pair_int_pair_string_vector_string" "', argument " "1"" of type '" "int &&""'"); 
    }
    arg1 = reinterpret_cast< int * >(argp1);
    rvrdeleter1.reset(arg1);
    res2 = SWIG_R_ConvertPtr(t2, &argp2, SWIGTYPE_p_PairT_std__string_std__vectorT_std__string_std__allocatorT_std__string_t_t_t, SWIG_POINTER_RELEASE |  0 );
    if (!SWIG_IsOK(res2)) {
      if (res2 == SWIG_ERROR_RELEASE_NOT_OWNED) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_pair_int_pair_string_vector_string" "', cannot release ownership as memory is not owned for argument " "2"" of type '" "Pair< std::string,std::vector< std::string,std::allocator< std::string > > > &&""'");
      } else {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_pair_int_pair_string_vector_string" "', argument " "2"" of type '" "Pair< std::string,std::vector< std::string,std::allocator< std::string > > > &&""'"); 
      }
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_pair_int_pair_string_vector_string" "', argument " "2"" of type '" "Pair< std::string,std::vector< std::string,std::allocator< std::string > > > &&""'"); 
    }
    arg2 = reinterpret_cast< Pair< std::string,std::vector< std::string,std::allocator< std::string > > > * >(argp2);
    rvrdeleter2.reset(arg2);
    result = (Pair< int,Pair< std::string,std::vector< std::string > > > *)new Pair< int,Pair< std::string,std::vector< std::string > > >((int &&)*arg1,(Pair< std::string,std::vector< std::string,std::allocator< std::string > > > &&)*arg2);
    r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_PairT_int_PairT_std__string_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t, SWIG_POINTER_OWN |  0 );
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_new_pair_int_pair_string_vector_string__SWIG_3 ( SEXP t)
{
  {
    Pair< int,Pair< std::string,std::vector< std::string > > > *result = 0 ;
    std::pair< int,Pair< std::string,std::vector< std::string,std::allocator< std::string > > > > *arg1 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(t, &argp1, SWIGTYPE_p_std__pairT_int_PairT_std__string_std__vectorT_std__string_t_t_t,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_pair_int_pair_string_vector_string" "', argument " "1"" of type '" "std::pair< int,Pair< std::string,std::vector< std::string,std::allocator< std::string > > > > const &""'"); 
    }
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_pair_int_pair_string_vector_string" "', argument " "1"" of type '" "std::pair< int,Pair< std::string,std::vector< std::string,std::allocator< std::string > > > > const &""'"); 
    }
    arg1 = reinterpret_cast< std::pair< int,Pair< std::string,std::vector< std::string,std::allocator< std::string > > > > * >(argp1);
    result = (Pair< int,Pair< std::string,std::vector< std::string > > > *)new Pair< int,Pair< std::string,std::vector< std::string > > >((std::pair< int,Pair< std::string,std::vector< std::string,std::allocator< std::string > > > > const &)*arg1);
    r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_PairT_int_PairT_std__string_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t, SWIG_POINTER_OWN |  0 );
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_pair_int_pair_string_vector_string_first_set ( SEXP self, SEXP s_first)
{
  {
    Pair< int,Pair< std::string,std::vector< std::string > > > *arg1 = (Pair< int,Pair< std::string,std::vector< std::string > > > *) 0 ;
    int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PairT_int_PairT_std__string_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pair_int_pair_string_vector_string_first_set" "', argument " "1"" of type '" "Pair< int,Pair< std::string,std::vector< std::string > > > *""'"); 
    }
    arg1 = reinterpret_cast< Pair< int,Pair< std::string,std::vector< std::string > > > * >(argp1);
    arg2 = static_cast< int >(INTEGER(s_first)[0]);
    if (arg1) (arg1)->first = arg2;
    r_ans = R_NilValue;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_pair_int_pair_string_vector_string_first_get ( SEXP self, SEXP s_swig_copy)
{
  {
    int result;
    Pair< int,Pair< std::string,std::vector< std::string > > > *arg1 = (Pair< int,Pair< std::string,std::vector< std::string > > > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PairT_int_PairT_std__string_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pair_int_pair_string_vector_string_first_get" "', argument " "1"" of type '" "Pair< int,Pair< std::string,std::vector< std::string > > > *""'"); 
    }
    arg1 = reinterpret_cast< Pair< int,Pair< std::string,std::vector< std::string > > > * >(argp1);
    result = (int) ((arg1)->first);
    r_ans = Rf_ScalarInteger(result);
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_pair_int_pair_string_vector_string_second_set ( SEXP self, SEXP s_second)
{
  {
    Pair< int,Pair< std::string,std::vector< std::string > > > *arg1 = (Pair< int,Pair< std::string,std::vector< std::string > > > *) 0 ;
    Pair< std::string,std::vector< std::string,std::allocator< std::string > > > *arg2 = (Pair< std::string,std::vector< std::string,std::allocator< std::string > > > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PairT_int_PairT_std__string_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pair_int_pair_string_vector_string_second_set" "', argument " "1"" of type '" "Pair< int,Pair< std::string,std::vector< std::string > > > *""'"); 
    }
    arg1 = reinterpret_cast< Pair< int,Pair< std::string,std::vector< std::string > > > * >(argp1);
    res2 = SWIG_R_ConvertPtr(s_second, &argp2, SWIGTYPE_p_PairT_std__string_std__vectorT_std__string_std__allocatorT_std__string_t_t_t, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "pair_int_pair_string_vector_string_second_set" "', argument " "2"" of type '" "Pair< std::string,std::vector< std::string,std::allocator< std::string > > > *""'"); 
    }
    arg2 = reinterpret_cast< Pair< std::string,std::vector< std::string,std::allocator< std::string > > > * >(argp2);
    if (arg1) (arg1)->second = *arg2;
    r_ans = R_NilValue;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_pair_int_pair_string_vector_string_second_get ( SEXP self)
{
  {
    Pair< std::string,std::vector< std::string,std::allocator< std::string > > > *result = 0 ;
    Pair< int,Pair< std::string,std::vector< std::string > > > *arg1 = (Pair< int,Pair< std::string,std::vector< std::string > > > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PairT_int_PairT_std__string_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pair_int_pair_string_vector_string_second_get" "', argument " "1"" of type '" "Pair< int,Pair< std::string,std::vector< std::string > > > *""'"); 
    }
    arg1 = reinterpret_cast< Pair< int,Pair< std::string,std::vector< std::string > > > * >(argp1);
    result = (Pair< std::string,std::vector< std::string,std::allocator< std::string > > > *)& ((arg1)->second);
    r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_PairT_std__string_std__vectorT_std__string_std__allocatorT_std__string_t_t_t, 0 |  0 );
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_delete_pair_int_pair_string_vector_string ( SEXP self)
{
  {
    Pair< int,Pair< std::string,std::vector< std::string > > > *arg1 = (Pair< int,Pair< std::string,std::vector< std::string > > > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PairT_int_PairT_std__string_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_pair_int_pair_string_vector_string" "', argument " "1"" of type '" "Pair< int,Pair< std::string,std::vector< std::string > > > *""'"); 
    }
    arg1 = reinterpret_cast< Pair< int,Pair< std::string,std::vector< std::string > > > * >(argp1);
    delete arg1;
    r_ans = R_NilValue;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    R_ClearExternalPtr(self);
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_new_pair_double_double__SWIG_0 ( )
{
  {
    Pair< double,double > *result = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    result = (Pair< double,double > *)new Pair< double,double >();
    r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_PairT_double_double_t, SWIG_POINTER_OWN |  0 );
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_new_pair_double_double__SWIG_1 ( SEXP t1, SEXP t2)
{
  {
    Pair< double,double > *result = 0 ;
    double *arg1 = 0 ;
    double *arg2 = 0 ;
    double temp1 ;
    double val1 ;
    int ecode1 = 0 ;
    double temp2 ;
    double val2 ;
    int ecode2 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    ecode1 = SWIG_AsVal_double(t1, &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_pair_double_double" "', argument " "1"" of type '" "double""'");
    } 
    temp1 = static_cast< double >(val1);
    arg1 = &temp1;
    ecode2 = SWIG_AsVal_double(t2, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_pair_double_double" "', argument " "2"" of type '" "double""'");
    } 
    temp2 = static_cast< double >(val2);
    arg2 = &temp2;
    result = (Pair< double,double > *)new Pair< double,double >((double const &)*arg1,(double const &)*arg2);
    r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_PairT_double_double_t, SWIG_POINTER_OWN |  0 );
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_new_pair_double_double__SWIG_2 ( SEXP t1, SEXP t2)
{
  {
    Pair< double,double > *result = 0 ;
    double *arg1 = 0 ;
    double *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    std::unique_ptr< double > rvrdeleter1 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    std::unique_ptr< double > rvrdeleter2 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(t1, &argp1, SWIGTYPE_p_double, SWIG_POINTER_RELEASE |  0 );
    if (!SWIG_IsOK(res1)) {
      if (res1 == SWIG_ERROR_RELEASE_NOT_OWNED) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_pair_double_double" "', cannot release ownership as memory is not owned for argument " "1"" of type '" "double &&""'");
      } else {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_pair_double_double" "', argument " "1"" of type '" "double &&""'"); 
      }
    }
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_pair_double_double" "', argument " "1"" of type '" "double &&""'"); 
    }
    arg1 = reinterpret_cast< double * >(argp1);
    rvrdeleter1.reset(arg1);
    res2 = SWIG_R_ConvertPtr(t2, &argp2, SWIGTYPE_p_double, SWIG_POINTER_RELEASE |  0 );
    if (!SWIG_IsOK(res2)) {
      if (res2 == SWIG_ERROR_RELEASE_NOT_OWNED) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_pair_double_double" "', cannot release ownership as memory is not owned for argument " "2"" of type '" "double &&""'");
      } else {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_pair_double_double" "', argument " "2"" of type '" "double &&""'"); 
      }
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_pair_double_double" "', argument " "2"" of type '" "double &&""'"); 
    }
    arg2 = reinterpret_cast< double * >(argp2);
    rvrdeleter2.reset(arg2);
    result = (Pair< double,double > *)new Pair< double,double >((double &&)*arg1,(double &&)*arg2);
    r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_PairT_double_double_t, SWIG_POINTER_OWN |  0 );
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_new_pair_double_double__SWIG_3 ( SEXP t)
{
  {
    Pair< double,double > *result = 0 ;
    std::pair< double,double > *arg1 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(t, &argp1, SWIGTYPE_p_std__pairT_double_double_t,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_pair_double_double" "', argument " "1"" of type '" "std::pair< double,double > const &""'"); 
    }
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_pair_double_double" "', argument " "1"" of type '" "std::pair< double,double > const &""'"); 
    }
    arg1 = reinterpret_cast< std::pair< double,double > * >(argp1);
    result = (Pair< double,double > *)new Pair< double,double >((std::pair< double,double > const &)*arg1);
    r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_PairT_double_double_t, SWIG_POINTER_OWN |  0 );
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_pair_double_double_first_set ( SEXP self, SEXP s_first)
{
  {
    Pair< double,double > *arg1 = (Pair< double,double > *) 0 ;
    double arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PairT_double_double_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pair_double_double_first_set" "', argument " "1"" of type '" "Pair< double,double > *""'"); 
    }
    arg1 = reinterpret_cast< Pair< double,double > * >(argp1);
    arg2 = static_cast< double >(REAL(s_first)[0]);
    if (arg1) (arg1)->first = arg2;
    r_ans = R_NilValue;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_pair_double_double_first_get ( SEXP self, SEXP s_swig_copy)
{
  {
    double result;
    Pair< double,double > *arg1 = (Pair< double,double > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PairT_double_double_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pair_double_double_first_get" "', argument " "1"" of type '" "Pair< double,double > *""'"); 
    }
    arg1 = reinterpret_cast< Pair< double,double > * >(argp1);
    result = (double) ((arg1)->first);
    r_ans = SWIG_From_double(static_cast< double >(result));
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_pair_double_double_second_set ( SEXP self, SEXP s_second)
{
  {
    Pair< double,double > *arg1 = (Pair< double,double > *) 0 ;
    double arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PairT_double_double_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pair_double_double_second_set" "', argument " "1"" of type '" "Pair< double,double > *""'"); 
    }
    arg1 = reinterpret_cast< Pair< double,double > * >(argp1);
    arg2 = static_cast< double >(REAL(s_second)[0]);
    if (arg1) (arg1)->second = arg2;
    r_ans = R_NilValue;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_pair_double_double_second_get ( SEXP self, SEXP s_swig_copy)
{
  {
    double result;
    Pair< double,double > *arg1 = (Pair< double,double > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PairT_double_double_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pair_double_double_second_get" "', argument " "1"" of type '" "Pair< double,double > *""'"); 
    }
    arg1 = reinterpret_cast< Pair< double,double > * >(argp1);
    result = (double) ((arg1)->second);
    r_ans = SWIG_From_double(static_cast< double >(result));
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_delete_pair_double_double ( SEXP self)
{
  {
    Pair< double,double > *arg1 = (Pair< double,double > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PairT_double_double_t, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_pair_double_double" "', argument " "1"" of type '" "Pair< double,double > *""'"); 
    }
    arg1 = reinterpret_cast< Pair< double,double > * >(argp1);
    delete arg1;
    r_ans = R_NilValue;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    R_ClearExternalPtr(self);
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_new_pair_string_string__SWIG_0 ( )
{
  {
    Pair< std::string,std::string > *result = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    result = (Pair< std::string,std::string > *)new Pair< std::string,std::string >();
    r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_PairT_std__string_std__string_t, SWIG_POINTER_OWN |  0 );
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_new_pair_string_string__SWIG_1 ( SEXP t1, SEXP t2)
{
  {
    Pair< std::string,std::string > *result = 0 ;
    std::string *arg1 = 0 ;
    std::string *arg2 = 0 ;
    int res1 = SWIG_OLDOBJ ;
    int res2 = SWIG_OLDOBJ ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    {
      std::string *ptr = (std::string *)0;
      res1 = SWIG_AsPtr_std_string(t1, &ptr);
      if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_pair_string_string" "', argument " "1"" of type '" "std::string const &""'"); 
      }
      if (!ptr) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_pair_string_string" "', argument " "1"" of type '" "std::string const &""'"); 
      }
      arg1 = ptr;
    }
    {
      std::string *ptr = (std::string *)0;
      res2 = SWIG_AsPtr_std_string(t2, &ptr);
      if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_pair_string_string" "', argument " "2"" of type '" "std::string const &""'"); 
      }
      if (!ptr) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_pair_string_string" "', argument " "2"" of type '" "std::string const &""'"); 
      }
      arg2 = ptr;
    }
    result = (Pair< std::string,std::string > *)new Pair< std::string,std::string >((std::string const &)*arg1,(std::string const &)*arg2);
    r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_PairT_std__string_std__string_t, SWIG_POINTER_OWN |  0 );
    if (SWIG_IsNewObj(res1)) delete arg1;
    if (SWIG_IsNewObj(res2)) delete arg2;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
    if (SWIG_IsNewObj(res1)) delete arg1;
    if (SWIG_IsNewObj(res2)) delete arg2;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_new_pair_string_string__SWIG_2 ( SEXP t1, SEXP t2)
{
  {
    Pair< std::string,std::string > *result = 0 ;
    std::string *arg1 = 0 ;
    std::string *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    std::unique_ptr< std::string > rvrdeleter1 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    std::unique_ptr< std::string > rvrdeleter2 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(t1, &argp1, SWIGTYPE_p_std__string, SWIG_POINTER_RELEASE |  0 );
    if (!SWIG_IsOK(res1)) {
      if (res1 == SWIG_ERROR_RELEASE_NOT_OWNED) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_pair_string_string" "', cannot release ownership as memory is not owned for argument " "1"" of type '" "std::string &&""'");
      } else {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_pair_string_string" "', argument " "1"" of type '" "std::string &&""'"); 
      }
    }
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_pair_string_string" "', argument " "1"" of type '" "std::string &&""'"); 
    }
    arg1 = reinterpret_cast< std::string * >(argp1);
    rvrdeleter1.reset(arg1);
    res2 = SWIG_R_ConvertPtr(t2, &argp2, SWIGTYPE_p_std__string, SWIG_POINTER_RELEASE |  0 );
    if (!SWIG_IsOK(res2)) {
      if (res2 == SWIG_ERROR_RELEASE_NOT_OWNED) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_pair_string_string" "', cannot release ownership as memory is not owned for argument " "2"" of type '" "std::string &&""'");
      } else {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_pair_string_string" "', argument " "2"" of type '" "std::string &&""'"); 
      }
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_pair_string_string" "', argument " "2"" of type '" "std::string &&""'"); 
    }
    arg2 = reinterpret_cast< std::string * >(argp2);
    rvrdeleter2.reset(arg2);
    result = (Pair< std::string,std::string > *)new Pair< std::string,std::string >((std::string &&)*arg1,(std::string &&)*arg2);
    r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_PairT_std__string_std__string_t, SWIG_POINTER_OWN |  0 );
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_new_pair_string_string__SWIG_3 ( SEXP t)
{
  {
    Pair< std::string,std::string > *result = 0 ;
    std::pair< std::string,std::string > *arg1 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(t, &argp1, SWIGTYPE_p_std__pairT_std__string_std__string_t,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_pair_string_string" "', argument " "1"" of type '" "std::pair< std::string,std::string > const &""'"); 
    }
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_pair_string_string" "', argument " "1"" of type '" "std::pair< std::string,std::string > const &""'"); 
    }
    arg1 = reinterpret_cast< std::pair< std::string,std::string > * >(argp1);
    result = (Pair< std::string,std::string > *)new Pair< std::string,std::string >((std::pair< std::string,std::string > const &)*arg1);
    r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_PairT_std__string_std__string_t, SWIG_POINTER_OWN |  0 );
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_pair_string_string_first_set ( SEXP self, SEXP s_first)
{
  {
    Pair< std::string,std::string > *arg1 = (Pair< std::string,std::string > *) 0 ;
    std::string *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 = SWIG_OLDOBJ ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PairT_std__string_std__string_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pair_string_string_first_set" "', argument " "1"" of type '" "Pair< std::string,std::string > *""'"); 
    }
    arg1 = reinterpret_cast< Pair< std::string,std::string > * >(argp1);
    {
      std::string *ptr = (std::string *)0;
      res2 = SWIG_AsPtr_std_string(s_first, &ptr);
      if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "pair_string_string_first_set" "', argument " "2"" of type '" "std::string const &""'"); 
      }
      if (!ptr) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "pair_string_string_first_set" "', argument " "2"" of type '" "std::string const &""'"); 
      }
      arg2 = ptr;
    }
    if (arg1) (arg1)->first = *arg2;
    r_ans = R_NilValue;
    if (SWIG_IsNewObj(res2)) delete arg2;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
    if (SWIG_IsNewObj(res2)) delete arg2;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_pair_string_string_first_get ( SEXP self, SEXP s_swig_copy)
{
  {
    std::string *result = 0 ;
    Pair< std::string,std::string > *arg1 = (Pair< std::string,std::string > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PairT_std__string_std__string_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pair_string_string_first_get" "', argument " "1"" of type '" "Pair< std::string,std::string > *""'"); 
    }
    arg1 = reinterpret_cast< Pair< std::string,std::string > * >(argp1);
    result = (std::string *) & ((arg1)->first);
    r_ans = SWIG_From_std_string(static_cast< std::string >(*result));
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_pair_string_string_second_set ( SEXP self, SEXP s_second)
{
  {
    Pair< std::string,std::string > *arg1 = (Pair< std::string,std::string > *) 0 ;
    std::string *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 = SWIG_OLDOBJ ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PairT_std__string_std__string_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pair_string_string_second_set" "', argument " "1"" of type '" "Pair< std::string,std::string > *""'"); 
    }
    arg1 = reinterpret_cast< Pair< std::string,std::string > * >(argp1);
    {
      std::string *ptr = (std::string *)0;
      res2 = SWIG_AsPtr_std_string(s_second, &ptr);
      if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "pair_string_string_second_set" "', argument " "2"" of type '" "std::string const &""'"); 
      }
      if (!ptr) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "pair_string_string_second_set" "', argument " "2"" of type '" "std::string const &""'"); 
      }
      arg2 = ptr;
    }
    if (arg1) (arg1)->second = *arg2;
    r_ans = R_NilValue;
    if (SWIG_IsNewObj(res2)) delete arg2;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
    if (SWIG_IsNewObj(res2)) delete arg2;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_pair_string_string_second_get ( SEXP self, SEXP s_swig_copy)
{
  {
    std::string *result = 0 ;
    Pair< std::string,std::string > *arg1 = (Pair< std::string,std::string > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PairT_std__string_std__string_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pair_string_string_second_get" "', argument " "1"" of type '" "Pair< std::string,std::string > *""'"); 
    }
    arg1 = reinterpret_cast< Pair< std::string,std::string > * >(argp1);
    result = (std::string *) & ((arg1)->second);
    r_ans = SWIG_From_std_string(static_cast< std::string >(*result));
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_delete_pair_string_string ( SEXP self)
{
  {
    Pair< std::string,std::string > *arg1 = (Pair< std::string,std::string > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PairT_std__string_std__string_t, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_pair_string_string" "', argument " "1"" of type '" "Pair< std::string,std::string > *""'"); 
    }
    arg1 = reinterpret_cast< Pair< std::string,std::string > * >(argp1);
    delete arg1;
    r_ans = R_NilValue;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    R_ClearExternalPtr(self);
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_new_pair_bool_pair_string_string__SWIG_0 ( )
{
  {
    Pair< bool,Pair< std::string,std::string > > *result = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    result = (Pair< bool,Pair< std::string,std::string > > *)new Pair< bool,Pair< std::string,std::string > >();
    r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_PairT_bool_PairT_std__string_std__string_t_t, SWIG_POINTER_OWN |  0 );
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_new_pair_bool_pair_string_string__SWIG_1 ( SEXP t1, SEXP t2)
{
  {
    Pair< bool,Pair< std::string,std::string > > *result = 0 ;
    bool *arg1 = 0 ;
    Pair< std::string,std::string > *arg2 = 0 ;
    bool temp1 ;
    bool val1 ;
    int ecode1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    ecode1 = SWIG_AsVal_bool(t1, &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_pair_bool_pair_string_string" "', argument " "1"" of type '" "bool""'");
    } 
    temp1 = static_cast< bool >(val1);
    arg1 = &temp1;
    res2 = SWIG_R_ConvertPtr(t2, &argp2, SWIGTYPE_p_PairT_std__string_std__string_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_pair_bool_pair_string_string" "', argument " "2"" of type '" "Pair< std::string,std::string > const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_pair_bool_pair_string_string" "', argument " "2"" of type '" "Pair< std::string,std::string > const &""'"); 
    }
    arg2 = reinterpret_cast< Pair< std::string,std::string > * >(argp2);
    result = (Pair< bool,Pair< std::string,std::string > > *)new Pair< bool,Pair< std::string,std::string > >((bool const &)*arg1,(Pair< std::string,std::string > const &)*arg2);
    r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_PairT_bool_PairT_std__string_std__string_t_t, SWIG_POINTER_OWN |  0 );
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_new_pair_bool_pair_string_string__SWIG_2 ( SEXP t1, SEXP t2)
{
  {
    Pair< bool,Pair< std::string,std::string > > *result = 0 ;
    bool *arg1 = 0 ;
    Pair< std::string,std::string > *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    std::unique_ptr< bool > rvrdeleter1 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    std::unique_ptr< Pair< std::string,std::string > > rvrdeleter2 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(t1, &argp1, SWIGTYPE_p_bool, SWIG_POINTER_RELEASE |  0 );
    if (!SWIG_IsOK(res1)) {
      if (res1 == SWIG_ERROR_RELEASE_NOT_OWNED) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_pair_bool_pair_string_string" "', cannot release ownership as memory is not owned for argument " "1"" of type '" "bool &&""'");
      } else {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_pair_bool_pair_string_string" "', argument " "1"" of type '" "bool &&""'"); 
      }
    }
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_pair_bool_pair_string_string" "', argument " "1"" of type '" "bool &&""'"); 
    }
    arg1 = reinterpret_cast< bool * >(argp1);
    rvrdeleter1.reset(arg1);
    res2 = SWIG_R_ConvertPtr(t2, &argp2, SWIGTYPE_p_PairT_std__string_std__string_t, SWIG_POINTER_RELEASE |  0 );
    if (!SWIG_IsOK(res2)) {
      if (res2 == SWIG_ERROR_RELEASE_NOT_OWNED) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_pair_bool_pair_string_string" "', cannot release ownership as memory is not owned for argument " "2"" of type '" "Pair< std::string,std::string > &&""'");
      } else {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_pair_bool_pair_string_string" "', argument " "2"" of type '" "Pair< std::string,std::string > &&""'"); 
      }
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_pair_bool_pair_string_string" "', argument " "2"" of type '" "Pair< std::string,std::string > &&""'"); 
    }
    arg2 = reinterpret_cast< Pair< std::string,std::string > * >(argp2);
    rvrdeleter2.reset(arg2);
    result = (Pair< bool,Pair< std::string,std::string > > *)new Pair< bool,Pair< std::string,std::string > >((bool &&)*arg1,(Pair< std::string,std::string > &&)*arg2);
    r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_PairT_bool_PairT_std__string_std__string_t_t, SWIG_POINTER_OWN |  0 );
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_new_pair_bool_pair_string_string__SWIG_3 ( SEXP t)
{
  {
    Pair< bool,Pair< std::string,std::string > > *result = 0 ;
    std::pair< bool,Pair< std::string,std::string > > *arg1 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(t, &argp1, SWIGTYPE_p_std__pairT_bool_PairT_std__string_std__string_t_t,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_pair_bool_pair_string_string" "', argument " "1"" of type '" "std::pair< bool,Pair< std::string,std::string > > const &""'"); 
    }
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_pair_bool_pair_string_string" "', argument " "1"" of type '" "std::pair< bool,Pair< std::string,std::string > > const &""'"); 
    }
    arg1 = reinterpret_cast< std::pair< bool,Pair< std::string,std::string > > * >(argp1);
    result = (Pair< bool,Pair< std::string,std::string > > *)new Pair< bool,Pair< std::string,std::string > >((std::pair< bool,Pair< std::string,std::string > > const &)*arg1);
    r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_PairT_bool_PairT_std__string_std__string_t_t, SWIG_POINTER_OWN |  0 );
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_pair_bool_pair_string_string_first_set ( SEXP self, SEXP s_first)
{
  {
    Pair< bool,Pair< std::string,std::string > > *arg1 = (Pair< bool,Pair< std::string,std::string > > *) 0 ;
    bool arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PairT_bool_PairT_std__string_std__string_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pair_bool_pair_string_string_first_set" "', argument " "1"" of type '" "Pair< bool,Pair< std::string,std::string > > *""'"); 
    }
    arg1 = reinterpret_cast< Pair< bool,Pair< std::string,std::string > > * >(argp1);
    arg2 = LOGICAL(s_first)[0] ? true : false;
    if (arg1) (arg1)->first = arg2;
    r_ans = R_NilValue;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_pair_bool_pair_string_string_first_get ( SEXP self, SEXP s_swig_copy)
{
  {
    bool result;
    Pair< bool,Pair< std::string,std::string > > *arg1 = (Pair< bool,Pair< std::string,std::string > > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PairT_bool_PairT_std__string_std__string_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pair_bool_pair_string_string_first_get" "', argument " "1"" of type '" "Pair< bool,Pair< std::string,std::string > > *""'"); 
    }
    arg1 = reinterpret_cast< Pair< bool,Pair< std::string,std::string > > * >(argp1);
    result = (bool) ((arg1)->first);
    r_ans = Rf_ScalarLogical(result);
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_pair_bool_pair_string_string_second_set ( SEXP self, SEXP s_second)
{
  {
    Pair< bool,Pair< std::string,std::string > > *arg1 = (Pair< bool,Pair< std::string,std::string > > *) 0 ;
    Pair< std::string,std::string > *arg2 = (Pair< std::string,std::string > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PairT_bool_PairT_std__string_std__string_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pair_bool_pair_string_string_second_set" "', argument " "1"" of type '" "Pair< bool,Pair< std::string,std::string > > *""'"); 
    }
    arg1 = reinterpret_cast< Pair< bool,Pair< std::string,std::string > > * >(argp1);
    res2 = SWIG_R_ConvertPtr(s_second, &argp2, SWIGTYPE_p_PairT_std__string_std__string_t, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "pair_bool_pair_string_string_second_set" "', argument " "2"" of type '" "Pair< std::string,std::string > *""'"); 
    }
    arg2 = reinterpret_cast< Pair< std::string,std::string > * >(argp2);
    if (arg1) (arg1)->second = *arg2;
    r_ans = R_NilValue;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_pair_bool_pair_string_string_second_get ( SEXP self)
{
  {
    Pair< std::string,std::string > *result = 0 ;
    Pair< bool,Pair< std::string,std::string > > *arg1 = (Pair< bool,Pair< std::string,std::string > > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PairT_bool_PairT_std__string_std__string_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pair_bool_pair_string_string_second_get" "', argument " "1"" of type '" "Pair< bool,Pair< std::string,std::string > > *""'"); 
    }
    arg1 = reinterpret_cast< Pair< bool,Pair< std::string,std::string > > * >(argp1);
    result = (Pair< std::string,std::string > *)& ((arg1)->second);
    r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_PairT_std__string_std__string_t, 0 |  0 );
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_delete_pair_bool_pair_string_string ( SEXP self)
{
  {
    Pair< bool,Pair< std::string,std::string > > *arg1 = (Pair< bool,Pair< std::string,std::string > > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_PairT_bool_PairT_std__string_std__string_t_t, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_pair_bool_pair_string_string" "', argument " "1"" of type '" "Pair< bool,Pair< std::string,std::string > > *""'"); 
    }
    arg1 = reinterpret_cast< Pair< bool,Pair< std::string,std::string > > * >(argp1);
    delete arg1;
    r_ans = R_NilValue;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    R_ClearExternalPtr(self);
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_vector_float___nonzero__ ( SEXP self, SEXP s_swig_copy)
{
  {
    bool result;
    std::vector< float > *arg1 = (std::vector< float > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_float___nonzero__" "', argument " "1"" of type '" "std::vector< float > const *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< float > * >(argp1);
    result = (bool)std_vector_Sl_float_Sg____nonzero__((std::vector< float > const *)arg1);
    r_ans = Rf_ScalarLogical(result);
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_vector_float___len__ ( SEXP self, SEXP s_swig_copy)
{
  {
    std::vector< float >::size_type result;
    std::vector< float > *arg1 = (std::vector< float > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_float___len__" "', argument " "1"" of type '" "std::vector< float > const *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< float > * >(argp1);
    result = std_vector_Sl_float_Sg____len__((std::vector< float > const *)arg1);
    r_ans = SWIG_From_int(static_cast< int >(result));
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_vector_float_pop ( SEXP self, SEXP s_swig_copy)
{
  {
    std::vector< float >::value_type result;
    std::vector< float > *arg1 = (std::vector< float > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_float_pop" "', argument " "1"" of type '" "std::vector< float > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< float > * >(argp1);
    try {
      result = (std::vector< float >::value_type)std_vector_Sl_float_Sg__pop(arg1);
    } catch(std::out_of_range &_e) {
      SWIG_R_Raise(SWIG_R_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))), SWIGTYPE_p_std__out_of_range, SWIG_POINTER_OWN), "C/C++ exception of type " "std::out_of_range"); return R_NilValue;
    }
    r_ans = SWIG_From_float(static_cast< float >(result));
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_vector_float___getslice__ ( SEXP self, SEXP i, SEXP j)
{
  {
    std::vector< float,std::allocator< float > > *result = 0 ;
    std::vector< float > *arg1 = (std::vector< float > *) 0 ;
    std::vector< float >::difference_type arg2 ;
    std::vector< float >::difference_type arg3 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int val3 ;
    int ecode3 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_float___getslice__" "', argument " "1"" of type '" "std::vector< float > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< float > * >(argp1);
    ecode2 = SWIG_AsVal_int(i, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_float___getslice__" "', argument " "2"" of type '" "std::vector< float >::difference_type""'");
    } 
    arg2 = static_cast< std::vector< float >::difference_type >(val2);
    ecode3 = SWIG_AsVal_int(j, &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_float___getslice__" "', argument " "3"" of type '" "std::vector< float >::difference_type""'");
    } 
    arg3 = static_cast< std::vector< float >::difference_type >(val3);
    try {
      result = (std::vector< float,std::allocator< float > > *)std_vector_Sl_float_Sg____getslice__(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
    } catch(std::out_of_range &_e) {
      SWIG_R_Raise(SWIG_R_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))), SWIGTYPE_p_std__out_of_range, SWIG_POINTER_OWN), "C/C++ exception of type " "std::out_of_range"); return R_NilValue;
    }
    r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, SWIG_POINTER_OWN |  0 );
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_vector_float___setslice__ ( SEXP self, SEXP i, SEXP j, SEXP v)
{
  {
    std::vector< float > *arg1 = (std::vector< float > *) 0 ;
    std::vector< float >::difference_type arg2 ;
    std::vector< float >::difference_type arg3 ;
    std::vector< float,std::allocator< float > > *arg4 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int val3 ;
    int ecode3 = 0 ;
    int res4 = SWIG_OLDOBJ ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_float___setslice__" "', argument " "1"" of type '" "std::vector< float > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< float > * >(argp1);
    ecode2 = SWIG_AsVal_int(i, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_float___setslice__" "', argument " "2"" of type '" "std::vector< float >::difference_type""'");
    } 
    arg2 = static_cast< std::vector< float >::difference_type >(val2);
    ecode3 = SWIG_AsVal_int(j, &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_float___setslice__" "', argument " "3"" of type '" "std::vector< float >::difference_type""'");
    } 
    arg3 = static_cast< std::vector< float >::difference_type >(val3);
    {
      std::vector< float,std::allocator< float > > *ptr = (std::vector< float,std::allocator< float > > *)0;
      res4 = swig::asptr(v, &ptr);
      if (!SWIG_IsOK(res4)) {
        SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "vector_float___setslice__" "', argument " "4"" of type '" "std::vector< float,std::allocator< float > > const &""'"); 
      }
      if (!ptr) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_float___setslice__" "', argument " "4"" of type '" "std::vector< float,std::allocator< float > > const &""'"); 
      }
      arg4 = ptr;
    }
    try {
      std_vector_Sl_float_Sg____setslice__(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),(std::vector< float,std::allocator< float > > const &)*arg4);
    } catch(std::out_of_range &_e) {
      SWIG_R_Raise(SWIG_R_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))), SWIGTYPE_p_std__out_of_range, SWIG_POINTER_OWN), "C/C++ exception of type " "std::out_of_range"); return R_NilValue;
    } catch(std::invalid_argument &_e) {
      SWIG_R_Raise(SWIG_R_NewPointerObj((new std::invalid_argument(static_cast< const std::invalid_argument& >(_e))), SWIGTYPE_p_std__invalid_argument, SWIG_POINTER_OWN), "C/C++ exception of type " "std::invalid_argument"); return R_NilValue;
    }
    r_ans = R_NilValue;
    if (SWIG_IsNewObj(res4)) delete arg4;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
    if (SWIG_IsNewObj(res4)) delete arg4;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_vector_float___delslice__ ( SEXP self, SEXP i, SEXP j)
{
  {
    std::vector< float > *arg1 = (std::vector< float > *) 0 ;
    std::vector< float >::difference_type arg2 ;
    std::vector< float >::difference_type arg3 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int val3 ;
    int ecode3 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_float___delslice__" "', argument " "1"" of type '" "std::vector< float > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< float > * >(argp1);
    ecode2 = SWIG_AsVal_int(i, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_float___delslice__" "', argument " "2"" of type '" "std::vector< float >::difference_type""'");
    } 
    arg2 = static_cast< std::vector< float >::difference_type >(val2);
    ecode3 = SWIG_AsVal_int(j, &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_float___delslice__" "', argument " "3"" of type '" "std::vector< float >::difference_type""'");
    } 
    arg3 = static_cast< std::vector< float >::difference_type >(val3);
    try {
      std_vector_Sl_float_Sg____delslice__(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
    } catch(std::out_of_range &_e) {
      SWIG_R_Raise(SWIG_R_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))), SWIGTYPE_p_std__out_of_range, SWIG_POINTER_OWN), "C/C++ exception of type " "std::out_of_range"); return R_NilValue;
    }
    r_ans = R_NilValue;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_vector_float___delitem__ ( SEXP self, SEXP i)
{
  {
    std::vector< float > *arg1 = (std::vector< float > *) 0 ;
    std::vector< float >::difference_type arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_float___delitem__" "', argument " "1"" of type '" "std::vector< float > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< float > * >(argp1);
    ecode2 = SWIG_AsVal_int(i, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_float___delitem__" "', argument " "2"" of type '" "std::vector< float >::difference_type""'");
    } 
    arg2 = static_cast< std::vector< float >::difference_type >(val2);
    try {
      std_vector_Sl_float_Sg____delitem__(arg1,SWIG_STD_MOVE(arg2));
    } catch(std::out_of_range &_e) {
      SWIG_R_Raise(SWIG_R_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))), SWIGTYPE_p_std__out_of_range, SWIG_POINTER_OWN), "C/C++ exception of type " "std::out_of_range"); return R_NilValue;
    }
    r_ans = R_NilValue;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_vector_float___getitem__ ( SEXP self, SEXP i, SEXP s_swig_copy)
{
  {
    std::vector< float >::value_type *result = 0 ;
    std::vector< float > *arg1 = (std::vector< float > *) 0 ;
    std::vector< float >::difference_type arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_float___getitem__" "', argument " "1"" of type '" "std::vector< float > const *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< float > * >(argp1);
    ecode2 = SWIG_AsVal_int(i, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_float___getitem__" "', argument " "2"" of type '" "std::vector< float >::difference_type""'");
    } 
    arg2 = static_cast< std::vector< float >::difference_type >(val2);
    try {
      result = (std::vector< float >::value_type *) &std_vector_Sl_float_Sg____getitem__((std::vector< float > const *)arg1,SWIG_STD_MOVE(arg2));
    } catch(std::out_of_range &_e) {
      SWIG_R_Raise(SWIG_R_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))), SWIGTYPE_p_std__out_of_range, SWIG_POINTER_OWN), "C/C++ exception of type " "std::out_of_range"); return R_NilValue;
    }
    r_ans = SWIG_From_float(static_cast< float >(*result));
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_vector_float___setitem__ ( SEXP self, SEXP i, SEXP x)
{
  {
    std::vector< float > *arg1 = (std::vector< float > *) 0 ;
    std::vector< float >::difference_type arg2 ;
    std::vector< float >::value_type *arg3 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    std::vector< float >::value_type temp3 ;
    float val3 ;
    int ecode3 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_float___setitem__" "', argument " "1"" of type '" "std::vector< float > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< float > * >(argp1);
    ecode2 = SWIG_AsVal_int(i, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_float___setitem__" "', argument " "2"" of type '" "std::vector< float >::difference_type""'");
    } 
    arg2 = static_cast< std::vector< float >::difference_type >(val2);
    ecode3 = SWIG_AsVal_float(x, &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_float___setitem__" "', argument " "3"" of type '" "std::vector< float >::value_type""'");
    } 
    temp3 = static_cast< std::vector< float >::value_type >(val3);
    arg3 = &temp3;
    try {
      std_vector_Sl_float_Sg____setitem__(arg1,SWIG_STD_MOVE(arg2),(float const &)*arg3);
    } catch(std::out_of_range &_e) {
      SWIG_R_Raise(SWIG_R_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))), SWIGTYPE_p_std__out_of_range, SWIG_POINTER_OWN), "C/C++ exception of type " "std::out_of_range"); return R_NilValue;
    }
    r_ans = R_NilValue;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_vector_float_append ( SEXP self, SEXP x)
{
  {
    std::vector< float > *arg1 = (std::vector< float > *) 0 ;
    std::vector< float >::value_type *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    std::vector< float >::value_type temp2 ;
    float val2 ;
    int ecode2 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_float_append" "', argument " "1"" of type '" "std::vector< float > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< float > * >(argp1);
    ecode2 = SWIG_AsVal_float(x, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_float_append" "', argument " "2"" of type '" "std::vector< float >::value_type""'");
    } 
    temp2 = static_cast< std::vector< float >::value_type >(val2);
    arg2 = &temp2;
    std_vector_Sl_float_Sg__append(arg1,(float const &)*arg2);
    r_ans = R_NilValue;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_new_vector_float__SWIG_0 ( )
{
  {
    std::vector< float > *result = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    result = (std::vector< float > *)new std::vector< float >();
    r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, SWIG_POINTER_OWN |  0 );
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_new_vector_float__SWIG_1 ( SEXP other)
{
  {
    std::vector< float > *result = 0 ;
    std::vector< float > *arg1 = 0 ;
    int res1 = SWIG_OLDOBJ ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    {
      std::vector< float,std::allocator< float > > *ptr = (std::vector< float,std::allocator< float > > *)0;
      res1 = swig::asptr(other, &ptr);
      if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_vector_float" "', argument " "1"" of type '" "std::vector< float > const &""'"); 
      }
      if (!ptr) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_vector_float" "', argument " "1"" of type '" "std::vector< float > const &""'"); 
      }
      arg1 = ptr;
    }
    result = (std::vector< float > *)new std::vector< float >((std::vector< float > const &)*arg1);
    r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, SWIG_POINTER_OWN |  0 );
    if (SWIG_IsNewObj(res1)) delete arg1;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
    if (SWIG_IsNewObj(res1)) delete arg1;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_vector_float_empty ( SEXP self, SEXP s_swig_copy)
{
  {
    bool result;
    std::vector< float > *arg1 = (std::vector< float > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_float_empty" "', argument " "1"" of type '" "std::vector< float > const *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< float > * >(argp1);
    result = (bool)((std::vector< float > const *)arg1)->empty();
    r_ans = Rf_ScalarLogical(result);
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_vector_float_size ( SEXP self, SEXP s_swig_copy)
{
  {
    std::vector< float >::size_type result;
    std::vector< float > *arg1 = (std::vector< float > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_float_size" "', argument " "1"" of type '" "std::vector< float > const *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< float > * >(argp1);
    result = ((std::vector< float > const *)arg1)->size();
    r_ans = SWIG_From_int(static_cast< int >(result));
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_vector_float_swap ( SEXP self, SEXP v)
{
  {
    std::vector< float > *arg1 = (std::vector< float > *) 0 ;
    std::vector< float > *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_float_swap" "', argument " "1"" of type '" "std::vector< float > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< float > * >(argp1);
    res2 = SWIG_R_ConvertPtr(v, &argp2, SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vector_float_swap" "', argument " "2"" of type '" "std::vector< float > &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_float_swap" "', argument " "2"" of type '" "std::vector< float > &""'"); 
    }
    arg2 = reinterpret_cast< std::vector< float > * >(argp2);
    (arg1)->swap(*arg2);
    r_ans = R_NilValue;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_vector_float_clear ( SEXP self)
{
  {
    std::vector< float > *arg1 = (std::vector< float > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_float_clear" "', argument " "1"" of type '" "std::vector< float > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< float > * >(argp1);
    (arg1)->clear();
    r_ans = R_NilValue;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_vector_float_get_allocator ( SEXP self, SEXP s_swig_copy)
{
  {
    SwigValueWrapper< std::allocator< float > > result;
    std::vector< float > *arg1 = (std::vector< float > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_float_get_allocator" "', argument " "1"" of type '" "std::vector< float > const *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< float > * >(argp1);
    result = ((std::vector< float > const *)arg1)->get_allocator();
    r_ans = SWIG_R_NewPointerObj((new std::vector< float >::allocator_type(result)), SWIGTYPE_p_std__allocatorT_float_t, SWIG_POINTER_OWN |  0 );
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_new_vector_float__SWIG_2 ( SEXP size)
{
  {
    std::vector< float > *result = 0 ;
    std::vector< float >::size_type arg1 ;
    int val1 ;
    int ecode1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    ecode1 = SWIG_AsVal_int(size, &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_vector_float" "', argument " "1"" of type '" "std::vector< float >::size_type""'");
    } 
    arg1 = static_cast< std::vector< float >::size_type >(val1);
    result = (std::vector< float > *)new std::vector< float >(arg1);
    r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, SWIG_POINTER_OWN |  0 );
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_vector_float_pop_back ( SEXP self)
{
  {
    std::vector< float > *arg1 = (std::vector< float > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_float_pop_back" "', argument " "1"" of type '" "std::vector< float > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< float > * >(argp1);
    (arg1)->pop_back();
    r_ans = R_NilValue;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_vector_float_resize__SWIG_0 ( SEXP self, SEXP new_size)
{
  {
    std::vector< float > *arg1 = (std::vector< float > *) 0 ;
    std::vector< float >::size_type arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_float_resize" "', argument " "1"" of type '" "std::vector< float > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< float > * >(argp1);
    ecode2 = SWIG_AsVal_int(new_size, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_float_resize" "', argument " "2"" of type '" "std::vector< float >::size_type""'");
    } 
    arg2 = static_cast< std::vector< float >::size_type >(val2);
    (arg1)->resize(arg2);
    r_ans = R_NilValue;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_new_vector_float__SWIG_3 ( SEXP size, SEXP value)
{
  {
    std::vector< float > *result = 0 ;
    std::vector< float >::size_type arg1 ;
    std::vector< float >::value_type *arg2 = 0 ;
    int val1 ;
    int ecode1 = 0 ;
    std::vector< float >::value_type temp2 ;
    float val2 ;
    int ecode2 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    ecode1 = SWIG_AsVal_int(size, &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_vector_float" "', argument " "1"" of type '" "std::vector< float >::size_type""'");
    } 
    arg1 = static_cast< std::vector< float >::size_type >(val1);
    ecode2 = SWIG_AsVal_float(value, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_vector_float" "', argument " "2"" of type '" "std::vector< float >::value_type""'");
    } 
    temp2 = static_cast< std::vector< float >::value_type >(val2);
    arg2 = &temp2;
    result = (std::vector< float > *)new std::vector< float >(arg1,(std::vector< float >::value_type const &)*arg2);
    r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, SWIG_POINTER_OWN |  0 );
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_vector_float_push_back ( SEXP self, SEXP x)
{
  {
    std::vector< float > *arg1 = (std::vector< float > *) 0 ;
    std::vector< float >::value_type *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    std::vector< float >::value_type temp2 ;
    float val2 ;
    int ecode2 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_float_push_back" "', argument " "1"" of type '" "std::vector< float > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< float > * >(argp1);
    ecode2 = SWIG_AsVal_float(x, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_float_push_back" "', argument " "2"" of type '" "std::vector< float >::value_type""'");
    } 
    temp2 = static_cast< std::vector< float >::value_type >(val2);
    arg2 = &temp2;
    (arg1)->push_back((std::vector< float >::value_type const &)*arg2);
    r_ans = R_NilValue;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_vector_float_front ( SEXP self, SEXP s_swig_copy)
{
  {
    std::vector< float >::value_type *result = 0 ;
    std::vector< float > *arg1 = (std::vector< float > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_float_front" "', argument " "1"" of type '" "std::vector< float > const *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< float > * >(argp1);
    result = (std::vector< float >::value_type *) &((std::vector< float > const *)arg1)->front();
    r_ans = SWIG_From_float(static_cast< float >(*result));
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_vector_float_back ( SEXP self, SEXP s_swig_copy)
{
  {
    std::vector< float >::value_type *result = 0 ;
    std::vector< float > *arg1 = (std::vector< float > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_float_back" "', argument " "1"" of type '" "std::vector< float > const *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< float > * >(argp1);
    result = (std::vector< float >::value_type *) &((std::vector< float > const *)arg1)->back();
    r_ans = SWIG_From_float(static_cast< float >(*result));
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_vector_float_assign ( SEXP self, SEXP n, SEXP x)
{
  {
    std::vector< float > *arg1 = (std::vector< float > *) 0 ;
    std::vector< float >::size_type arg2 ;
    std::vector< float >::value_type *arg3 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    std::vector< float >::value_type temp3 ;
    float val3 ;
    int ecode3 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_float_assign" "', argument " "1"" of type '" "std::vector< float > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< float > * >(argp1);
    ecode2 = SWIG_AsVal_int(n, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_float_assign" "', argument " "2"" of type '" "std::vector< float >::size_type""'");
    } 
    arg2 = static_cast< std::vector< float >::size_type >(val2);
    ecode3 = SWIG_AsVal_float(x, &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_float_assign" "', argument " "3"" of type '" "std::vector< float >::value_type""'");
    } 
    temp3 = static_cast< std::vector< float >::value_type >(val3);
    arg3 = &temp3;
    (arg1)->assign(arg2,(std::vector< float >::value_type const &)*arg3);
    r_ans = R_NilValue;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_vector_float_resize__SWIG_1 ( SEXP self, SEXP new_size, SEXP x)
{
  {
    std::vector< float > *arg1 = (std::vector< float > *) 0 ;
    std::vector< float >::size_type arg2 ;
    std::vector< float >::value_type *arg3 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    std::vector< float >::value_type temp3 ;
    float val3 ;
    int ecode3 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_float_resize" "', argument " "1"" of type '" "std::vector< float > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< float > * >(argp1);
    ecode2 = SWIG_AsVal_int(new_size, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_float_resize" "', argument " "2"" of type '" "std::vector< float >::size_type""'");
    } 
    arg2 = static_cast< std::vector< float >::size_type >(val2);
    ecode3 = SWIG_AsVal_float(x, &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_float_resize" "', argument " "3"" of type '" "std::vector< float >::value_type""'");
    } 
    temp3 = static_cast< std::vector< float >::value_type >(val3);
    arg3 = &temp3;
    (arg1)->resize(arg2,(std::vector< float >::value_type const &)*arg3);
    r_ans = R_NilValue;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_vector_float_reserve ( SEXP self, SEXP n)
{
  {
    std::vector< float > *arg1 = (std::vector< float > *) 0 ;
    std::vector< float >::size_type arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_float_reserve" "', argument " "1"" of type '" "std::vector< float > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< float > * >(argp1);
    ecode2 = SWIG_AsVal_int(n, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_float_reserve" "', argument " "2"" of type '" "std::vector< float >::size_type""'");
    } 
    arg2 = static_cast< std::vector< float >::size_type >(val2);
    (arg1)->reserve(arg2);
    r_ans = R_NilValue;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_vector_float_capacity ( SEXP self, SEXP s_swig_copy)
{
  {
    std::vector< float >::size_type result;
    std::vector< float > *arg1 = (std::vector< float > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_float_capacity" "', argument " "1"" of type '" "std::vector< float > const *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< float > * >(argp1);
    result = ((std::vector< float > const *)arg1)->capacity();
    r_ans = SWIG_From_int(static_cast< int >(result));
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_delete_vector_float ( SEXP self)
{
  {
    std::vector< float > *arg1 = (std::vector< float > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_vector_float" "', argument " "1"" of type '" "std::vector< float > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< float > * >(argp1);
    delete arg1;
    r_ans = R_NilValue;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    R_ClearExternalPtr(self);
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_vector_double___nonzero__ ( SEXP self, SEXP s_swig_copy)
{
  {
    bool result;
    std::vector< double > *arg1 = (std::vector< double > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double___nonzero__" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< double > * >(argp1);
    result = (bool)std_vector_Sl_double_Sg____nonzero__((std::vector< double > const *)arg1);
    r_ans = Rf_ScalarLogical(result);
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_vector_double___len__ ( SEXP self, SEXP s_swig_copy)
{
  {
    std::vector< double >::size_type result;
    std::vector< double > *arg1 = (std::vector< double > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double___len__" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< double > * >(argp1);
    result = std_vector_Sl_double_Sg____len__((std::vector< double > const *)arg1);
    r_ans = SWIG_From_int(static_cast< int >(result));
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_vector_double_pop ( SEXP self, SEXP s_swig_copy)
{
  {
    std::vector< double >::value_type result;
    std::vector< double > *arg1 = (std::vector< double > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_pop" "', argument " "1"" of type '" "std::vector< double > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< double > * >(argp1);
    try {
      result = (std::vector< double >::value_type)std_vector_Sl_double_Sg__pop(arg1);
    } catch(std::out_of_range &_e) {
      SWIG_R_Raise(SWIG_R_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))), SWIGTYPE_p_std__out_of_range, SWIG_POINTER_OWN), "C/C++ exception of type " "std::out_of_range"); return R_NilValue;
    }
    r_ans = SWIG_From_double(static_cast< double >(result));
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_vector_double___getslice__ ( SEXP self, SEXP i, SEXP j)
{
  {
    std::vector< double,std::allocator< double > > *result = 0 ;
    std::vector< double > *arg1 = (std::vector< double > *) 0 ;
    std::vector< double >::difference_type arg2 ;
    std::vector< double >::difference_type arg3 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int val3 ;
    int ecode3 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double___getslice__" "', argument " "1"" of type '" "std::vector< double > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< double > * >(argp1);
    ecode2 = SWIG_AsVal_int(i, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_double___getslice__" "', argument " "2"" of type '" "std::vector< double >::difference_type""'");
    } 
    arg2 = static_cast< std::vector< double >::difference_type >(val2);
    ecode3 = SWIG_AsVal_int(j, &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_double___getslice__" "', argument " "3"" of type '" "std::vector< double >::difference_type""'");
    } 
    arg3 = static_cast< std::vector< double >::difference_type >(val3);
    try {
      result = (std::vector< double,std::allocator< double > > *)std_vector_Sl_double_Sg____getslice__(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
    } catch(std::out_of_range &_e) {
      SWIG_R_Raise(SWIG_R_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))), SWIGTYPE_p_std__out_of_range, SWIG_POINTER_OWN), "C/C++ exception of type " "std::out_of_range"); return R_NilValue;
    }
    r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, SWIG_POINTER_OWN |  0 );
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_vector_double___setslice__ ( SEXP self, SEXP i, SEXP j, SEXP v)
{
  {
    std::vector< double > *arg1 = (std::vector< double > *) 0 ;
    std::vector< double >::difference_type arg2 ;
    std::vector< double >::difference_type arg3 ;
    std::vector< double,std::allocator< double > > *arg4 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int val3 ;
    int ecode3 = 0 ;
    int res4 = SWIG_OLDOBJ ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double___setslice__" "', argument " "1"" of type '" "std::vector< double > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< double > * >(argp1);
    ecode2 = SWIG_AsVal_int(i, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_double___setslice__" "', argument " "2"" of type '" "std::vector< double >::difference_type""'");
    } 
    arg2 = static_cast< std::vector< double >::difference_type >(val2);
    ecode3 = SWIG_AsVal_int(j, &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_double___setslice__" "', argument " "3"" of type '" "std::vector< double >::difference_type""'");
    } 
    arg3 = static_cast< std::vector< double >::difference_type >(val3);
    {
      std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
      res4 = swig::asptr(v, &ptr);
      if (!SWIG_IsOK(res4)) {
        SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "vector_double___setslice__" "', argument " "4"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
      }
      if (!ptr) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_double___setslice__" "', argument " "4"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
      }
      arg4 = ptr;
    }
    try {
      std_vector_Sl_double_Sg____setslice__(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),(std::vector< double,std::allocator< double > > const &)*arg4);
    } catch(std::out_of_range &_e) {
      SWIG_R_Raise(SWIG_R_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))), SWIGTYPE_p_std__out_of_range, SWIG_POINTER_OWN), "C/C++ exception of type " "std::out_of_range"); return R_NilValue;
    } catch(std::invalid_argument &_e) {
      SWIG_R_Raise(SWIG_R_NewPointerObj((new std::invalid_argument(static_cast< const std::invalid_argument& >(_e))), SWIGTYPE_p_std__invalid_argument, SWIG_POINTER_OWN), "C/C++ exception of type " "std::invalid_argument"); return R_NilValue;
    }
    r_ans = R_NilValue;
    if (SWIG_IsNewObj(res4)) delete arg4;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
    if (SWIG_IsNewObj(res4)) delete arg4;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_vector_double___delslice__ ( SEXP self, SEXP i, SEXP j)
{
  {
    std::vector< double > *arg1 = (std::vector< double > *) 0 ;
    std::vector< double >::difference_type arg2 ;
    std::vector< double >::difference_type arg3 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int val3 ;
    int ecode3 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double___delslice__" "', argument " "1"" of type '" "std::vector< double > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< double > * >(argp1);
    ecode2 = SWIG_AsVal_int(i, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_double___delslice__" "', argument " "2"" of type '" "std::vector< double >::difference_type""'");
    } 
    arg2 = static_cast< std::vector< double >::difference_type >(val2);
    ecode3 = SWIG_AsVal_int(j, &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_double___delslice__" "', argument " "3"" of type '" "std::vector< double >::difference_type""'");
    } 
    arg3 = static_cast< std::vector< double >::difference_type >(val3);
    try {
      std_vector_Sl_double_Sg____delslice__(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
    } catch(std::out_of_range &_e) {
      SWIG_R_Raise(SWIG_R_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))), SWIGTYPE_p_std__out_of_range, SWIG_POINTER_OWN), "C/C++ exception of type " "std::out_of_range"); return R_NilValue;
    }
    r_ans = R_NilValue;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_vector_double___delitem__ ( SEXP self, SEXP i)
{
  {
    std::vector< double > *arg1 = (std::vector< double > *) 0 ;
    std::vector< double >::difference_type arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double___delitem__" "', argument " "1"" of type '" "std::vector< double > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< double > * >(argp1);
    ecode2 = SWIG_AsVal_int(i, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_double___delitem__" "', argument " "2"" of type '" "std::vector< double >::difference_type""'");
    } 
    arg2 = static_cast< std::vector< double >::difference_type >(val2);
    try {
      std_vector_Sl_double_Sg____delitem__(arg1,SWIG_STD_MOVE(arg2));
    } catch(std::out_of_range &_e) {
      SWIG_R_Raise(SWIG_R_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))), SWIGTYPE_p_std__out_of_range, SWIG_POINTER_OWN), "C/C++ exception of type " "std::out_of_range"); return R_NilValue;
    }
    r_ans = R_NilValue;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_vector_double___getitem__ ( SEXP self, SEXP i, SEXP s_swig_copy)
{
  {
    std::vector< double >::value_type *result = 0 ;
    std::vector< double > *arg1 = (std::vector< double > *) 0 ;
    std::vector< double >::difference_type arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double___getitem__" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< double > * >(argp1);
    ecode2 = SWIG_AsVal_int(i, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_double___getitem__" "', argument " "2"" of type '" "std::vector< double >::difference_type""'");
    } 
    arg2 = static_cast< std::vector< double >::difference_type >(val2);
    try {
      result = (std::vector< double >::value_type *) &std_vector_Sl_double_Sg____getitem__((std::vector< double > const *)arg1,SWIG_STD_MOVE(arg2));
    } catch(std::out_of_range &_e) {
      SWIG_R_Raise(SWIG_R_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))), SWIGTYPE_p_std__out_of_range, SWIG_POINTER_OWN), "C/C++ exception of type " "std::out_of_range"); return R_NilValue;
    }
    r_ans = SWIG_From_double(static_cast< double >(*result));
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_vector_double___setitem__ ( SEXP self, SEXP i, SEXP x)
{
  {
    std::vector< double > *arg1 = (std::vector< double > *) 0 ;
    std::vector< double >::difference_type arg2 ;
    std::vector< double >::value_type *arg3 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    std::vector< double >::value_type temp3 ;
    double val3 ;
    int ecode3 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double___setitem__" "', argument " "1"" of type '" "std::vector< double > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< double > * >(argp1);
    ecode2 = SWIG_AsVal_int(i, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_double___setitem__" "', argument " "2"" of type '" "std::vector< double >::difference_type""'");
    } 
    arg2 = static_cast< std::vector< double >::difference_type >(val2);
    ecode3 = SWIG_AsVal_double(x, &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_double___setitem__" "', argument " "3"" of type '" "std::vector< double >::value_type""'");
    } 
    temp3 = static_cast< std::vector< double >::value_type >(val3);
    arg3 = &temp3;
    try {
      std_vector_Sl_double_Sg____setitem__(arg1,SWIG_STD_MOVE(arg2),(double const &)*arg3);
    } catch(std::out_of_range &_e) {
      SWIG_R_Raise(SWIG_R_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))), SWIGTYPE_p_std__out_of_range, SWIG_POINTER_OWN), "C/C++ exception of type " "std::out_of_range"); return R_NilValue;
    }
    r_ans = R_NilValue;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_vector_double_append ( SEXP self, SEXP x)
{
  {
    std::vector< double > *arg1 = (std::vector< double > *) 0 ;
    std::vector< double >::value_type *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    std::vector< double >::value_type temp2 ;
    double val2 ;
    int ecode2 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_append" "', argument " "1"" of type '" "std::vector< double > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< double > * >(argp1);
    ecode2 = SWIG_AsVal_double(x, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_double_append" "', argument " "2"" of type '" "std::vector< double >::value_type""'");
    } 
    temp2 = static_cast< std::vector< double >::value_type >(val2);
    arg2 = &temp2;
    std_vector_Sl_double_Sg__append(arg1,(double const &)*arg2);
    r_ans = R_NilValue;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_new_vector_double__SWIG_0 ( )
{
  {
    std::vector< double > *result = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    result = (std::vector< double > *)new std::vector< double >();
    r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, SWIG_POINTER_OWN |  0 );
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_new_vector_double__SWIG_1 ( SEXP other)
{
  {
    std::vector< double > *result = 0 ;
    std::vector< double > *arg1 = 0 ;
    int res1 = SWIG_OLDOBJ ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    {
      std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
      res1 = swig::asptr(other, &ptr);
      if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_vector_double" "', argument " "1"" of type '" "std::vector< double > const &""'"); 
      }
      if (!ptr) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_vector_double" "', argument " "1"" of type '" "std::vector< double > const &""'"); 
      }
      arg1 = ptr;
    }
    result = (std::vector< double > *)new std::vector< double >((std::vector< double > const &)*arg1);
    r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, SWIG_POINTER_OWN |  0 );
    if (SWIG_IsNewObj(res1)) delete arg1;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
    if (SWIG_IsNewObj(res1)) delete arg1;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_vector_double_empty ( SEXP self, SEXP s_swig_copy)
{
  {
    bool result;
    std::vector< double > *arg1 = (std::vector< double > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_empty" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< double > * >(argp1);
    result = (bool)((std::vector< double > const *)arg1)->empty();
    r_ans = Rf_ScalarLogical(result);
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_vector_double_size ( SEXP self, SEXP s_swig_copy)
{
  {
    std::vector< double >::size_type result;
    std::vector< double > *arg1 = (std::vector< double > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_size" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< double > * >(argp1);
    result = ((std::vector< double > const *)arg1)->size();
    r_ans = SWIG_From_int(static_cast< int >(result));
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_vector_double_swap ( SEXP self, SEXP v)
{
  {
    std::vector< double > *arg1 = (std::vector< double > *) 0 ;
    std::vector< double > *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_swap" "', argument " "1"" of type '" "std::vector< double > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< double > * >(argp1);
    res2 = SWIG_R_ConvertPtr(v, &argp2, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vector_double_swap" "', argument " "2"" of type '" "std::vector< double > &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_double_swap" "', argument " "2"" of type '" "std::vector< double > &""'"); 
    }
    arg2 = reinterpret_cast< std::vector< double > * >(argp2);
    (arg1)->swap(*arg2);
    r_ans = R_NilValue;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_vector_double_clear ( SEXP self)
{
  {
    std::vector< double > *arg1 = (std::vector< double > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_clear" "', argument " "1"" of type '" "std::vector< double > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< double > * >(argp1);
    (arg1)->clear();
    r_ans = R_NilValue;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_vector_double_get_allocator ( SEXP self, SEXP s_swig_copy)
{
  {
    SwigValueWrapper< std::allocator< double > > result;
    std::vector< double > *arg1 = (std::vector< double > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_get_allocator" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< double > * >(argp1);
    result = ((std::vector< double > const *)arg1)->get_allocator();
    r_ans = SWIG_R_NewPointerObj((new std::vector< double >::allocator_type(result)), SWIGTYPE_p_std__allocatorT_double_t, SWIG_POINTER_OWN |  0 );
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_new_vector_double__SWIG_2 ( SEXP size)
{
  {
    std::vector< double > *result = 0 ;
    std::vector< double >::size_type arg1 ;
    int val1 ;
    int ecode1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    ecode1 = SWIG_AsVal_int(size, &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_vector_double" "', argument " "1"" of type '" "std::vector< double >::size_type""'");
    } 
    arg1 = static_cast< std::vector< double >::size_type >(val1);
    result = (std::vector< double > *)new std::vector< double >(arg1);
    r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, SWIG_POINTER_OWN |  0 );
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_vector_double_pop_back ( SEXP self)
{
  {
    std::vector< double > *arg1 = (std::vector< double > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_pop_back" "', argument " "1"" of type '" "std::vector< double > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< double > * >(argp1);
    (arg1)->pop_back();
    r_ans = R_NilValue;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_vector_double_resize__SWIG_0 ( SEXP self, SEXP new_size)
{
  {
    std::vector< double > *arg1 = (std::vector< double > *) 0 ;
    std::vector< double >::size_type arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_resize" "', argument " "1"" of type '" "std::vector< double > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< double > * >(argp1);
    ecode2 = SWIG_AsVal_int(new_size, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_double_resize" "', argument " "2"" of type '" "std::vector< double >::size_type""'");
    } 
    arg2 = static_cast< std::vector< double >::size_type >(val2);
    (arg1)->resize(arg2);
    r_ans = R_NilValue;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_new_vector_double__SWIG_3 ( SEXP size, SEXP value)
{
  {
    std::vector< double > *result = 0 ;
    std::vector< double >::size_type arg1 ;
    std::vector< double >::value_type *arg2 = 0 ;
    int val1 ;
    int ecode1 = 0 ;
    std::vector< double >::value_type temp2 ;
    double val2 ;
    int ecode2 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    ecode1 = SWIG_AsVal_int(size, &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_vector_double" "', argument " "1"" of type '" "std::vector< double >::size_type""'");
    } 
    arg1 = static_cast< std::vector< double >::size_type >(val1);
    ecode2 = SWIG_AsVal_double(value, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_vector_double" "', argument " "2"" of type '" "std::vector< double >::value_type""'");
    } 
    temp2 = static_cast< std::vector< double >::value_type >(val2);
    arg2 = &temp2;
    result = (std::vector< double > *)new std::vector< double >(arg1,(std::vector< double >::value_type const &)*arg2);
    r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, SWIG_POINTER_OWN |  0 );
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_vector_double_push_back ( SEXP self, SEXP x)
{
  {
    std::vector< double > *arg1 = (std::vector< double > *) 0 ;
    std::vector< double >::value_type *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    std::vector< double >::value_type temp2 ;
    double val2 ;
    int ecode2 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_push_back" "', argument " "1"" of type '" "std::vector< double > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< double > * >(argp1);
    ecode2 = SWIG_AsVal_double(x, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_double_push_back" "', argument " "2"" of type '" "std::vector< double >::value_type""'");
    } 
    temp2 = static_cast< std::vector< double >::value_type >(val2);
    arg2 = &temp2;
    (arg1)->push_back((std::vector< double >::value_type const &)*arg2);
    r_ans = R_NilValue;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_vector_double_front ( SEXP self, SEXP s_swig_copy)
{
  {
    std::vector< double >::value_type *result = 0 ;
    std::vector< double > *arg1 = (std::vector< double > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_front" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< double > * >(argp1);
    result = (std::vector< double >::value_type *) &((std::vector< double > const *)arg1)->front();
    r_ans = SWIG_From_double(static_cast< double >(*result));
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_vector_double_back ( SEXP self, SEXP s_swig_copy)
{
  {
    std::vector< double >::value_type *result = 0 ;
    std::vector< double > *arg1 = (std::vector< double > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_back" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< double > * >(argp1);
    result = (std::vector< double >::value_type *) &((std::vector< double > const *)arg1)->back();
    r_ans = SWIG_From_double(static_cast< double >(*result));
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_vector_double_assign ( SEXP self, SEXP n, SEXP x)
{
  {
    std::vector< double > *arg1 = (std::vector< double > *) 0 ;
    std::vector< double >::size_type arg2 ;
    std::vector< double >::value_type *arg3 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    std::vector< double >::value_type temp3 ;
    double val3 ;
    int ecode3 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_assign" "', argument " "1"" of type '" "std::vector< double > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< double > * >(argp1);
    ecode2 = SWIG_AsVal_int(n, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_double_assign" "', argument " "2"" of type '" "std::vector< double >::size_type""'");
    } 
    arg2 = static_cast< std::vector< double >::size_type >(val2);
    ecode3 = SWIG_AsVal_double(x, &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_double_assign" "', argument " "3"" of type '" "std::vector< double >::value_type""'");
    } 
    temp3 = static_cast< std::vector< double >::value_type >(val3);
    arg3 = &temp3;
    (arg1)->assign(arg2,(std::vector< double >::value_type const &)*arg3);
    r_ans = R_NilValue;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_vector_double_resize__SWIG_1 ( SEXP self, SEXP new_size, SEXP x)
{
  {
    std::vector< double > *arg1 = (std::vector< double > *) 0 ;
    std::vector< double >::size_type arg2 ;
    std::vector< double >::value_type *arg3 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    std::vector< double >::value_type temp3 ;
    double val3 ;
    int ecode3 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_resize" "', argument " "1"" of type '" "std::vector< double > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< double > * >(argp1);
    ecode2 = SWIG_AsVal_int(new_size, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_double_resize" "', argument " "2"" of type '" "std::vector< double >::size_type""'");
    } 
    arg2 = static_cast< std::vector< double >::size_type >(val2);
    ecode3 = SWIG_AsVal_double(x, &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_double_resize" "', argument " "3"" of type '" "std::vector< double >::value_type""'");
    } 
    temp3 = static_cast< std::vector< double >::value_type >(val3);
    arg3 = &temp3;
    (arg1)->resize(arg2,(std::vector< double >::value_type const &)*arg3);
    r_ans = R_NilValue;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_vector_double_reserve ( SEXP self, SEXP n)
{
  {
    std::vector< double > *arg1 = (std::vector< double > *) 0 ;
    std::vector< double >::size_type arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_reserve" "', argument " "1"" of type '" "std::vector< double > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< double > * >(argp1);
    ecode2 = SWIG_AsVal_int(n, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_double_reserve" "', argument " "2"" of type '" "std::vector< double >::size_type""'");
    } 
    arg2 = static_cast< std::vector< double >::size_type >(val2);
    (arg1)->reserve(arg2);
    r_ans = R_NilValue;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_vector_double_capacity ( SEXP self, SEXP s_swig_copy)
{
  {
    std::vector< double >::size_type result;
    std::vector< double > *arg1 = (std::vector< double > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_capacity" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< double > * >(argp1);
    result = ((std::vector< double > const *)arg1)->capacity();
    r_ans = SWIG_From_int(static_cast< int >(result));
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_delete_vector_double ( SEXP self)
{
  {
    std::vector< double > *arg1 = (std::vector< double > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_vector_double" "', argument " "1"" of type '" "std::vector< double > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< double > * >(argp1);
    delete arg1;
    r_ans = R_NilValue;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    R_ClearExternalPtr(self);
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_vector_pair_timeseries___nonzero__ ( SEXP self, SEXP s_swig_copy)
{
  {
    bool result;
    std::vector< Pair< cweeDateTime,float > > *arg1 = (std::vector< Pair< cweeDateTime,float > > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_PairT_cweeDateTime_float_t_std__allocatorT_PairT_cweeDateTime_float_t_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_pair_timeseries___nonzero__" "', argument " "1"" of type '" "std::vector< Pair< cweeDateTime,float > > const *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< Pair< cweeDateTime,float > > * >(argp1);
    result = (bool)std_vector_Sl_Pair_Sl_cweeDateTime_Sc_float_Sg__Sg____nonzero__((std::vector< Pair< cweeDateTime,float > > const *)arg1);
    r_ans = Rf_ScalarLogical(result);
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_vector_pair_timeseries___len__ ( SEXP self, SEXP s_swig_copy)
{
  {
    std::vector< Pair< cweeDateTime,float > >::size_type result;
    std::vector< Pair< cweeDateTime,float > > *arg1 = (std::vector< Pair< cweeDateTime,float > > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_PairT_cweeDateTime_float_t_std__allocatorT_PairT_cweeDateTime_float_t_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_pair_timeseries___len__" "', argument " "1"" of type '" "std::vector< Pair< cweeDateTime,float > > const *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< Pair< cweeDateTime,float > > * >(argp1);
    result = std_vector_Sl_Pair_Sl_cweeDateTime_Sc_float_Sg__Sg____len__((std::vector< Pair< cweeDateTime,float > > const *)arg1);
    r_ans = SWIG_From_int(static_cast< int >(result));
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_vector_pair_timeseries_pop ( SEXP self, SEXP s_swig_copy)
{
  {
    std::vector< Pair< cweeDateTime,float > >::value_type result;
    std::vector< Pair< cweeDateTime,float > > *arg1 = (std::vector< Pair< cweeDateTime,float > > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_PairT_cweeDateTime_float_t_std__allocatorT_PairT_cweeDateTime_float_t_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_pair_timeseries_pop" "', argument " "1"" of type '" "std::vector< Pair< cweeDateTime,float > > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< Pair< cweeDateTime,float > > * >(argp1);
    try {
      result = std_vector_Sl_Pair_Sl_cweeDateTime_Sc_float_Sg__Sg__pop(arg1);
    } catch(std::out_of_range &_e) {
      SWIG_R_Raise(SWIG_R_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))), SWIGTYPE_p_std__out_of_range, SWIG_POINTER_OWN), "C/C++ exception of type " "std::out_of_range"); return R_NilValue;
    }
    r_ans = SWIG_R_NewPointerObj((new std::vector< Pair< cweeDateTime,float > >::value_type(result)), SWIGTYPE_p_PairT_cweeDateTime_float_t, SWIG_POINTER_OWN |  0 );
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_vector_pair_timeseries___getslice__ ( SEXP self, SEXP i, SEXP j)
{
  {
    std::vector< Pair< cweeDateTime,float >,std::allocator< Pair< cweeDateTime,float > > > *result = 0 ;
    std::vector< Pair< cweeDateTime,float > > *arg1 = (std::vector< Pair< cweeDateTime,float > > *) 0 ;
    std::vector< Pair< cweeDateTime,float > >::difference_type arg2 ;
    std::vector< Pair< cweeDateTime,float > >::difference_type arg3 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int val3 ;
    int ecode3 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_PairT_cweeDateTime_float_t_std__allocatorT_PairT_cweeDateTime_float_t_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_pair_timeseries___getslice__" "', argument " "1"" of type '" "std::vector< Pair< cweeDateTime,float > > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< Pair< cweeDateTime,float > > * >(argp1);
    ecode2 = SWIG_AsVal_int(i, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_pair_timeseries___getslice__" "', argument " "2"" of type '" "std::vector< Pair< cweeDateTime,float > >::difference_type""'");
    } 
    arg2 = static_cast< std::vector< Pair< cweeDateTime,float > >::difference_type >(val2);
    ecode3 = SWIG_AsVal_int(j, &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_pair_timeseries___getslice__" "', argument " "3"" of type '" "std::vector< Pair< cweeDateTime,float > >::difference_type""'");
    } 
    arg3 = static_cast< std::vector< Pair< cweeDateTime,float > >::difference_type >(val3);
    try {
      result = (std::vector< Pair< cweeDateTime,float >,std::allocator< Pair< cweeDateTime,float > > > *)std_vector_Sl_Pair_Sl_cweeDateTime_Sc_float_Sg__Sg____getslice__(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
    } catch(std::out_of_range &_e) {
      SWIG_R_Raise(SWIG_R_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))), SWIGTYPE_p_std__out_of_range, SWIG_POINTER_OWN), "C/C++ exception of type " "std::out_of_range"); return R_NilValue;
    }
    r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_PairT_cweeDateTime_float_t_std__allocatorT_PairT_cweeDateTime_float_t_t_t, SWIG_POINTER_OWN |  0 );
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_vector_pair_timeseries___setslice__ ( SEXP self, SEXP i, SEXP j, SEXP v)
{
  {
    std::vector< Pair< cweeDateTime,float > > *arg1 = (std::vector< Pair< cweeDateTime,float > > *) 0 ;
    std::vector< Pair< cweeDateTime,float > >::difference_type arg2 ;
    std::vector< Pair< cweeDateTime,float > >::difference_type arg3 ;
    std::vector< Pair< cweeDateTime,float >,std::allocator< Pair< cweeDateTime,float > > > *arg4 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int val3 ;
    int ecode3 = 0 ;
    int res4 = SWIG_OLDOBJ ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_PairT_cweeDateTime_float_t_std__allocatorT_PairT_cweeDateTime_float_t_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_pair_timeseries___setslice__" "', argument " "1"" of type '" "std::vector< Pair< cweeDateTime,float > > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< Pair< cweeDateTime,float > > * >(argp1);
    ecode2 = SWIG_AsVal_int(i, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_pair_timeseries___setslice__" "', argument " "2"" of type '" "std::vector< Pair< cweeDateTime,float > >::difference_type""'");
    } 
    arg2 = static_cast< std::vector< Pair< cweeDateTime,float > >::difference_type >(val2);
    ecode3 = SWIG_AsVal_int(j, &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_pair_timeseries___setslice__" "', argument " "3"" of type '" "std::vector< Pair< cweeDateTime,float > >::difference_type""'");
    } 
    arg3 = static_cast< std::vector< Pair< cweeDateTime,float > >::difference_type >(val3);
    {
      std::vector< Pair< cweeDateTime,float >,std::allocator< Pair< cweeDateTime,float > > > *ptr = (std::vector< Pair< cweeDateTime,float >,std::allocator< Pair< cweeDateTime,float > > > *)0;
      res4 = swig::asptr(v, &ptr);
      if (!SWIG_IsOK(res4)) {
        SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "vector_pair_timeseries___setslice__" "', argument " "4"" of type '" "std::vector< Pair< cweeDateTime,float >,std::allocator< Pair< cweeDateTime,float > > > const &""'"); 
      }
      if (!ptr) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_pair_timeseries___setslice__" "', argument " "4"" of type '" "std::vector< Pair< cweeDateTime,float >,std::allocator< Pair< cweeDateTime,float > > > const &""'"); 
      }
      arg4 = ptr;
    }
    try {
      std_vector_Sl_Pair_Sl_cweeDateTime_Sc_float_Sg__Sg____setslice__(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),(std::vector< Pair< cweeDateTime,float >,std::allocator< Pair< cweeDateTime,float > > > const &)*arg4);
    } catch(std::out_of_range &_e) {
      SWIG_R_Raise(SWIG_R_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))), SWIGTYPE_p_std__out_of_range, SWIG_POINTER_OWN), "C/C++ exception of type " "std::out_of_range"); return R_NilValue;
    } catch(std::invalid_argument &_e) {
      SWIG_R_Raise(SWIG_R_NewPointerObj((new std::invalid_argument(static_cast< const std::invalid_argument& >(_e))), SWIGTYPE_p_std__invalid_argument, SWIG_POINTER_OWN), "C/C++ exception of type " "std::invalid_argument"); return R_NilValue;
    }
    r_ans = R_NilValue;
    if (SWIG_IsNewObj(res4)) delete arg4;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
    if (SWIG_IsNewObj(res4)) delete arg4;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_vector_pair_timeseries___delslice__ ( SEXP self, SEXP i, SEXP j)
{
  {
    std::vector< Pair< cweeDateTime,float > > *arg1 = (std::vector< Pair< cweeDateTime,float > > *) 0 ;
    std::vector< Pair< cweeDateTime,float > >::difference_type arg2 ;
    std::vector< Pair< cweeDateTime,float > >::difference_type arg3 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int val3 ;
    int ecode3 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_PairT_cweeDateTime_float_t_std__allocatorT_PairT_cweeDateTime_float_t_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_pair_timeseries___delslice__" "', argument " "1"" of type '" "std::vector< Pair< cweeDateTime,float > > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< Pair< cweeDateTime,float > > * >(argp1);
    ecode2 = SWIG_AsVal_int(i, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_pair_timeseries___delslice__" "', argument " "2"" of type '" "std::vector< Pair< cweeDateTime,float > >::difference_type""'");
    } 
    arg2 = static_cast< std::vector< Pair< cweeDateTime,float > >::difference_type >(val2);
    ecode3 = SWIG_AsVal_int(j, &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_pair_timeseries___delslice__" "', argument " "3"" of type '" "std::vector< Pair< cweeDateTime,float > >::difference_type""'");
    } 
    arg3 = static_cast< std::vector< Pair< cweeDateTime,float > >::difference_type >(val3);
    try {
      std_vector_Sl_Pair_Sl_cweeDateTime_Sc_float_Sg__Sg____delslice__(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
    } catch(std::out_of_range &_e) {
      SWIG_R_Raise(SWIG_R_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))), SWIGTYPE_p_std__out_of_range, SWIG_POINTER_OWN), "C/C++ exception of type " "std::out_of_range"); return R_NilValue;
    }
    r_ans = R_NilValue;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_vector_pair_timeseries___delitem__ ( SEXP self, SEXP i)
{
  {
    std::vector< Pair< cweeDateTime,float > > *arg1 = (std::vector< Pair< cweeDateTime,float > > *) 0 ;
    std::vector< Pair< cweeDateTime,float > >::difference_type arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_PairT_cweeDateTime_float_t_std__allocatorT_PairT_cweeDateTime_float_t_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_pair_timeseries___delitem__" "', argument " "1"" of type '" "std::vector< Pair< cweeDateTime,float > > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< Pair< cweeDateTime,float > > * >(argp1);
    ecode2 = SWIG_AsVal_int(i, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_pair_timeseries___delitem__" "', argument " "2"" of type '" "std::vector< Pair< cweeDateTime,float > >::difference_type""'");
    } 
    arg2 = static_cast< std::vector< Pair< cweeDateTime,float > >::difference_type >(val2);
    try {
      std_vector_Sl_Pair_Sl_cweeDateTime_Sc_float_Sg__Sg____delitem__(arg1,SWIG_STD_MOVE(arg2));
    } catch(std::out_of_range &_e) {
      SWIG_R_Raise(SWIG_R_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))), SWIGTYPE_p_std__out_of_range, SWIG_POINTER_OWN), "C/C++ exception of type " "std::out_of_range"); return R_NilValue;
    }
    r_ans = R_NilValue;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_vector_pair_timeseries___getitem__ ( SEXP self, SEXP i, SEXP s_swig_copy)
{
  {
    std::vector< Pair< cweeDateTime,float > >::value_type *result = 0 ;
    std::vector< Pair< cweeDateTime,float > > *arg1 = (std::vector< Pair< cweeDateTime,float > > *) 0 ;
    std::vector< Pair< cweeDateTime,float > >::difference_type arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_PairT_cweeDateTime_float_t_std__allocatorT_PairT_cweeDateTime_float_t_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_pair_timeseries___getitem__" "', argument " "1"" of type '" "std::vector< Pair< cweeDateTime,float > > const *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< Pair< cweeDateTime,float > > * >(argp1);
    ecode2 = SWIG_AsVal_int(i, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_pair_timeseries___getitem__" "', argument " "2"" of type '" "std::vector< Pair< cweeDateTime,float > >::difference_type""'");
    } 
    arg2 = static_cast< std::vector< Pair< cweeDateTime,float > >::difference_type >(val2);
    try {
      result = (std::vector< Pair< cweeDateTime,float > >::value_type *) &std_vector_Sl_Pair_Sl_cweeDateTime_Sc_float_Sg__Sg____getitem__((std::vector< Pair< cweeDateTime,float > > const *)arg1,SWIG_STD_MOVE(arg2));
    } catch(std::out_of_range &_e) {
      SWIG_R_Raise(SWIG_R_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))), SWIGTYPE_p_std__out_of_range, SWIG_POINTER_OWN), "C/C++ exception of type " "std::out_of_range"); return R_NilValue;
    }
    r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_PairT_cweeDateTime_float_t, 0 |  0 );
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_vector_pair_timeseries___setitem__ ( SEXP self, SEXP i, SEXP x)
{
  {
    std::vector< Pair< cweeDateTime,float > > *arg1 = (std::vector< Pair< cweeDateTime,float > > *) 0 ;
    std::vector< Pair< cweeDateTime,float > >::difference_type arg2 ;
    std::vector< Pair< cweeDateTime,float > >::value_type *arg3 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    void *argp3 = 0 ;
    int res3 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_PairT_cweeDateTime_float_t_std__allocatorT_PairT_cweeDateTime_float_t_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_pair_timeseries___setitem__" "', argument " "1"" of type '" "std::vector< Pair< cweeDateTime,float > > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< Pair< cweeDateTime,float > > * >(argp1);
    ecode2 = SWIG_AsVal_int(i, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_pair_timeseries___setitem__" "', argument " "2"" of type '" "std::vector< Pair< cweeDateTime,float > >::difference_type""'");
    } 
    arg2 = static_cast< std::vector< Pair< cweeDateTime,float > >::difference_type >(val2);
    res3 = SWIG_R_ConvertPtr(x, &argp3, SWIGTYPE_p_PairT_cweeDateTime_float_t,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vector_pair_timeseries___setitem__" "', argument " "3"" of type '" "std::vector< Pair< cweeDateTime,float > >::value_type const &""'"); 
    }
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_pair_timeseries___setitem__" "', argument " "3"" of type '" "std::vector< Pair< cweeDateTime,float > >::value_type const &""'"); 
    }
    arg3 = reinterpret_cast< std::vector< Pair< cweeDateTime,float > >::value_type * >(argp3);
    try {
      std_vector_Sl_Pair_Sl_cweeDateTime_Sc_float_Sg__Sg____setitem__(arg1,SWIG_STD_MOVE(arg2),(Pair< cweeDateTime,float > const &)*arg3);
    } catch(std::out_of_range &_e) {
      SWIG_R_Raise(SWIG_R_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))), SWIGTYPE_p_std__out_of_range, SWIG_POINTER_OWN), "C/C++ exception of type " "std::out_of_range"); return R_NilValue;
    }
    r_ans = R_NilValue;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_vector_pair_timeseries_append ( SEXP self, SEXP x)
{
  {
    std::vector< Pair< cweeDateTime,float > > *arg1 = (std::vector< Pair< cweeDateTime,float > > *) 0 ;
    std::vector< Pair< cweeDateTime,float > >::value_type *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_PairT_cweeDateTime_float_t_std__allocatorT_PairT_cweeDateTime_float_t_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_pair_timeseries_append" "', argument " "1"" of type '" "std::vector< Pair< cweeDateTime,float > > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< Pair< cweeDateTime,float > > * >(argp1);
    res2 = SWIG_R_ConvertPtr(x, &argp2, SWIGTYPE_p_PairT_cweeDateTime_float_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vector_pair_timeseries_append" "', argument " "2"" of type '" "std::vector< Pair< cweeDateTime,float > >::value_type const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_pair_timeseries_append" "', argument " "2"" of type '" "std::vector< Pair< cweeDateTime,float > >::value_type const &""'"); 
    }
    arg2 = reinterpret_cast< std::vector< Pair< cweeDateTime,float > >::value_type * >(argp2);
    std_vector_Sl_Pair_Sl_cweeDateTime_Sc_float_Sg__Sg__append(arg1,(Pair< cweeDateTime,float > const &)*arg2);
    r_ans = R_NilValue;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_new_vector_pair_timeseries__SWIG_0 ( )
{
  {
    std::vector< Pair< cweeDateTime,float > > *result = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    result = (std::vector< Pair< cweeDateTime,float > > *)new std::vector< Pair< cweeDateTime,float > >();
    r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_PairT_cweeDateTime_float_t_std__allocatorT_PairT_cweeDateTime_float_t_t_t, SWIG_POINTER_OWN |  0 );
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_new_vector_pair_timeseries__SWIG_1 ( SEXP other)
{
  {
    std::vector< Pair< cweeDateTime,float > > *result = 0 ;
    std::vector< Pair< cweeDateTime,float > > *arg1 = 0 ;
    int res1 = SWIG_OLDOBJ ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    {
      std::vector< Pair< cweeDateTime,float >,std::allocator< Pair< cweeDateTime,float > > > *ptr = (std::vector< Pair< cweeDateTime,float >,std::allocator< Pair< cweeDateTime,float > > > *)0;
      res1 = swig::asptr(other, &ptr);
      if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_vector_pair_timeseries" "', argument " "1"" of type '" "std::vector< Pair< cweeDateTime,float > > const &""'"); 
      }
      if (!ptr) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_vector_pair_timeseries" "', argument " "1"" of type '" "std::vector< Pair< cweeDateTime,float > > const &""'"); 
      }
      arg1 = ptr;
    }
    result = (std::vector< Pair< cweeDateTime,float > > *)new std::vector< Pair< cweeDateTime,float > >((std::vector< Pair< cweeDateTime,float > > const &)*arg1);
    r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_PairT_cweeDateTime_float_t_std__allocatorT_PairT_cweeDateTime_float_t_t_t, SWIG_POINTER_OWN |  0 );
    if (SWIG_IsNewObj(res1)) delete arg1;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
    if (SWIG_IsNewObj(res1)) delete arg1;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_vector_pair_timeseries_empty ( SEXP self, SEXP s_swig_copy)
{
  {
    bool result;
    std::vector< Pair< cweeDateTime,float > > *arg1 = (std::vector< Pair< cweeDateTime,float > > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_PairT_cweeDateTime_float_t_std__allocatorT_PairT_cweeDateTime_float_t_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_pair_timeseries_empty" "', argument " "1"" of type '" "std::vector< Pair< cweeDateTime,float > > const *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< Pair< cweeDateTime,float > > * >(argp1);
    result = (bool)((std::vector< Pair< cweeDateTime,float > > const *)arg1)->empty();
    r_ans = Rf_ScalarLogical(result);
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_vector_pair_timeseries_size ( SEXP self, SEXP s_swig_copy)
{
  {
    std::vector< Pair< cweeDateTime,float > >::size_type result;
    std::vector< Pair< cweeDateTime,float > > *arg1 = (std::vector< Pair< cweeDateTime,float > > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_PairT_cweeDateTime_float_t_std__allocatorT_PairT_cweeDateTime_float_t_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_pair_timeseries_size" "', argument " "1"" of type '" "std::vector< Pair< cweeDateTime,float > > const *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< Pair< cweeDateTime,float > > * >(argp1);
    result = ((std::vector< Pair< cweeDateTime,float > > const *)arg1)->size();
    r_ans = SWIG_From_int(static_cast< int >(result));
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_vector_pair_timeseries_swap ( SEXP self, SEXP v)
{
  {
    std::vector< Pair< cweeDateTime,float > > *arg1 = (std::vector< Pair< cweeDateTime,float > > *) 0 ;
    std::vector< Pair< cweeDateTime,float > > *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_PairT_cweeDateTime_float_t_std__allocatorT_PairT_cweeDateTime_float_t_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_pair_timeseries_swap" "', argument " "1"" of type '" "std::vector< Pair< cweeDateTime,float > > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< Pair< cweeDateTime,float > > * >(argp1);
    res2 = SWIG_R_ConvertPtr(v, &argp2, SWIGTYPE_p_std__vectorT_PairT_cweeDateTime_float_t_std__allocatorT_PairT_cweeDateTime_float_t_t_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vector_pair_timeseries_swap" "', argument " "2"" of type '" "std::vector< Pair< cweeDateTime,float > > &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_pair_timeseries_swap" "', argument " "2"" of type '" "std::vector< Pair< cweeDateTime,float > > &""'"); 
    }
    arg2 = reinterpret_cast< std::vector< Pair< cweeDateTime,float > > * >(argp2);
    (arg1)->swap(*arg2);
    r_ans = R_NilValue;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_vector_pair_timeseries_clear ( SEXP self)
{
  {
    std::vector< Pair< cweeDateTime,float > > *arg1 = (std::vector< Pair< cweeDateTime,float > > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_PairT_cweeDateTime_float_t_std__allocatorT_PairT_cweeDateTime_float_t_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_pair_timeseries_clear" "', argument " "1"" of type '" "std::vector< Pair< cweeDateTime,float > > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< Pair< cweeDateTime,float > > * >(argp1);
    (arg1)->clear();
    r_ans = R_NilValue;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_vector_pair_timeseries_get_allocator ( SEXP self, SEXP s_swig_copy)
{
  {
    SwigValueWrapper< std::allocator< Pair< cweeDateTime,float > > > result;
    std::vector< Pair< cweeDateTime,float > > *arg1 = (std::vector< Pair< cweeDateTime,float > > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_PairT_cweeDateTime_float_t_std__allocatorT_PairT_cweeDateTime_float_t_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_pair_timeseries_get_allocator" "', argument " "1"" of type '" "std::vector< Pair< cweeDateTime,float > > const *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< Pair< cweeDateTime,float > > * >(argp1);
    result = ((std::vector< Pair< cweeDateTime,float > > const *)arg1)->get_allocator();
    r_ans = SWIG_R_NewPointerObj((new std::vector< Pair< cweeDateTime,float > >::allocator_type(result)), SWIGTYPE_p_std__allocatorT_PairT_cweeDateTime_float_t_t, SWIG_POINTER_OWN |  0 );
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_new_vector_pair_timeseries__SWIG_2 ( SEXP size)
{
  {
    std::vector< Pair< cweeDateTime,float > > *result = 0 ;
    std::vector< Pair< cweeDateTime,float > >::size_type arg1 ;
    int val1 ;
    int ecode1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    ecode1 = SWIG_AsVal_int(size, &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_vector_pair_timeseries" "', argument " "1"" of type '" "std::vector< Pair< cweeDateTime,float > >::size_type""'");
    } 
    arg1 = static_cast< std::vector< Pair< cweeDateTime,float > >::size_type >(val1);
    result = (std::vector< Pair< cweeDateTime,float > > *)new std::vector< Pair< cweeDateTime,float > >(arg1);
    r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_PairT_cweeDateTime_float_t_std__allocatorT_PairT_cweeDateTime_float_t_t_t, SWIG_POINTER_OWN |  0 );
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_vector_pair_timeseries_pop_back ( SEXP self)
{
  {
    std::vector< Pair< cweeDateTime,float > > *arg1 = (std::vector< Pair< cweeDateTime,float > > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_PairT_cweeDateTime_float_t_std__allocatorT_PairT_cweeDateTime_float_t_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_pair_timeseries_pop_back" "', argument " "1"" of type '" "std::vector< Pair< cweeDateTime,float > > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< Pair< cweeDateTime,float > > * >(argp1);
    (arg1)->pop_back();
    r_ans = R_NilValue;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_vector_pair_timeseries_resize__SWIG_0 ( SEXP self, SEXP new_size)
{
  {
    std::vector< Pair< cweeDateTime,float > > *arg1 = (std::vector< Pair< cweeDateTime,float > > *) 0 ;
    std::vector< Pair< cweeDateTime,float > >::size_type arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_PairT_cweeDateTime_float_t_std__allocatorT_PairT_cweeDateTime_float_t_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_pair_timeseries_resize" "', argument " "1"" of type '" "std::vector< Pair< cweeDateTime,float > > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< Pair< cweeDateTime,float > > * >(argp1);
    ecode2 = SWIG_AsVal_int(new_size, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_pair_timeseries_resize" "', argument " "2"" of type '" "std::vector< Pair< cweeDateTime,float > >::size_type""'");
    } 
    arg2 = static_cast< std::vector< Pair< cweeDateTime,float > >::size_type >(val2);
    (arg1)->resize(arg2);
    r_ans = R_NilValue;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_new_vector_pair_timeseries__SWIG_3 ( SEXP size, SEXP value)
{
  {
    std::vector< Pair< cweeDateTime,float > > *result = 0 ;
    std::vector< Pair< cweeDateTime,float > >::size_type arg1 ;
    std::vector< Pair< cweeDateTime,float > >::value_type *arg2 = 0 ;
    int val1 ;
    int ecode1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    ecode1 = SWIG_AsVal_int(size, &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_vector_pair_timeseries" "', argument " "1"" of type '" "std::vector< Pair< cweeDateTime,float > >::size_type""'");
    } 
    arg1 = static_cast< std::vector< Pair< cweeDateTime,float > >::size_type >(val1);
    res2 = SWIG_R_ConvertPtr(value, &argp2, SWIGTYPE_p_PairT_cweeDateTime_float_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_vector_pair_timeseries" "', argument " "2"" of type '" "std::vector< Pair< cweeDateTime,float > >::value_type const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_vector_pair_timeseries" "', argument " "2"" of type '" "std::vector< Pair< cweeDateTime,float > >::value_type const &""'"); 
    }
    arg2 = reinterpret_cast< std::vector< Pair< cweeDateTime,float > >::value_type * >(argp2);
    result = (std::vector< Pair< cweeDateTime,float > > *)new std::vector< Pair< cweeDateTime,float > >(arg1,(std::vector< Pair< cweeDateTime,float > >::value_type const &)*arg2);
    r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_PairT_cweeDateTime_float_t_std__allocatorT_PairT_cweeDateTime_float_t_t_t, SWIG_POINTER_OWN |  0 );
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_vector_pair_timeseries_push_back ( SEXP self, SEXP x)
{
  {
    std::vector< Pair< cweeDateTime,float > > *arg1 = (std::vector< Pair< cweeDateTime,float > > *) 0 ;
    std::vector< Pair< cweeDateTime,float > >::value_type *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_PairT_cweeDateTime_float_t_std__allocatorT_PairT_cweeDateTime_float_t_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_pair_timeseries_push_back" "', argument " "1"" of type '" "std::vector< Pair< cweeDateTime,float > > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< Pair< cweeDateTime,float > > * >(argp1);
    res2 = SWIG_R_ConvertPtr(x, &argp2, SWIGTYPE_p_PairT_cweeDateTime_float_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vector_pair_timeseries_push_back" "', argument " "2"" of type '" "std::vector< Pair< cweeDateTime,float > >::value_type const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_pair_timeseries_push_back" "', argument " "2"" of type '" "std::vector< Pair< cweeDateTime,float > >::value_type const &""'"); 
    }
    arg2 = reinterpret_cast< std::vector< Pair< cweeDateTime,float > >::value_type * >(argp2);
    (arg1)->push_back((std::vector< Pair< cweeDateTime,float > >::value_type const &)*arg2);
    r_ans = R_NilValue;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_vector_pair_timeseries_front ( SEXP self, SEXP s_swig_copy)
{
  {
    std::vector< Pair< cweeDateTime,float > >::value_type *result = 0 ;
    std::vector< Pair< cweeDateTime,float > > *arg1 = (std::vector< Pair< cweeDateTime,float > > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_PairT_cweeDateTime_float_t_std__allocatorT_PairT_cweeDateTime_float_t_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_pair_timeseries_front" "', argument " "1"" of type '" "std::vector< Pair< cweeDateTime,float > > const *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< Pair< cweeDateTime,float > > * >(argp1);
    result = (std::vector< Pair< cweeDateTime,float > >::value_type *) &((std::vector< Pair< cweeDateTime,float > > const *)arg1)->front();
    r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_PairT_cweeDateTime_float_t, 0 |  0 );
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_vector_pair_timeseries_back ( SEXP self, SEXP s_swig_copy)
{
  {
    std::vector< Pair< cweeDateTime,float > >::value_type *result = 0 ;
    std::vector< Pair< cweeDateTime,float > > *arg1 = (std::vector< Pair< cweeDateTime,float > > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_PairT_cweeDateTime_float_t_std__allocatorT_PairT_cweeDateTime_float_t_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_pair_timeseries_back" "', argument " "1"" of type '" "std::vector< Pair< cweeDateTime,float > > const *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< Pair< cweeDateTime,float > > * >(argp1);
    result = (std::vector< Pair< cweeDateTime,float > >::value_type *) &((std::vector< Pair< cweeDateTime,float > > const *)arg1)->back();
    r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_PairT_cweeDateTime_float_t, 0 |  0 );
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_vector_pair_timeseries_assign ( SEXP self, SEXP n, SEXP x)
{
  {
    std::vector< Pair< cweeDateTime,float > > *arg1 = (std::vector< Pair< cweeDateTime,float > > *) 0 ;
    std::vector< Pair< cweeDateTime,float > >::size_type arg2 ;
    std::vector< Pair< cweeDateTime,float > >::value_type *arg3 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    void *argp3 = 0 ;
    int res3 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_PairT_cweeDateTime_float_t_std__allocatorT_PairT_cweeDateTime_float_t_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_pair_timeseries_assign" "', argument " "1"" of type '" "std::vector< Pair< cweeDateTime,float > > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< Pair< cweeDateTime,float > > * >(argp1);
    ecode2 = SWIG_AsVal_int(n, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_pair_timeseries_assign" "', argument " "2"" of type '" "std::vector< Pair< cweeDateTime,float > >::size_type""'");
    } 
    arg2 = static_cast< std::vector< Pair< cweeDateTime,float > >::size_type >(val2);
    res3 = SWIG_R_ConvertPtr(x, &argp3, SWIGTYPE_p_PairT_cweeDateTime_float_t,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vector_pair_timeseries_assign" "', argument " "3"" of type '" "std::vector< Pair< cweeDateTime,float > >::value_type const &""'"); 
    }
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_pair_timeseries_assign" "', argument " "3"" of type '" "std::vector< Pair< cweeDateTime,float > >::value_type const &""'"); 
    }
    arg3 = reinterpret_cast< std::vector< Pair< cweeDateTime,float > >::value_type * >(argp3);
    (arg1)->assign(arg2,(std::vector< Pair< cweeDateTime,float > >::value_type const &)*arg3);
    r_ans = R_NilValue;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_vector_pair_timeseries_resize__SWIG_1 ( SEXP self, SEXP new_size, SEXP x)
{
  {
    std::vector< Pair< cweeDateTime,float > > *arg1 = (std::vector< Pair< cweeDateTime,float > > *) 0 ;
    std::vector< Pair< cweeDateTime,float > >::size_type arg2 ;
    std::vector< Pair< cweeDateTime,float > >::value_type *arg3 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    void *argp3 = 0 ;
    int res3 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_PairT_cweeDateTime_float_t_std__allocatorT_PairT_cweeDateTime_float_t_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_pair_timeseries_resize" "', argument " "1"" of type '" "std::vector< Pair< cweeDateTime,float > > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< Pair< cweeDateTime,float > > * >(argp1);
    ecode2 = SWIG_AsVal_int(new_size, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_pair_timeseries_resize" "', argument " "2"" of type '" "std::vector< Pair< cweeDateTime,float > >::size_type""'");
    } 
    arg2 = static_cast< std::vector< Pair< cweeDateTime,float > >::size_type >(val2);
    res3 = SWIG_R_ConvertPtr(x, &argp3, SWIGTYPE_p_PairT_cweeDateTime_float_t,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vector_pair_timeseries_resize" "', argument " "3"" of type '" "std::vector< Pair< cweeDateTime,float > >::value_type const &""'"); 
    }
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_pair_timeseries_resize" "', argument " "3"" of type '" "std::vector< Pair< cweeDateTime,float > >::value_type const &""'"); 
    }
    arg3 = reinterpret_cast< std::vector< Pair< cweeDateTime,float > >::value_type * >(argp3);
    (arg1)->resize(arg2,(std::vector< Pair< cweeDateTime,float > >::value_type const &)*arg3);
    r_ans = R_NilValue;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_vector_pair_timeseries_reserve ( SEXP self, SEXP n)
{
  {
    std::vector< Pair< cweeDateTime,float > > *arg1 = (std::vector< Pair< cweeDateTime,float > > *) 0 ;
    std::vector< Pair< cweeDateTime,float > >::size_type arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_PairT_cweeDateTime_float_t_std__allocatorT_PairT_cweeDateTime_float_t_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_pair_timeseries_reserve" "', argument " "1"" of type '" "std::vector< Pair< cweeDateTime,float > > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< Pair< cweeDateTime,float > > * >(argp1);
    ecode2 = SWIG_AsVal_int(n, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_pair_timeseries_reserve" "', argument " "2"" of type '" "std::vector< Pair< cweeDateTime,float > >::size_type""'");
    } 
    arg2 = static_cast< std::vector< Pair< cweeDateTime,float > >::size_type >(val2);
    (arg1)->reserve(arg2);
    r_ans = R_NilValue;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_vector_pair_timeseries_capacity ( SEXP self, SEXP s_swig_copy)
{
  {
    std::vector< Pair< cweeDateTime,float > >::size_type result;
    std::vector< Pair< cweeDateTime,float > > *arg1 = (std::vector< Pair< cweeDateTime,float > > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_PairT_cweeDateTime_float_t_std__allocatorT_PairT_cweeDateTime_float_t_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_pair_timeseries_capacity" "', argument " "1"" of type '" "std::vector< Pair< cweeDateTime,float > > const *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< Pair< cweeDateTime,float > > * >(argp1);
    result = ((std::vector< Pair< cweeDateTime,float > > const *)arg1)->capacity();
    r_ans = SWIG_From_int(static_cast< int >(result));
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_delete_vector_pair_timeseries ( SEXP self)
{
  {
    std::vector< Pair< cweeDateTime,float > > *arg1 = (std::vector< Pair< cweeDateTime,float > > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_PairT_cweeDateTime_float_t_std__allocatorT_PairT_cweeDateTime_float_t_t_t, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_vector_pair_timeseries" "', argument " "1"" of type '" "std::vector< Pair< cweeDateTime,float > > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< Pair< cweeDateTime,float > > * >(argp1);
    delete arg1;
    r_ans = R_NilValue;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    R_ClearExternalPtr(self);
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_vector_pair_double_double___nonzero__ ( SEXP self, SEXP s_swig_copy)
{
  {
    bool result;
    std::vector< Pair< double,double > > *arg1 = (std::vector< Pair< double,double > > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_PairT_double_double_t_std__allocatorT_PairT_double_double_t_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_pair_double_double___nonzero__" "', argument " "1"" of type '" "std::vector< Pair< double,double > > const *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< Pair< double,double > > * >(argp1);
    result = (bool)std_vector_Sl_Pair_Sl_double_Sc_double_Sg__Sg____nonzero__((std::vector< Pair< double,double > > const *)arg1);
    r_ans = Rf_ScalarLogical(result);
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_vector_pair_double_double___len__ ( SEXP self, SEXP s_swig_copy)
{
  {
    std::vector< Pair< double,double > >::size_type result;
    std::vector< Pair< double,double > > *arg1 = (std::vector< Pair< double,double > > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_PairT_double_double_t_std__allocatorT_PairT_double_double_t_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_pair_double_double___len__" "', argument " "1"" of type '" "std::vector< Pair< double,double > > const *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< Pair< double,double > > * >(argp1);
    result = std_vector_Sl_Pair_Sl_double_Sc_double_Sg__Sg____len__((std::vector< Pair< double,double > > const *)arg1);
    r_ans = SWIG_From_int(static_cast< int >(result));
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_vector_pair_double_double_pop ( SEXP self, SEXP s_swig_copy)
{
  {
    std::vector< Pair< double,double > >::value_type result;
    std::vector< Pair< double,double > > *arg1 = (std::vector< Pair< double,double > > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_PairT_double_double_t_std__allocatorT_PairT_double_double_t_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_pair_double_double_pop" "', argument " "1"" of type '" "std::vector< Pair< double,double > > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< Pair< double,double > > * >(argp1);
    try {
      result = std_vector_Sl_Pair_Sl_double_Sc_double_Sg__Sg__pop(arg1);
    } catch(std::out_of_range &_e) {
      SWIG_R_Raise(SWIG_R_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))), SWIGTYPE_p_std__out_of_range, SWIG_POINTER_OWN), "C/C++ exception of type " "std::out_of_range"); return R_NilValue;
    }
    r_ans = SWIG_R_NewPointerObj((new std::vector< Pair< double,double > >::value_type(result)), SWIGTYPE_p_PairT_double_double_t, SWIG_POINTER_OWN |  0 );
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_vector_pair_double_double___getslice__ ( SEXP self, SEXP i, SEXP j)
{
  {
    std::vector< Pair< double,double >,std::allocator< Pair< double,double > > > *result = 0 ;
    std::vector< Pair< double,double > > *arg1 = (std::vector< Pair< double,double > > *) 0 ;
    std::vector< Pair< double,double > >::difference_type arg2 ;
    std::vector< Pair< double,double > >::difference_type arg3 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int val3 ;
    int ecode3 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_PairT_double_double_t_std__allocatorT_PairT_double_double_t_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_pair_double_double___getslice__" "', argument " "1"" of type '" "std::vector< Pair< double,double > > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< Pair< double,double > > * >(argp1);
    ecode2 = SWIG_AsVal_int(i, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_pair_double_double___getslice__" "', argument " "2"" of type '" "std::vector< Pair< double,double > >::difference_type""'");
    } 
    arg2 = static_cast< std::vector< Pair< double,double > >::difference_type >(val2);
    ecode3 = SWIG_AsVal_int(j, &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_pair_double_double___getslice__" "', argument " "3"" of type '" "std::vector< Pair< double,double > >::difference_type""'");
    } 
    arg3 = static_cast< std::vector< Pair< double,double > >::difference_type >(val3);
    try {
      result = (std::vector< Pair< double,double >,std::allocator< Pair< double,double > > > *)std_vector_Sl_Pair_Sl_double_Sc_double_Sg__Sg____getslice__(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
    } catch(std::out_of_range &_e) {
      SWIG_R_Raise(SWIG_R_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))), SWIGTYPE_p_std__out_of_range, SWIG_POINTER_OWN), "C/C++ exception of type " "std::out_of_range"); return R_NilValue;
    }
    r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_PairT_double_double_t_std__allocatorT_PairT_double_double_t_t_t, SWIG_POINTER_OWN |  0 );
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_vector_pair_double_double___setslice__ ( SEXP self, SEXP i, SEXP j, SEXP v)
{
  {
    std::vector< Pair< double,double > > *arg1 = (std::vector< Pair< double,double > > *) 0 ;
    std::vector< Pair< double,double > >::difference_type arg2 ;
    std::vector< Pair< double,double > >::difference_type arg3 ;
    std::vector< Pair< double,double >,std::allocator< Pair< double,double > > > *arg4 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int val3 ;
    int ecode3 = 0 ;
    int res4 = SWIG_OLDOBJ ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_PairT_double_double_t_std__allocatorT_PairT_double_double_t_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_pair_double_double___setslice__" "', argument " "1"" of type '" "std::vector< Pair< double,double > > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< Pair< double,double > > * >(argp1);
    ecode2 = SWIG_AsVal_int(i, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_pair_double_double___setslice__" "', argument " "2"" of type '" "std::vector< Pair< double,double > >::difference_type""'");
    } 
    arg2 = static_cast< std::vector< Pair< double,double > >::difference_type >(val2);
    ecode3 = SWIG_AsVal_int(j, &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_pair_double_double___setslice__" "', argument " "3"" of type '" "std::vector< Pair< double,double > >::difference_type""'");
    } 
    arg3 = static_cast< std::vector< Pair< double,double > >::difference_type >(val3);
    {
      std::vector< Pair< double,double >,std::allocator< Pair< double,double > > > *ptr = (std::vector< Pair< double,double >,std::allocator< Pair< double,double > > > *)0;
      res4 = swig::asptr(v, &ptr);
      if (!SWIG_IsOK(res4)) {
        SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "vector_pair_double_double___setslice__" "', argument " "4"" of type '" "std::vector< Pair< double,double >,std::allocator< Pair< double,double > > > const &""'"); 
      }
      if (!ptr) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_pair_double_double___setslice__" "', argument " "4"" of type '" "std::vector< Pair< double,double >,std::allocator< Pair< double,double > > > const &""'"); 
      }
      arg4 = ptr;
    }
    try {
      std_vector_Sl_Pair_Sl_double_Sc_double_Sg__Sg____setslice__(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),(std::vector< Pair< double,double >,std::allocator< Pair< double,double > > > const &)*arg4);
    } catch(std::out_of_range &_e) {
      SWIG_R_Raise(SWIG_R_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))), SWIGTYPE_p_std__out_of_range, SWIG_POINTER_OWN), "C/C++ exception of type " "std::out_of_range"); return R_NilValue;
    } catch(std::invalid_argument &_e) {
      SWIG_R_Raise(SWIG_R_NewPointerObj((new std::invalid_argument(static_cast< const std::invalid_argument& >(_e))), SWIGTYPE_p_std__invalid_argument, SWIG_POINTER_OWN), "C/C++ exception of type " "std::invalid_argument"); return R_NilValue;
    }
    r_ans = R_NilValue;
    if (SWIG_IsNewObj(res4)) delete arg4;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
    if (SWIG_IsNewObj(res4)) delete arg4;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_vector_pair_double_double___delslice__ ( SEXP self, SEXP i, SEXP j)
{
  {
    std::vector< Pair< double,double > > *arg1 = (std::vector< Pair< double,double > > *) 0 ;
    std::vector< Pair< double,double > >::difference_type arg2 ;
    std::vector< Pair< double,double > >::difference_type arg3 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int val3 ;
    int ecode3 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_PairT_double_double_t_std__allocatorT_PairT_double_double_t_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_pair_double_double___delslice__" "', argument " "1"" of type '" "std::vector< Pair< double,double > > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< Pair< double,double > > * >(argp1);
    ecode2 = SWIG_AsVal_int(i, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_pair_double_double___delslice__" "', argument " "2"" of type '" "std::vector< Pair< double,double > >::difference_type""'");
    } 
    arg2 = static_cast< std::vector< Pair< double,double > >::difference_type >(val2);
    ecode3 = SWIG_AsVal_int(j, &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_pair_double_double___delslice__" "', argument " "3"" of type '" "std::vector< Pair< double,double > >::difference_type""'");
    } 
    arg3 = static_cast< std::vector< Pair< double,double > >::difference_type >(val3);
    try {
      std_vector_Sl_Pair_Sl_double_Sc_double_Sg__Sg____delslice__(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
    } catch(std::out_of_range &_e) {
      SWIG_R_Raise(SWIG_R_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))), SWIGTYPE_p_std__out_of_range, SWIG_POINTER_OWN), "C/C++ exception of type " "std::out_of_range"); return R_NilValue;
    }
    r_ans = R_NilValue;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_vector_pair_double_double___delitem__ ( SEXP self, SEXP i)
{
  {
    std::vector< Pair< double,double > > *arg1 = (std::vector< Pair< double,double > > *) 0 ;
    std::vector< Pair< double,double > >::difference_type arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_PairT_double_double_t_std__allocatorT_PairT_double_double_t_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_pair_double_double___delitem__" "', argument " "1"" of type '" "std::vector< Pair< double,double > > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< Pair< double,double > > * >(argp1);
    ecode2 = SWIG_AsVal_int(i, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_pair_double_double___delitem__" "', argument " "2"" of type '" "std::vector< Pair< double,double > >::difference_type""'");
    } 
    arg2 = static_cast< std::vector< Pair< double,double > >::difference_type >(val2);
    try {
      std_vector_Sl_Pair_Sl_double_Sc_double_Sg__Sg____delitem__(arg1,SWIG_STD_MOVE(arg2));
    } catch(std::out_of_range &_e) {
      SWIG_R_Raise(SWIG_R_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))), SWIGTYPE_p_std__out_of_range, SWIG_POINTER_OWN), "C/C++ exception of type " "std::out_of_range"); return R_NilValue;
    }
    r_ans = R_NilValue;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_vector_pair_double_double___getitem__ ( SEXP self, SEXP i, SEXP s_swig_copy)
{
  {
    std::vector< Pair< double,double > >::value_type *result = 0 ;
    std::vector< Pair< double,double > > *arg1 = (std::vector< Pair< double,double > > *) 0 ;
    std::vector< Pair< double,double > >::difference_type arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_PairT_double_double_t_std__allocatorT_PairT_double_double_t_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_pair_double_double___getitem__" "', argument " "1"" of type '" "std::vector< Pair< double,double > > const *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< Pair< double,double > > * >(argp1);
    ecode2 = SWIG_AsVal_int(i, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_pair_double_double___getitem__" "', argument " "2"" of type '" "std::vector< Pair< double,double > >::difference_type""'");
    } 
    arg2 = static_cast< std::vector< Pair< double,double > >::difference_type >(val2);
    try {
      result = (std::vector< Pair< double,double > >::value_type *) &std_vector_Sl_Pair_Sl_double_Sc_double_Sg__Sg____getitem__((std::vector< Pair< double,double > > const *)arg1,SWIG_STD_MOVE(arg2));
    } catch(std::out_of_range &_e) {
      SWIG_R_Raise(SWIG_R_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))), SWIGTYPE_p_std__out_of_range, SWIG_POINTER_OWN), "C/C++ exception of type " "std::out_of_range"); return R_NilValue;
    }
    r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_PairT_double_double_t, 0 |  0 );
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_vector_pair_double_double___setitem__ ( SEXP self, SEXP i, SEXP x)
{
  {
    std::vector< Pair< double,double > > *arg1 = (std::vector< Pair< double,double > > *) 0 ;
    std::vector< Pair< double,double > >::difference_type arg2 ;
    std::vector< Pair< double,double > >::value_type *arg3 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    void *argp3 = 0 ;
    int res3 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_PairT_double_double_t_std__allocatorT_PairT_double_double_t_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_pair_double_double___setitem__" "', argument " "1"" of type '" "std::vector< Pair< double,double > > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< Pair< double,double > > * >(argp1);
    ecode2 = SWIG_AsVal_int(i, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_pair_double_double___setitem__" "', argument " "2"" of type '" "std::vector< Pair< double,double > >::difference_type""'");
    } 
    arg2 = static_cast< std::vector< Pair< double,double > >::difference_type >(val2);
    res3 = SWIG_R_ConvertPtr(x, &argp3, SWIGTYPE_p_PairT_double_double_t,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vector_pair_double_double___setitem__" "', argument " "3"" of type '" "std::vector< Pair< double,double > >::value_type const &""'"); 
    }
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_pair_double_double___setitem__" "', argument " "3"" of type '" "std::vector< Pair< double,double > >::value_type const &""'"); 
    }
    arg3 = reinterpret_cast< std::vector< Pair< double,double > >::value_type * >(argp3);
    try {
      std_vector_Sl_Pair_Sl_double_Sc_double_Sg__Sg____setitem__(arg1,SWIG_STD_MOVE(arg2),(Pair< double,double > const &)*arg3);
    } catch(std::out_of_range &_e) {
      SWIG_R_Raise(SWIG_R_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))), SWIGTYPE_p_std__out_of_range, SWIG_POINTER_OWN), "C/C++ exception of type " "std::out_of_range"); return R_NilValue;
    }
    r_ans = R_NilValue;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_vector_pair_double_double_append ( SEXP self, SEXP x)
{
  {
    std::vector< Pair< double,double > > *arg1 = (std::vector< Pair< double,double > > *) 0 ;
    std::vector< Pair< double,double > >::value_type *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_PairT_double_double_t_std__allocatorT_PairT_double_double_t_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_pair_double_double_append" "', argument " "1"" of type '" "std::vector< Pair< double,double > > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< Pair< double,double > > * >(argp1);
    res2 = SWIG_R_ConvertPtr(x, &argp2, SWIGTYPE_p_PairT_double_double_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vector_pair_double_double_append" "', argument " "2"" of type '" "std::vector< Pair< double,double > >::value_type const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_pair_double_double_append" "', argument " "2"" of type '" "std::vector< Pair< double,double > >::value_type const &""'"); 
    }
    arg2 = reinterpret_cast< std::vector< Pair< double,double > >::value_type * >(argp2);
    std_vector_Sl_Pair_Sl_double_Sc_double_Sg__Sg__append(arg1,(Pair< double,double > const &)*arg2);
    r_ans = R_NilValue;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_new_vector_pair_double_double__SWIG_0 ( )
{
  {
    std::vector< Pair< double,double > > *result = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    result = (std::vector< Pair< double,double > > *)new std::vector< Pair< double,double > >();
    r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_PairT_double_double_t_std__allocatorT_PairT_double_double_t_t_t, SWIG_POINTER_OWN |  0 );
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_new_vector_pair_double_double__SWIG_1 ( SEXP other)
{
  {
    std::vector< Pair< double,double > > *result = 0 ;
    std::vector< Pair< double,double > > *arg1 = 0 ;
    int res1 = SWIG_OLDOBJ ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    {
      std::vector< Pair< double,double >,std::allocator< Pair< double,double > > > *ptr = (std::vector< Pair< double,double >,std::allocator< Pair< double,double > > > *)0;
      res1 = swig::asptr(other, &ptr);
      if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_vector_pair_double_double" "', argument " "1"" of type '" "std::vector< Pair< double,double > > const &""'"); 
      }
      if (!ptr) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_vector_pair_double_double" "', argument " "1"" of type '" "std::vector< Pair< double,double > > const &""'"); 
      }
      arg1 = ptr;
    }
    result = (std::vector< Pair< double,double > > *)new std::vector< Pair< double,double > >((std::vector< Pair< double,double > > const &)*arg1);
    r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_PairT_double_double_t_std__allocatorT_PairT_double_double_t_t_t, SWIG_POINTER_OWN |  0 );
    if (SWIG_IsNewObj(res1)) delete arg1;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
    if (SWIG_IsNewObj(res1)) delete arg1;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_vector_pair_double_double_empty ( SEXP self, SEXP s_swig_copy)
{
  {
    bool result;
    std::vector< Pair< double,double > > *arg1 = (std::vector< Pair< double,double > > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_PairT_double_double_t_std__allocatorT_PairT_double_double_t_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_pair_double_double_empty" "', argument " "1"" of type '" "std::vector< Pair< double,double > > const *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< Pair< double,double > > * >(argp1);
    result = (bool)((std::vector< Pair< double,double > > const *)arg1)->empty();
    r_ans = Rf_ScalarLogical(result);
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_vector_pair_double_double_size ( SEXP self, SEXP s_swig_copy)
{
  {
    std::vector< Pair< double,double > >::size_type result;
    std::vector< Pair< double,double > > *arg1 = (std::vector< Pair< double,double > > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_PairT_double_double_t_std__allocatorT_PairT_double_double_t_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_pair_double_double_size" "', argument " "1"" of type '" "std::vector< Pair< double,double > > const *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< Pair< double,double > > * >(argp1);
    result = ((std::vector< Pair< double,double > > const *)arg1)->size();
    r_ans = SWIG_From_int(static_cast< int >(result));
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_vector_pair_double_double_swap ( SEXP self, SEXP v)
{
  {
    std::vector< Pair< double,double > > *arg1 = (std::vector< Pair< double,double > > *) 0 ;
    std::vector< Pair< double,double > > *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_PairT_double_double_t_std__allocatorT_PairT_double_double_t_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_pair_double_double_swap" "', argument " "1"" of type '" "std::vector< Pair< double,double > > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< Pair< double,double > > * >(argp1);
    res2 = SWIG_R_ConvertPtr(v, &argp2, SWIGTYPE_p_std__vectorT_PairT_double_double_t_std__allocatorT_PairT_double_double_t_t_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vector_pair_double_double_swap" "', argument " "2"" of type '" "std::vector< Pair< double,double > > &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_pair_double_double_swap" "', argument " "2"" of type '" "std::vector< Pair< double,double > > &""'"); 
    }
    arg2 = reinterpret_cast< std::vector< Pair< double,double > > * >(argp2);
    (arg1)->swap(*arg2);
    r_ans = R_NilValue;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_vector_pair_double_double_clear ( SEXP self)
{
  {
    std::vector< Pair< double,double > > *arg1 = (std::vector< Pair< double,double > > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_PairT_double_double_t_std__allocatorT_PairT_double_double_t_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_pair_double_double_clear" "', argument " "1"" of type '" "std::vector< Pair< double,double > > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< Pair< double,double > > * >(argp1);
    (arg1)->clear();
    r_ans = R_NilValue;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_vector_pair_double_double_get_allocator ( SEXP self, SEXP s_swig_copy)
{
  {
    SwigValueWrapper< std::allocator< Pair< double,double > > > result;
    std::vector< Pair< double,double > > *arg1 = (std::vector< Pair< double,double > > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_PairT_double_double_t_std__allocatorT_PairT_double_double_t_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_pair_double_double_get_allocator" "', argument " "1"" of type '" "std::vector< Pair< double,double > > const *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< Pair< double,double > > * >(argp1);
    result = ((std::vector< Pair< double,double > > const *)arg1)->get_allocator();
    r_ans = SWIG_R_NewPointerObj((new std::vector< Pair< double,double > >::allocator_type(result)), SWIGTYPE_p_std__allocatorT_PairT_double_double_t_t, SWIG_POINTER_OWN |  0 );
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_new_vector_pair_double_double__SWIG_2 ( SEXP size)
{
  {
    std::vector< Pair< double,double > > *result = 0 ;
    std::vector< Pair< double,double > >::size_type arg1 ;
    int val1 ;
    int ecode1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    ecode1 = SWIG_AsVal_int(size, &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_vector_pair_double_double" "', argument " "1"" of type '" "std::vector< Pair< double,double > >::size_type""'");
    } 
    arg1 = static_cast< std::vector< Pair< double,double > >::size_type >(val1);
    result = (std::vector< Pair< double,double > > *)new std::vector< Pair< double,double > >(arg1);
    r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_PairT_double_double_t_std__allocatorT_PairT_double_double_t_t_t, SWIG_POINTER_OWN |  0 );
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_vector_pair_double_double_pop_back ( SEXP self)
{
  {
    std::vector< Pair< double,double > > *arg1 = (std::vector< Pair< double,double > > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_PairT_double_double_t_std__allocatorT_PairT_double_double_t_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_pair_double_double_pop_back" "', argument " "1"" of type '" "std::vector< Pair< double,double > > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< Pair< double,double > > * >(argp1);
    (arg1)->pop_back();
    r_ans = R_NilValue;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_vector_pair_double_double_resize__SWIG_0 ( SEXP self, SEXP new_size)
{
  {
    std::vector< Pair< double,double > > *arg1 = (std::vector< Pair< double,double > > *) 0 ;
    std::vector< Pair< double,double > >::size_type arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_PairT_double_double_t_std__allocatorT_PairT_double_double_t_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_pair_double_double_resize" "', argument " "1"" of type '" "std::vector< Pair< double,double > > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< Pair< double,double > > * >(argp1);
    ecode2 = SWIG_AsVal_int(new_size, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_pair_double_double_resize" "', argument " "2"" of type '" "std::vector< Pair< double,double > >::size_type""'");
    } 
    arg2 = static_cast< std::vector< Pair< double,double > >::size_type >(val2);
    (arg1)->resize(arg2);
    r_ans = R_NilValue;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_new_vector_pair_double_double__SWIG_3 ( SEXP size, SEXP value)
{
  {
    std::vector< Pair< double,double > > *result = 0 ;
    std::vector< Pair< double,double > >::size_type arg1 ;
    std::vector< Pair< double,double > >::value_type *arg2 = 0 ;
    int val1 ;
    int ecode1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    ecode1 = SWIG_AsVal_int(size, &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_vector_pair_double_double" "', argument " "1"" of type '" "std::vector< Pair< double,double > >::size_type""'");
    } 
    arg1 = static_cast< std::vector< Pair< double,double > >::size_type >(val1);
    res2 = SWIG_R_ConvertPtr(value, &argp2, SWIGTYPE_p_PairT_double_double_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_vector_pair_double_double" "', argument " "2"" of type '" "std::vector< Pair< double,double > >::value_type const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_vector_pair_double_double" "', argument " "2"" of type '" "std::vector< Pair< double,double > >::value_type const &""'"); 
    }
    arg2 = reinterpret_cast< std::vector< Pair< double,double > >::value_type * >(argp2);
    result = (std::vector< Pair< double,double > > *)new std::vector< Pair< double,double > >(arg1,(std::vector< Pair< double,double > >::value_type const &)*arg2);
    r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_PairT_double_double_t_std__allocatorT_PairT_double_double_t_t_t, SWIG_POINTER_OWN |  0 );
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_vector_pair_double_double_push_back ( SEXP self, SEXP x)
{
  {
    std::vector< Pair< double,double > > *arg1 = (std::vector< Pair< double,double > > *) 0 ;
    std::vector< Pair< double,double > >::value_type *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_PairT_double_double_t_std__allocatorT_PairT_double_double_t_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_pair_double_double_push_back" "', argument " "1"" of type '" "std::vector< Pair< double,double > > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< Pair< double,double > > * >(argp1);
    res2 = SWIG_R_ConvertPtr(x, &argp2, SWIGTYPE_p_PairT_double_double_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vector_pair_double_double_push_back" "', argument " "2"" of type '" "std::vector< Pair< double,double > >::value_type const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_pair_double_double_push_back" "', argument " "2"" of type '" "std::vector< Pair< double,double > >::value_type const &""'"); 
    }
    arg2 = reinterpret_cast< std::vector< Pair< double,double > >::value_type * >(argp2);
    (arg1)->push_back((std::vector< Pair< double,double > >::value_type const &)*arg2);
    r_ans = R_NilValue;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_vector_pair_double_double_front ( SEXP self, SEXP s_swig_copy)
{
  {
    std::vector< Pair< double,double > >::value_type *result = 0 ;
    std::vector< Pair< double,double > > *arg1 = (std::vector< Pair< double,double > > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_PairT_double_double_t_std__allocatorT_PairT_double_double_t_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_pair_double_double_front" "', argument " "1"" of type '" "std::vector< Pair< double,double > > const *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< Pair< double,double > > * >(argp1);
    result = (std::vector< Pair< double,double > >::value_type *) &((std::vector< Pair< double,double > > const *)arg1)->front();
    r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_PairT_double_double_t, 0 |  0 );
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_vector_pair_double_double_back ( SEXP self, SEXP s_swig_copy)
{
  {
    std::vector< Pair< double,double > >::value_type *result = 0 ;
    std::vector< Pair< double,double > > *arg1 = (std::vector< Pair< double,double > > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_PairT_double_double_t_std__allocatorT_PairT_double_double_t_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_pair_double_double_back" "', argument " "1"" of type '" "std::vector< Pair< double,double > > const *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< Pair< double,double > > * >(argp1);
    result = (std::vector< Pair< double,double > >::value_type *) &((std::vector< Pair< double,double > > const *)arg1)->back();
    r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_PairT_double_double_t, 0 |  0 );
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_vector_pair_double_double_assign ( SEXP self, SEXP n, SEXP x)
{
  {
    std::vector< Pair< double,double > > *arg1 = (std::vector< Pair< double,double > > *) 0 ;
    std::vector< Pair< double,double > >::size_type arg2 ;
    std::vector< Pair< double,double > >::value_type *arg3 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    void *argp3 = 0 ;
    int res3 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_PairT_double_double_t_std__allocatorT_PairT_double_double_t_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_pair_double_double_assign" "', argument " "1"" of type '" "std::vector< Pair< double,double > > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< Pair< double,double > > * >(argp1);
    ecode2 = SWIG_AsVal_int(n, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_pair_double_double_assign" "', argument " "2"" of type '" "std::vector< Pair< double,double > >::size_type""'");
    } 
    arg2 = static_cast< std::vector< Pair< double,double > >::size_type >(val2);
    res3 = SWIG_R_ConvertPtr(x, &argp3, SWIGTYPE_p_PairT_double_double_t,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vector_pair_double_double_assign" "', argument " "3"" of type '" "std::vector< Pair< double,double > >::value_type const &""'"); 
    }
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_pair_double_double_assign" "', argument " "3"" of type '" "std::vector< Pair< double,double > >::value_type const &""'"); 
    }
    arg3 = reinterpret_cast< std::vector< Pair< double,double > >::value_type * >(argp3);
    (arg1)->assign(arg2,(std::vector< Pair< double,double > >::value_type const &)*arg3);
    r_ans = R_NilValue;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_vector_pair_double_double_resize__SWIG_1 ( SEXP self, SEXP new_size, SEXP x)
{
  {
    std::vector< Pair< double,double > > *arg1 = (std::vector< Pair< double,double > > *) 0 ;
    std::vector< Pair< double,double > >::size_type arg2 ;
    std::vector< Pair< double,double > >::value_type *arg3 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    void *argp3 = 0 ;
    int res3 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_PairT_double_double_t_std__allocatorT_PairT_double_double_t_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_pair_double_double_resize" "', argument " "1"" of type '" "std::vector< Pair< double,double > > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< Pair< double,double > > * >(argp1);
    ecode2 = SWIG_AsVal_int(new_size, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_pair_double_double_resize" "', argument " "2"" of type '" "std::vector< Pair< double,double > >::size_type""'");
    } 
    arg2 = static_cast< std::vector< Pair< double,double > >::size_type >(val2);
    res3 = SWIG_R_ConvertPtr(x, &argp3, SWIGTYPE_p_PairT_double_double_t,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vector_pair_double_double_resize" "', argument " "3"" of type '" "std::vector< Pair< double,double > >::value_type const &""'"); 
    }
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_pair_double_double_resize" "', argument " "3"" of type '" "std::vector< Pair< double,double > >::value_type const &""'"); 
    }
    arg3 = reinterpret_cast< std::vector< Pair< double,double > >::value_type * >(argp3);
    (arg1)->resize(arg2,(std::vector< Pair< double,double > >::value_type const &)*arg3);
    r_ans = R_NilValue;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_vector_pair_double_double_reserve ( SEXP self, SEXP n)
{
  {
    std::vector< Pair< double,double > > *arg1 = (std::vector< Pair< double,double > > *) 0 ;
    std::vector< Pair< double,double > >::size_type arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_PairT_double_double_t_std__allocatorT_PairT_double_double_t_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_pair_double_double_reserve" "', argument " "1"" of type '" "std::vector< Pair< double,double > > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< Pair< double,double > > * >(argp1);
    ecode2 = SWIG_AsVal_int(n, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_pair_double_double_reserve" "', argument " "2"" of type '" "std::vector< Pair< double,double > >::size_type""'");
    } 
    arg2 = static_cast< std::vector< Pair< double,double > >::size_type >(val2);
    (arg1)->reserve(arg2);
    r_ans = R_NilValue;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_vector_pair_double_double_capacity ( SEXP self, SEXP s_swig_copy)
{
  {
    std::vector< Pair< double,double > >::size_type result;
    std::vector< Pair< double,double > > *arg1 = (std::vector< Pair< double,double > > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_PairT_double_double_t_std__allocatorT_PairT_double_double_t_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_pair_double_double_capacity" "', argument " "1"" of type '" "std::vector< Pair< double,double > > const *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< Pair< double,double > > * >(argp1);
    result = ((std::vector< Pair< double,double > > const *)arg1)->capacity();
    r_ans = SWIG_From_int(static_cast< int >(result));
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_delete_vector_pair_double_double ( SEXP self)
{
  {
    std::vector< Pair< double,double > > *arg1 = (std::vector< Pair< double,double > > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_PairT_double_double_t_std__allocatorT_PairT_double_double_t_t_t, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_vector_pair_double_double" "', argument " "1"" of type '" "std::vector< Pair< double,double > > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< Pair< double,double > > * >(argp1);
    delete arg1;
    r_ans = R_NilValue;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    R_ClearExternalPtr(self);
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_vector_scriptingnode___nonzero__ ( SEXP self, SEXP s_swig_copy)
{
  {
    bool result;
    std::vector< ScriptingNode > *arg1 = (std::vector< ScriptingNode > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_ScriptingNode_std__allocatorT_ScriptingNode_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_scriptingnode___nonzero__" "', argument " "1"" of type '" "std::vector< ScriptingNode > const *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< ScriptingNode > * >(argp1);
    result = (bool)std_vector_Sl_ScriptingNode_Sg____nonzero__((std::vector< ScriptingNode > const *)arg1);
    r_ans = Rf_ScalarLogical(result);
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_vector_scriptingnode___len__ ( SEXP self, SEXP s_swig_copy)
{
  {
    std::vector< ScriptingNode >::size_type result;
    std::vector< ScriptingNode > *arg1 = (std::vector< ScriptingNode > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_ScriptingNode_std__allocatorT_ScriptingNode_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_scriptingnode___len__" "', argument " "1"" of type '" "std::vector< ScriptingNode > const *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< ScriptingNode > * >(argp1);
    result = std_vector_Sl_ScriptingNode_Sg____len__((std::vector< ScriptingNode > const *)arg1);
    r_ans = SWIG_From_int(static_cast< int >(result));
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_vector_scriptingnode_pop ( SEXP self, SEXP s_swig_copy)
{
  {
    std::vector< ScriptingNode >::value_type result;
    std::vector< ScriptingNode > *arg1 = (std::vector< ScriptingNode > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_ScriptingNode_std__allocatorT_ScriptingNode_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_scriptingnode_pop" "', argument " "1"" of type '" "std::vector< ScriptingNode > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< ScriptingNode > * >(argp1);
    try {
      result = std_vector_Sl_ScriptingNode_Sg__pop(arg1);
    } catch(std::out_of_range &_e) {
      SWIG_R_Raise(SWIG_R_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))), SWIGTYPE_p_std__out_of_range, SWIG_POINTER_OWN), "C/C++ exception of type " "std::out_of_range"); return R_NilValue;
    }
    r_ans = SWIG_R_NewPointerObj((new std::vector< ScriptingNode >::value_type(result)), SWIGTYPE_p_ScriptingNode, SWIG_POINTER_OWN |  0 );
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_vector_scriptingnode___getslice__ ( SEXP self, SEXP i, SEXP j)
{
  {
    std::vector< ScriptingNode,std::allocator< ScriptingNode > > *result = 0 ;
    std::vector< ScriptingNode > *arg1 = (std::vector< ScriptingNode > *) 0 ;
    std::vector< ScriptingNode >::difference_type arg2 ;
    std::vector< ScriptingNode >::difference_type arg3 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int val3 ;
    int ecode3 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_ScriptingNode_std__allocatorT_ScriptingNode_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_scriptingnode___getslice__" "', argument " "1"" of type '" "std::vector< ScriptingNode > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< ScriptingNode > * >(argp1);
    ecode2 = SWIG_AsVal_int(i, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_scriptingnode___getslice__" "', argument " "2"" of type '" "std::vector< ScriptingNode >::difference_type""'");
    } 
    arg2 = static_cast< std::vector< ScriptingNode >::difference_type >(val2);
    ecode3 = SWIG_AsVal_int(j, &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_scriptingnode___getslice__" "', argument " "3"" of type '" "std::vector< ScriptingNode >::difference_type""'");
    } 
    arg3 = static_cast< std::vector< ScriptingNode >::difference_type >(val3);
    try {
      result = (std::vector< ScriptingNode,std::allocator< ScriptingNode > > *)std_vector_Sl_ScriptingNode_Sg____getslice__(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
    } catch(std::out_of_range &_e) {
      SWIG_R_Raise(SWIG_R_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))), SWIGTYPE_p_std__out_of_range, SWIG_POINTER_OWN), "C/C++ exception of type " "std::out_of_range"); return R_NilValue;
    }
    r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_ScriptingNode_std__allocatorT_ScriptingNode_t_t, SWIG_POINTER_OWN |  0 );
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_vector_scriptingnode___setslice__ ( SEXP self, SEXP i, SEXP j, SEXP v)
{
  {
    std::vector< ScriptingNode > *arg1 = (std::vector< ScriptingNode > *) 0 ;
    std::vector< ScriptingNode >::difference_type arg2 ;
    std::vector< ScriptingNode >::difference_type arg3 ;
    std::vector< ScriptingNode,std::allocator< ScriptingNode > > *arg4 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int val3 ;
    int ecode3 = 0 ;
    int res4 = SWIG_OLDOBJ ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_ScriptingNode_std__allocatorT_ScriptingNode_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_scriptingnode___setslice__" "', argument " "1"" of type '" "std::vector< ScriptingNode > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< ScriptingNode > * >(argp1);
    ecode2 = SWIG_AsVal_int(i, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_scriptingnode___setslice__" "', argument " "2"" of type '" "std::vector< ScriptingNode >::difference_type""'");
    } 
    arg2 = static_cast< std::vector< ScriptingNode >::difference_type >(val2);
    ecode3 = SWIG_AsVal_int(j, &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_scriptingnode___setslice__" "', argument " "3"" of type '" "std::vector< ScriptingNode >::difference_type""'");
    } 
    arg3 = static_cast< std::vector< ScriptingNode >::difference_type >(val3);
    {
      std::vector< ScriptingNode,std::allocator< ScriptingNode > > *ptr = (std::vector< ScriptingNode,std::allocator< ScriptingNode > > *)0;
      res4 = swig::asptr(v, &ptr);
      if (!SWIG_IsOK(res4)) {
        SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "vector_scriptingnode___setslice__" "', argument " "4"" of type '" "std::vector< ScriptingNode,std::allocator< ScriptingNode > > const &""'"); 
      }
      if (!ptr) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_scriptingnode___setslice__" "', argument " "4"" of type '" "std::vector< ScriptingNode,std::allocator< ScriptingNode > > const &""'"); 
      }
      arg4 = ptr;
    }
    try {
      std_vector_Sl_ScriptingNode_Sg____setslice__(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),(std::vector< ScriptingNode,std::allocator< ScriptingNode > > const &)*arg4);
    } catch(std::out_of_range &_e) {
      SWIG_R_Raise(SWIG_R_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))), SWIGTYPE_p_std__out_of_range, SWIG_POINTER_OWN), "C/C++ exception of type " "std::out_of_range"); return R_NilValue;
    } catch(std::invalid_argument &_e) {
      SWIG_R_Raise(SWIG_R_NewPointerObj((new std::invalid_argument(static_cast< const std::invalid_argument& >(_e))), SWIGTYPE_p_std__invalid_argument, SWIG_POINTER_OWN), "C/C++ exception of type " "std::invalid_argument"); return R_NilValue;
    }
    r_ans = R_NilValue;
    if (SWIG_IsNewObj(res4)) delete arg4;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
    if (SWIG_IsNewObj(res4)) delete arg4;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_vector_scriptingnode___delslice__ ( SEXP self, SEXP i, SEXP j)
{
  {
    std::vector< ScriptingNode > *arg1 = (std::vector< ScriptingNode > *) 0 ;
    std::vector< ScriptingNode >::difference_type arg2 ;
    std::vector< ScriptingNode >::difference_type arg3 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int val3 ;
    int ecode3 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_ScriptingNode_std__allocatorT_ScriptingNode_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_scriptingnode___delslice__" "', argument " "1"" of type '" "std::vector< ScriptingNode > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< ScriptingNode > * >(argp1);
    ecode2 = SWIG_AsVal_int(i, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_scriptingnode___delslice__" "', argument " "2"" of type '" "std::vector< ScriptingNode >::difference_type""'");
    } 
    arg2 = static_cast< std::vector< ScriptingNode >::difference_type >(val2);
    ecode3 = SWIG_AsVal_int(j, &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_scriptingnode___delslice__" "', argument " "3"" of type '" "std::vector< ScriptingNode >::difference_type""'");
    } 
    arg3 = static_cast< std::vector< ScriptingNode >::difference_type >(val3);
    try {
      std_vector_Sl_ScriptingNode_Sg____delslice__(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
    } catch(std::out_of_range &_e) {
      SWIG_R_Raise(SWIG_R_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))), SWIGTYPE_p_std__out_of_range, SWIG_POINTER_OWN), "C/C++ exception of type " "std::out_of_range"); return R_NilValue;
    }
    r_ans = R_NilValue;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_vector_scriptingnode___delitem__ ( SEXP self, SEXP i)
{
  {
    std::vector< ScriptingNode > *arg1 = (std::vector< ScriptingNode > *) 0 ;
    std::vector< ScriptingNode >::difference_type arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_ScriptingNode_std__allocatorT_ScriptingNode_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_scriptingnode___delitem__" "', argument " "1"" of type '" "std::vector< ScriptingNode > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< ScriptingNode > * >(argp1);
    ecode2 = SWIG_AsVal_int(i, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_scriptingnode___delitem__" "', argument " "2"" of type '" "std::vector< ScriptingNode >::difference_type""'");
    } 
    arg2 = static_cast< std::vector< ScriptingNode >::difference_type >(val2);
    try {
      std_vector_Sl_ScriptingNode_Sg____delitem__(arg1,SWIG_STD_MOVE(arg2));
    } catch(std::out_of_range &_e) {
      SWIG_R_Raise(SWIG_R_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))), SWIGTYPE_p_std__out_of_range, SWIG_POINTER_OWN), "C/C++ exception of type " "std::out_of_range"); return R_NilValue;
    }
    r_ans = R_NilValue;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_vector_scriptingnode___getitem__ ( SEXP self, SEXP i, SEXP s_swig_copy)
{
  {
    std::vector< ScriptingNode >::value_type *result = 0 ;
    std::vector< ScriptingNode > *arg1 = (std::vector< ScriptingNode > *) 0 ;
    std::vector< ScriptingNode >::difference_type arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_ScriptingNode_std__allocatorT_ScriptingNode_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_scriptingnode___getitem__" "', argument " "1"" of type '" "std::vector< ScriptingNode > const *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< ScriptingNode > * >(argp1);
    ecode2 = SWIG_AsVal_int(i, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_scriptingnode___getitem__" "', argument " "2"" of type '" "std::vector< ScriptingNode >::difference_type""'");
    } 
    arg2 = static_cast< std::vector< ScriptingNode >::difference_type >(val2);
    try {
      result = (std::vector< ScriptingNode >::value_type *) &std_vector_Sl_ScriptingNode_Sg____getitem__((std::vector< ScriptingNode > const *)arg1,SWIG_STD_MOVE(arg2));
    } catch(std::out_of_range &_e) {
      SWIG_R_Raise(SWIG_R_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))), SWIGTYPE_p_std__out_of_range, SWIG_POINTER_OWN), "C/C++ exception of type " "std::out_of_range"); return R_NilValue;
    }
    r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ScriptingNode, 0 |  0 );
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_vector_scriptingnode___setitem__ ( SEXP self, SEXP i, SEXP x)
{
  {
    std::vector< ScriptingNode > *arg1 = (std::vector< ScriptingNode > *) 0 ;
    std::vector< ScriptingNode >::difference_type arg2 ;
    std::vector< ScriptingNode >::value_type *arg3 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    void *argp3 = 0 ;
    int res3 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_ScriptingNode_std__allocatorT_ScriptingNode_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_scriptingnode___setitem__" "', argument " "1"" of type '" "std::vector< ScriptingNode > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< ScriptingNode > * >(argp1);
    ecode2 = SWIG_AsVal_int(i, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_scriptingnode___setitem__" "', argument " "2"" of type '" "std::vector< ScriptingNode >::difference_type""'");
    } 
    arg2 = static_cast< std::vector< ScriptingNode >::difference_type >(val2);
    res3 = SWIG_R_ConvertPtr(x, &argp3, SWIGTYPE_p_ScriptingNode,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vector_scriptingnode___setitem__" "', argument " "3"" of type '" "std::vector< ScriptingNode >::value_type const &""'"); 
    }
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_scriptingnode___setitem__" "', argument " "3"" of type '" "std::vector< ScriptingNode >::value_type const &""'"); 
    }
    arg3 = reinterpret_cast< std::vector< ScriptingNode >::value_type * >(argp3);
    try {
      std_vector_Sl_ScriptingNode_Sg____setitem__(arg1,SWIG_STD_MOVE(arg2),(ScriptingNode const &)*arg3);
    } catch(std::out_of_range &_e) {
      SWIG_R_Raise(SWIG_R_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))), SWIGTYPE_p_std__out_of_range, SWIG_POINTER_OWN), "C/C++ exception of type " "std::out_of_range"); return R_NilValue;
    }
    r_ans = R_NilValue;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_vector_scriptingnode_append ( SEXP self, SEXP x)
{
  {
    std::vector< ScriptingNode > *arg1 = (std::vector< ScriptingNode > *) 0 ;
    std::vector< ScriptingNode >::value_type *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_ScriptingNode_std__allocatorT_ScriptingNode_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_scriptingnode_append" "', argument " "1"" of type '" "std::vector< ScriptingNode > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< ScriptingNode > * >(argp1);
    res2 = SWIG_R_ConvertPtr(x, &argp2, SWIGTYPE_p_ScriptingNode,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vector_scriptingnode_append" "', argument " "2"" of type '" "std::vector< ScriptingNode >::value_type const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_scriptingnode_append" "', argument " "2"" of type '" "std::vector< ScriptingNode >::value_type const &""'"); 
    }
    arg2 = reinterpret_cast< std::vector< ScriptingNode >::value_type * >(argp2);
    std_vector_Sl_ScriptingNode_Sg__append(arg1,(ScriptingNode const &)*arg2);
    r_ans = R_NilValue;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_new_vector_scriptingnode__SWIG_0 ( )
{
  {
    std::vector< ScriptingNode > *result = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    result = (std::vector< ScriptingNode > *)new std::vector< ScriptingNode >();
    r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_ScriptingNode_std__allocatorT_ScriptingNode_t_t, SWIG_POINTER_OWN |  0 );
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_new_vector_scriptingnode__SWIG_1 ( SEXP other)
{
  {
    std::vector< ScriptingNode > *result = 0 ;
    std::vector< ScriptingNode > *arg1 = 0 ;
    int res1 = SWIG_OLDOBJ ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    {
      std::vector< ScriptingNode,std::allocator< ScriptingNode > > *ptr = (std::vector< ScriptingNode,std::allocator< ScriptingNode > > *)0;
      res1 = swig::asptr(other, &ptr);
      if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_vector_scriptingnode" "', argument " "1"" of type '" "std::vector< ScriptingNode > const &""'"); 
      }
      if (!ptr) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_vector_scriptingnode" "', argument " "1"" of type '" "std::vector< ScriptingNode > const &""'"); 
      }
      arg1 = ptr;
    }
    result = (std::vector< ScriptingNode > *)new std::vector< ScriptingNode >((std::vector< ScriptingNode > const &)*arg1);
    r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_ScriptingNode_std__allocatorT_ScriptingNode_t_t, SWIG_POINTER_OWN |  0 );
    if (SWIG_IsNewObj(res1)) delete arg1;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
    if (SWIG_IsNewObj(res1)) delete arg1;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_vector_scriptingnode_empty ( SEXP self, SEXP s_swig_copy)
{
  {
    bool result;
    std::vector< ScriptingNode > *arg1 = (std::vector< ScriptingNode > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_ScriptingNode_std__allocatorT_ScriptingNode_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_scriptingnode_empty" "', argument " "1"" of type '" "std::vector< ScriptingNode > const *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< ScriptingNode > * >(argp1);
    result = (bool)((std::vector< ScriptingNode > const *)arg1)->empty();
    r_ans = Rf_ScalarLogical(result);
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_vector_scriptingnode_size ( SEXP self, SEXP s_swig_copy)
{
  {
    std::vector< ScriptingNode >::size_type result;
    std::vector< ScriptingNode > *arg1 = (std::vector< ScriptingNode > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_ScriptingNode_std__allocatorT_ScriptingNode_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_scriptingnode_size" "', argument " "1"" of type '" "std::vector< ScriptingNode > const *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< ScriptingNode > * >(argp1);
    result = ((std::vector< ScriptingNode > const *)arg1)->size();
    r_ans = SWIG_From_int(static_cast< int >(result));
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_vector_scriptingnode_swap ( SEXP self, SEXP v)
{
  {
    std::vector< ScriptingNode > *arg1 = (std::vector< ScriptingNode > *) 0 ;
    std::vector< ScriptingNode > *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_ScriptingNode_std__allocatorT_ScriptingNode_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_scriptingnode_swap" "', argument " "1"" of type '" "std::vector< ScriptingNode > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< ScriptingNode > * >(argp1);
    res2 = SWIG_R_ConvertPtr(v, &argp2, SWIGTYPE_p_std__vectorT_ScriptingNode_std__allocatorT_ScriptingNode_t_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vector_scriptingnode_swap" "', argument " "2"" of type '" "std::vector< ScriptingNode > &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_scriptingnode_swap" "', argument " "2"" of type '" "std::vector< ScriptingNode > &""'"); 
    }
    arg2 = reinterpret_cast< std::vector< ScriptingNode > * >(argp2);
    (arg1)->swap(*arg2);
    r_ans = R_NilValue;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_vector_scriptingnode_clear ( SEXP self)
{
  {
    std::vector< ScriptingNode > *arg1 = (std::vector< ScriptingNode > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_ScriptingNode_std__allocatorT_ScriptingNode_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_scriptingnode_clear" "', argument " "1"" of type '" "std::vector< ScriptingNode > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< ScriptingNode > * >(argp1);
    (arg1)->clear();
    r_ans = R_NilValue;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_vector_scriptingnode_get_allocator ( SEXP self, SEXP s_swig_copy)
{
  {
    SwigValueWrapper< std::allocator< ScriptingNode > > result;
    std::vector< ScriptingNode > *arg1 = (std::vector< ScriptingNode > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_ScriptingNode_std__allocatorT_ScriptingNode_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_scriptingnode_get_allocator" "', argument " "1"" of type '" "std::vector< ScriptingNode > const *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< ScriptingNode > * >(argp1);
    result = ((std::vector< ScriptingNode > const *)arg1)->get_allocator();
    r_ans = SWIG_R_NewPointerObj((new std::vector< ScriptingNode >::allocator_type(result)), SWIGTYPE_p_std__allocatorT_ScriptingNode_t, SWIG_POINTER_OWN |  0 );
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_new_vector_scriptingnode__SWIG_2 ( SEXP size)
{
  {
    std::vector< ScriptingNode > *result = 0 ;
    std::vector< ScriptingNode >::size_type arg1 ;
    int val1 ;
    int ecode1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    ecode1 = SWIG_AsVal_int(size, &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_vector_scriptingnode" "', argument " "1"" of type '" "std::vector< ScriptingNode >::size_type""'");
    } 
    arg1 = static_cast< std::vector< ScriptingNode >::size_type >(val1);
    result = (std::vector< ScriptingNode > *)new std::vector< ScriptingNode >(arg1);
    r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_ScriptingNode_std__allocatorT_ScriptingNode_t_t, SWIG_POINTER_OWN |  0 );
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_vector_scriptingnode_pop_back ( SEXP self)
{
  {
    std::vector< ScriptingNode > *arg1 = (std::vector< ScriptingNode > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_ScriptingNode_std__allocatorT_ScriptingNode_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_scriptingnode_pop_back" "', argument " "1"" of type '" "std::vector< ScriptingNode > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< ScriptingNode > * >(argp1);
    (arg1)->pop_back();
    r_ans = R_NilValue;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_vector_scriptingnode_resize__SWIG_0 ( SEXP self, SEXP new_size)
{
  {
    std::vector< ScriptingNode > *arg1 = (std::vector< ScriptingNode > *) 0 ;
    std::vector< ScriptingNode >::size_type arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_ScriptingNode_std__allocatorT_ScriptingNode_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_scriptingnode_resize" "', argument " "1"" of type '" "std::vector< ScriptingNode > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< ScriptingNode > * >(argp1);
    ecode2 = SWIG_AsVal_int(new_size, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_scriptingnode_resize" "', argument " "2"" of type '" "std::vector< ScriptingNode >::size_type""'");
    } 
    arg2 = static_cast< std::vector< ScriptingNode >::size_type >(val2);
    (arg1)->resize(arg2);
    r_ans = R_NilValue;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_new_vector_scriptingnode__SWIG_3 ( SEXP size, SEXP value)
{
  {
    std::vector< ScriptingNode > *result = 0 ;
    std::vector< ScriptingNode >::size_type arg1 ;
    std::vector< ScriptingNode >::value_type *arg2 = 0 ;
    int val1 ;
    int ecode1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    ecode1 = SWIG_AsVal_int(size, &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_vector_scriptingnode" "', argument " "1"" of type '" "std::vector< ScriptingNode >::size_type""'");
    } 
    arg1 = static_cast< std::vector< ScriptingNode >::size_type >(val1);
    res2 = SWIG_R_ConvertPtr(value, &argp2, SWIGTYPE_p_ScriptingNode,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_vector_scriptingnode" "', argument " "2"" of type '" "std::vector< ScriptingNode >::value_type const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_vector_scriptingnode" "', argument " "2"" of type '" "std::vector< ScriptingNode >::value_type const &""'"); 
    }
    arg2 = reinterpret_cast< std::vector< ScriptingNode >::value_type * >(argp2);
    result = (std::vector< ScriptingNode > *)new std::vector< ScriptingNode >(arg1,(std::vector< ScriptingNode >::value_type const &)*arg2);
    r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_ScriptingNode_std__allocatorT_ScriptingNode_t_t, SWIG_POINTER_OWN |  0 );
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_vector_scriptingnode_push_back ( SEXP self, SEXP x)
{
  {
    std::vector< ScriptingNode > *arg1 = (std::vector< ScriptingNode > *) 0 ;
    std::vector< ScriptingNode >::value_type *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_ScriptingNode_std__allocatorT_ScriptingNode_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_scriptingnode_push_back" "', argument " "1"" of type '" "std::vector< ScriptingNode > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< ScriptingNode > * >(argp1);
    res2 = SWIG_R_ConvertPtr(x, &argp2, SWIGTYPE_p_ScriptingNode,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vector_scriptingnode_push_back" "', argument " "2"" of type '" "std::vector< ScriptingNode >::value_type const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_scriptingnode_push_back" "', argument " "2"" of type '" "std::vector< ScriptingNode >::value_type const &""'"); 
    }
    arg2 = reinterpret_cast< std::vector< ScriptingNode >::value_type * >(argp2);
    (arg1)->push_back((std::vector< ScriptingNode >::value_type const &)*arg2);
    r_ans = R_NilValue;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_vector_scriptingnode_front ( SEXP self, SEXP s_swig_copy)
{
  {
    std::vector< ScriptingNode >::value_type *result = 0 ;
    std::vector< ScriptingNode > *arg1 = (std::vector< ScriptingNode > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_ScriptingNode_std__allocatorT_ScriptingNode_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_scriptingnode_front" "', argument " "1"" of type '" "std::vector< ScriptingNode > const *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< ScriptingNode > * >(argp1);
    result = (std::vector< ScriptingNode >::value_type *) &((std::vector< ScriptingNode > const *)arg1)->front();
    r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ScriptingNode, 0 |  0 );
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_vector_scriptingnode_back ( SEXP self, SEXP s_swig_copy)
{
  {
    std::vector< ScriptingNode >::value_type *result = 0 ;
    std::vector< ScriptingNode > *arg1 = (std::vector< ScriptingNode > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_ScriptingNode_std__allocatorT_ScriptingNode_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_scriptingnode_back" "', argument " "1"" of type '" "std::vector< ScriptingNode > const *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< ScriptingNode > * >(argp1);
    result = (std::vector< ScriptingNode >::value_type *) &((std::vector< ScriptingNode > const *)arg1)->back();
    r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ScriptingNode, 0 |  0 );
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_vector_scriptingnode_assign ( SEXP self, SEXP n, SEXP x)
{
  {
    std::vector< ScriptingNode > *arg1 = (std::vector< ScriptingNode > *) 0 ;
    std::vector< ScriptingNode >::size_type arg2 ;
    std::vector< ScriptingNode >::value_type *arg3 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    void *argp3 = 0 ;
    int res3 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_ScriptingNode_std__allocatorT_ScriptingNode_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_scriptingnode_assign" "', argument " "1"" of type '" "std::vector< ScriptingNode > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< ScriptingNode > * >(argp1);
    ecode2 = SWIG_AsVal_int(n, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_scriptingnode_assign" "', argument " "2"" of type '" "std::vector< ScriptingNode >::size_type""'");
    } 
    arg2 = static_cast< std::vector< ScriptingNode >::size_type >(val2);
    res3 = SWIG_R_ConvertPtr(x, &argp3, SWIGTYPE_p_ScriptingNode,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vector_scriptingnode_assign" "', argument " "3"" of type '" "std::vector< ScriptingNode >::value_type const &""'"); 
    }
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_scriptingnode_assign" "', argument " "3"" of type '" "std::vector< ScriptingNode >::value_type const &""'"); 
    }
    arg3 = reinterpret_cast< std::vector< ScriptingNode >::value_type * >(argp3);
    (arg1)->assign(arg2,(std::vector< ScriptingNode >::value_type const &)*arg3);
    r_ans = R_NilValue;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_vector_scriptingnode_resize__SWIG_1 ( SEXP self, SEXP new_size, SEXP x)
{
  {
    std::vector< ScriptingNode > *arg1 = (std::vector< ScriptingNode > *) 0 ;
    std::vector< ScriptingNode >::size_type arg2 ;
    std::vector< ScriptingNode >::value_type *arg3 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    void *argp3 = 0 ;
    int res3 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_ScriptingNode_std__allocatorT_ScriptingNode_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_scriptingnode_resize" "', argument " "1"" of type '" "std::vector< ScriptingNode > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< ScriptingNode > * >(argp1);
    ecode2 = SWIG_AsVal_int(new_size, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_scriptingnode_resize" "', argument " "2"" of type '" "std::vector< ScriptingNode >::size_type""'");
    } 
    arg2 = static_cast< std::vector< ScriptingNode >::size_type >(val2);
    res3 = SWIG_R_ConvertPtr(x, &argp3, SWIGTYPE_p_ScriptingNode,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vector_scriptingnode_resize" "', argument " "3"" of type '" "std::vector< ScriptingNode >::value_type const &""'"); 
    }
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_scriptingnode_resize" "', argument " "3"" of type '" "std::vector< ScriptingNode >::value_type const &""'"); 
    }
    arg3 = reinterpret_cast< std::vector< ScriptingNode >::value_type * >(argp3);
    (arg1)->resize(arg2,(std::vector< ScriptingNode >::value_type const &)*arg3);
    r_ans = R_NilValue;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_vector_scriptingnode_reserve ( SEXP self, SEXP n)
{
  {
    std::vector< ScriptingNode > *arg1 = (std::vector< ScriptingNode > *) 0 ;
    std::vector< ScriptingNode >::size_type arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_ScriptingNode_std__allocatorT_ScriptingNode_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_scriptingnode_reserve" "', argument " "1"" of type '" "std::vector< ScriptingNode > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< ScriptingNode > * >(argp1);
    ecode2 = SWIG_AsVal_int(n, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_scriptingnode_reserve" "', argument " "2"" of type '" "std::vector< ScriptingNode >::size_type""'");
    } 
    arg2 = static_cast< std::vector< ScriptingNode >::size_type >(val2);
    (arg1)->reserve(arg2);
    r_ans = R_NilValue;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_vector_scriptingnode_capacity ( SEXP self, SEXP s_swig_copy)
{
  {
    std::vector< ScriptingNode >::size_type result;
    std::vector< ScriptingNode > *arg1 = (std::vector< ScriptingNode > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_ScriptingNode_std__allocatorT_ScriptingNode_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_scriptingnode_capacity" "', argument " "1"" of type '" "std::vector< ScriptingNode > const *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< ScriptingNode > * >(argp1);
    result = ((std::vector< ScriptingNode > const *)arg1)->capacity();
    r_ans = SWIG_From_int(static_cast< int >(result));
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_delete_vector_scriptingnode ( SEXP self)
{
  {
    std::vector< ScriptingNode > *arg1 = (std::vector< ScriptingNode > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_ScriptingNode_std__allocatorT_ScriptingNode_t_t, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_vector_scriptingnode" "', argument " "1"" of type '" "std::vector< ScriptingNode > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< ScriptingNode > * >(argp1);
    delete arg1;
    r_ans = R_NilValue;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    R_ClearExternalPtr(self);
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_vector_background___nonzero__ ( SEXP self, SEXP s_swig_copy)
{
  {
    bool result;
    std::vector< MapBackground_Interop > *arg1 = (std::vector< MapBackground_Interop > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_MapBackground_Interop_std__allocatorT_MapBackground_Interop_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_background___nonzero__" "', argument " "1"" of type '" "std::vector< MapBackground_Interop > const *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< MapBackground_Interop > * >(argp1);
    result = (bool)std_vector_Sl_MapBackground_Interop_Sg____nonzero__((std::vector< MapBackground_Interop > const *)arg1);
    r_ans = Rf_ScalarLogical(result);
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_vector_background___len__ ( SEXP self, SEXP s_swig_copy)
{
  {
    std::vector< MapBackground_Interop >::size_type result;
    std::vector< MapBackground_Interop > *arg1 = (std::vector< MapBackground_Interop > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_MapBackground_Interop_std__allocatorT_MapBackground_Interop_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_background___len__" "', argument " "1"" of type '" "std::vector< MapBackground_Interop > const *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< MapBackground_Interop > * >(argp1);
    result = std_vector_Sl_MapBackground_Interop_Sg____len__((std::vector< MapBackground_Interop > const *)arg1);
    r_ans = SWIG_From_int(static_cast< int >(result));
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_vector_background_pop ( SEXP self, SEXP s_swig_copy)
{
  {
    std::vector< MapBackground_Interop >::value_type result;
    std::vector< MapBackground_Interop > *arg1 = (std::vector< MapBackground_Interop > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_MapBackground_Interop_std__allocatorT_MapBackground_Interop_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_background_pop" "', argument " "1"" of type '" "std::vector< MapBackground_Interop > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< MapBackground_Interop > * >(argp1);
    try {
      result = std_vector_Sl_MapBackground_Interop_Sg__pop(arg1);
    } catch(std::out_of_range &_e) {
      SWIG_R_Raise(SWIG_R_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))), SWIGTYPE_p_std__out_of_range, SWIG_POINTER_OWN), "C/C++ exception of type " "std::out_of_range"); return R_NilValue;
    }
    r_ans = SWIG_R_NewPointerObj((new std::vector< MapBackground_Interop >::value_type(result)), SWIGTYPE_p_MapBackground_Interop, SWIG_POINTER_OWN |  0 );
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_vector_background___getslice__ ( SEXP self, SEXP i, SEXP j)
{
  {
    std::vector< MapBackground_Interop,std::allocator< MapBackground_Interop > > *result = 0 ;
    std::vector< MapBackground_Interop > *arg1 = (std::vector< MapBackground_Interop > *) 0 ;
    std::vector< MapBackground_Interop >::difference_type arg2 ;
    std::vector< MapBackground_Interop >::difference_type arg3 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int val3 ;
    int ecode3 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_MapBackground_Interop_std__allocatorT_MapBackground_Interop_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_background___getslice__" "', argument " "1"" of type '" "std::vector< MapBackground_Interop > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< MapBackground_Interop > * >(argp1);
    ecode2 = SWIG_AsVal_int(i, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_background___getslice__" "', argument " "2"" of type '" "std::vector< MapBackground_Interop >::difference_type""'");
    } 
    arg2 = static_cast< std::vector< MapBackground_Interop >::difference_type >(val2);
    ecode3 = SWIG_AsVal_int(j, &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_background___getslice__" "', argument " "3"" of type '" "std::vector< MapBackground_Interop >::difference_type""'");
    } 
    arg3 = static_cast< std::vector< MapBackground_Interop >::difference_type >(val3);
    try {
      result = (std::vector< MapBackground_Interop,std::allocator< MapBackground_Interop > > *)std_vector_Sl_MapBackground_Interop_Sg____getslice__(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
    } catch(std::out_of_range &_e) {
      SWIG_R_Raise(SWIG_R_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))), SWIGTYPE_p_std__out_of_range, SWIG_POINTER_OWN), "C/C++ exception of type " "std::out_of_range"); return R_NilValue;
    }
    r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_MapBackground_Interop_std__allocatorT_MapBackground_Interop_t_t, SWIG_POINTER_OWN |  0 );
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_vector_background___setslice__ ( SEXP self, SEXP i, SEXP j, SEXP v)
{
  {
    std::vector< MapBackground_Interop > *arg1 = (std::vector< MapBackground_Interop > *) 0 ;
    std::vector< MapBackground_Interop >::difference_type arg2 ;
    std::vector< MapBackground_Interop >::difference_type arg3 ;
    std::vector< MapBackground_Interop,std::allocator< MapBackground_Interop > > *arg4 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int val3 ;
    int ecode3 = 0 ;
    int res4 = SWIG_OLDOBJ ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_MapBackground_Interop_std__allocatorT_MapBackground_Interop_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_background___setslice__" "', argument " "1"" of type '" "std::vector< MapBackground_Interop > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< MapBackground_Interop > * >(argp1);
    ecode2 = SWIG_AsVal_int(i, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_background___setslice__" "', argument " "2"" of type '" "std::vector< MapBackground_Interop >::difference_type""'");
    } 
    arg2 = static_cast< std::vector< MapBackground_Interop >::difference_type >(val2);
    ecode3 = SWIG_AsVal_int(j, &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_background___setslice__" "', argument " "3"" of type '" "std::vector< MapBackground_Interop >::difference_type""'");
    } 
    arg3 = static_cast< std::vector< MapBackground_Interop >::difference_type >(val3);
    {
      std::vector< MapBackground_Interop,std::allocator< MapBackground_Interop > > *ptr = (std::vector< MapBackground_Interop,std::allocator< MapBackground_Interop > > *)0;
      res4 = swig::asptr(v, &ptr);
      if (!SWIG_IsOK(res4)) {
        SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "vector_background___setslice__" "', argument " "4"" of type '" "std::vector< MapBackground_Interop,std::allocator< MapBackground_Interop > > const &""'"); 
      }
      if (!ptr) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_background___setslice__" "', argument " "4"" of type '" "std::vector< MapBackground_Interop,std::allocator< MapBackground_Interop > > const &""'"); 
      }
      arg4 = ptr;
    }
    try {
      std_vector_Sl_MapBackground_Interop_Sg____setslice__(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),(std::vector< MapBackground_Interop,std::allocator< MapBackground_Interop > > const &)*arg4);
    } catch(std::out_of_range &_e) {
      SWIG_R_Raise(SWIG_R_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))), SWIGTYPE_p_std__out_of_range, SWIG_POINTER_OWN), "C/C++ exception of type " "std::out_of_range"); return R_NilValue;
    } catch(std::invalid_argument &_e) {
      SWIG_R_Raise(SWIG_R_NewPointerObj((new std::invalid_argument(static_cast< const std::invalid_argument& >(_e))), SWIGTYPE_p_std__invalid_argument, SWIG_POINTER_OWN), "C/C++ exception of type " "std::invalid_argument"); return R_NilValue;
    }
    r_ans = R_NilValue;
    if (SWIG_IsNewObj(res4)) delete arg4;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
    if (SWIG_IsNewObj(res4)) delete arg4;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_vector_background___delslice__ ( SEXP self, SEXP i, SEXP j)
{
  {
    std::vector< MapBackground_Interop > *arg1 = (std::vector< MapBackground_Interop > *) 0 ;
    std::vector< MapBackground_Interop >::difference_type arg2 ;
    std::vector< MapBackground_Interop >::difference_type arg3 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int val3 ;
    int ecode3 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_MapBackground_Interop_std__allocatorT_MapBackground_Interop_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_background___delslice__" "', argument " "1"" of type '" "std::vector< MapBackground_Interop > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< MapBackground_Interop > * >(argp1);
    ecode2 = SWIG_AsVal_int(i, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_background___delslice__" "', argument " "2"" of type '" "std::vector< MapBackground_Interop >::difference_type""'");
    } 
    arg2 = static_cast< std::vector< MapBackground_Interop >::difference_type >(val2);
    ecode3 = SWIG_AsVal_int(j, &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_background___delslice__" "', argument " "3"" of type '" "std::vector< MapBackground_Interop >::difference_type""'");
    } 
    arg3 = static_cast< std::vector< MapBackground_Interop >::difference_type >(val3);
    try {
      std_vector_Sl_MapBackground_Interop_Sg____delslice__(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
    } catch(std::out_of_range &_e) {
      SWIG_R_Raise(SWIG_R_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))), SWIGTYPE_p_std__out_of_range, SWIG_POINTER_OWN), "C/C++ exception of type " "std::out_of_range"); return R_NilValue;
    }
    r_ans = R_NilValue;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_vector_background___delitem__ ( SEXP self, SEXP i)
{
  {
    std::vector< MapBackground_Interop > *arg1 = (std::vector< MapBackground_Interop > *) 0 ;
    std::vector< MapBackground_Interop >::difference_type arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_MapBackground_Interop_std__allocatorT_MapBackground_Interop_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_background___delitem__" "', argument " "1"" of type '" "std::vector< MapBackground_Interop > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< MapBackground_Interop > * >(argp1);
    ecode2 = SWIG_AsVal_int(i, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_background___delitem__" "', argument " "2"" of type '" "std::vector< MapBackground_Interop >::difference_type""'");
    } 
    arg2 = static_cast< std::vector< MapBackground_Interop >::difference_type >(val2);
    try {
      std_vector_Sl_MapBackground_Interop_Sg____delitem__(arg1,SWIG_STD_MOVE(arg2));
    } catch(std::out_of_range &_e) {
      SWIG_R_Raise(SWIG_R_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))), SWIGTYPE_p_std__out_of_range, SWIG_POINTER_OWN), "C/C++ exception of type " "std::out_of_range"); return R_NilValue;
    }
    r_ans = R_NilValue;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_vector_background___getitem__ ( SEXP self, SEXP i, SEXP s_swig_copy)
{
  {
    std::vector< MapBackground_Interop >::value_type *result = 0 ;
    std::vector< MapBackground_Interop > *arg1 = (std::vector< MapBackground_Interop > *) 0 ;
    std::vector< MapBackground_Interop >::difference_type arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_MapBackground_Interop_std__allocatorT_MapBackground_Interop_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_background___getitem__" "', argument " "1"" of type '" "std::vector< MapBackground_Interop > const *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< MapBackground_Interop > * >(argp1);
    ecode2 = SWIG_AsVal_int(i, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_background___getitem__" "', argument " "2"" of type '" "std::vector< MapBackground_Interop >::difference_type""'");
    } 
    arg2 = static_cast< std::vector< MapBackground_Interop >::difference_type >(val2);
    try {
      result = (std::vector< MapBackground_Interop >::value_type *) &std_vector_Sl_MapBackground_Interop_Sg____getitem__((std::vector< MapBackground_Interop > const *)arg1,SWIG_STD_MOVE(arg2));
    } catch(std::out_of_range &_e) {
      SWIG_R_Raise(SWIG_R_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))), SWIGTYPE_p_std__out_of_range, SWIG_POINTER_OWN), "C/C++ exception of type " "std::out_of_range"); return R_NilValue;
    }
    r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_MapBackground_Interop, 0 |  0 );
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_vector_background___setitem__ ( SEXP self, SEXP i, SEXP x)
{
  {
    std::vector< MapBackground_Interop > *arg1 = (std::vector< MapBackground_Interop > *) 0 ;
    std::vector< MapBackground_Interop >::difference_type arg2 ;
    std::vector< MapBackground_Interop >::value_type *arg3 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    void *argp3 = 0 ;
    int res3 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_MapBackground_Interop_std__allocatorT_MapBackground_Interop_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_background___setitem__" "', argument " "1"" of type '" "std::vector< MapBackground_Interop > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< MapBackground_Interop > * >(argp1);
    ecode2 = SWIG_AsVal_int(i, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_background___setitem__" "', argument " "2"" of type '" "std::vector< MapBackground_Interop >::difference_type""'");
    } 
    arg2 = static_cast< std::vector< MapBackground_Interop >::difference_type >(val2);
    res3 = SWIG_R_ConvertPtr(x, &argp3, SWIGTYPE_p_MapBackground_Interop,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vector_background___setitem__" "', argument " "3"" of type '" "std::vector< MapBackground_Interop >::value_type const &""'"); 
    }
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_background___setitem__" "', argument " "3"" of type '" "std::vector< MapBackground_Interop >::value_type const &""'"); 
    }
    arg3 = reinterpret_cast< std::vector< MapBackground_Interop >::value_type * >(argp3);
    try {
      std_vector_Sl_MapBackground_Interop_Sg____setitem__(arg1,SWIG_STD_MOVE(arg2),(MapBackground_Interop const &)*arg3);
    } catch(std::out_of_range &_e) {
      SWIG_R_Raise(SWIG_R_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))), SWIGTYPE_p_std__out_of_range, SWIG_POINTER_OWN), "C/C++ exception of type " "std::out_of_range"); return R_NilValue;
    }
    r_ans = R_NilValue;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_vector_background_append ( SEXP self, SEXP x)
{
  {
    std::vector< MapBackground_Interop > *arg1 = (std::vector< MapBackground_Interop > *) 0 ;
    std::vector< MapBackground_Interop >::value_type *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_MapBackground_Interop_std__allocatorT_MapBackground_Interop_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_background_append" "', argument " "1"" of type '" "std::vector< MapBackground_Interop > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< MapBackground_Interop > * >(argp1);
    res2 = SWIG_R_ConvertPtr(x, &argp2, SWIGTYPE_p_MapBackground_Interop,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vector_background_append" "', argument " "2"" of type '" "std::vector< MapBackground_Interop >::value_type const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_background_append" "', argument " "2"" of type '" "std::vector< MapBackground_Interop >::value_type const &""'"); 
    }
    arg2 = reinterpret_cast< std::vector< MapBackground_Interop >::value_type * >(argp2);
    std_vector_Sl_MapBackground_Interop_Sg__append(arg1,(MapBackground_Interop const &)*arg2);
    r_ans = R_NilValue;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_new_vector_background__SWIG_0 ( )
{
  {
    std::vector< MapBackground_Interop > *result = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    result = (std::vector< MapBackground_Interop > *)new std::vector< MapBackground_Interop >();
    r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_MapBackground_Interop_std__allocatorT_MapBackground_Interop_t_t, SWIG_POINTER_OWN |  0 );
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_new_vector_background__SWIG_1 ( SEXP other)
{
  {
    std::vector< MapBackground_Interop > *result = 0 ;
    std::vector< MapBackground_Interop > *arg1 = 0 ;
    int res1 = SWIG_OLDOBJ ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    {
      std::vector< MapBackground_Interop,std::allocator< MapBackground_Interop > > *ptr = (std::vector< MapBackground_Interop,std::allocator< MapBackground_Interop > > *)0;
      res1 = swig::asptr(other, &ptr);
      if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_vector_background" "', argument " "1"" of type '" "std::vector< MapBackground_Interop > const &""'"); 
      }
      if (!ptr) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_vector_background" "', argument " "1"" of type '" "std::vector< MapBackground_Interop > const &""'"); 
      }
      arg1 = ptr;
    }
    result = (std::vector< MapBackground_Interop > *)new std::vector< MapBackground_Interop >((std::vector< MapBackground_Interop > const &)*arg1);
    r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_MapBackground_Interop_std__allocatorT_MapBackground_Interop_t_t, SWIG_POINTER_OWN |  0 );
    if (SWIG_IsNewObj(res1)) delete arg1;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
    if (SWIG_IsNewObj(res1)) delete arg1;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_vector_background_empty ( SEXP self, SEXP s_swig_copy)
{
  {
    bool result;
    std::vector< MapBackground_Interop > *arg1 = (std::vector< MapBackground_Interop > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_MapBackground_Interop_std__allocatorT_MapBackground_Interop_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_background_empty" "', argument " "1"" of type '" "std::vector< MapBackground_Interop > const *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< MapBackground_Interop > * >(argp1);
    result = (bool)((std::vector< MapBackground_Interop > const *)arg1)->empty();
    r_ans = Rf_ScalarLogical(result);
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_vector_background_size ( SEXP self, SEXP s_swig_copy)
{
  {
    std::vector< MapBackground_Interop >::size_type result;
    std::vector< MapBackground_Interop > *arg1 = (std::vector< MapBackground_Interop > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_MapBackground_Interop_std__allocatorT_MapBackground_Interop_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_background_size" "', argument " "1"" of type '" "std::vector< MapBackground_Interop > const *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< MapBackground_Interop > * >(argp1);
    result = ((std::vector< MapBackground_Interop > const *)arg1)->size();
    r_ans = SWIG_From_int(static_cast< int >(result));
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_vector_background_swap ( SEXP self, SEXP v)
{
  {
    std::vector< MapBackground_Interop > *arg1 = (std::vector< MapBackground_Interop > *) 0 ;
    std::vector< MapBackground_Interop > *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_MapBackground_Interop_std__allocatorT_MapBackground_Interop_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_background_swap" "', argument " "1"" of type '" "std::vector< MapBackground_Interop > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< MapBackground_Interop > * >(argp1);
    res2 = SWIG_R_ConvertPtr(v, &argp2, SWIGTYPE_p_std__vectorT_MapBackground_Interop_std__allocatorT_MapBackground_Interop_t_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vector_background_swap" "', argument " "2"" of type '" "std::vector< MapBackground_Interop > &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_background_swap" "', argument " "2"" of type '" "std::vector< MapBackground_Interop > &""'"); 
    }
    arg2 = reinterpret_cast< std::vector< MapBackground_Interop > * >(argp2);
    (arg1)->swap(*arg2);
    r_ans = R_NilValue;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_vector_background_clear ( SEXP self)
{
  {
    std::vector< MapBackground_Interop > *arg1 = (std::vector< MapBackground_Interop > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_MapBackground_Interop_std__allocatorT_MapBackground_Interop_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_background_clear" "', argument " "1"" of type '" "std::vector< MapBackground_Interop > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< MapBackground_Interop > * >(argp1);
    (arg1)->clear();
    r_ans = R_NilValue;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_vector_background_get_allocator ( SEXP self, SEXP s_swig_copy)
{
  {
    SwigValueWrapper< std::allocator< MapBackground_Interop > > result;
    std::vector< MapBackground_Interop > *arg1 = (std::vector< MapBackground_Interop > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_MapBackground_Interop_std__allocatorT_MapBackground_Interop_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_background_get_allocator" "', argument " "1"" of type '" "std::vector< MapBackground_Interop > const *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< MapBackground_Interop > * >(argp1);
    result = ((std::vector< MapBackground_Interop > const *)arg1)->get_allocator();
    r_ans = SWIG_R_NewPointerObj((new std::vector< MapBackground_Interop >::allocator_type(result)), SWIGTYPE_p_std__allocatorT_MapBackground_Interop_t, SWIG_POINTER_OWN |  0 );
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_new_vector_background__SWIG_2 ( SEXP size)
{
  {
    std::vector< MapBackground_Interop > *result = 0 ;
    std::vector< MapBackground_Interop >::size_type arg1 ;
    int val1 ;
    int ecode1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    ecode1 = SWIG_AsVal_int(size, &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_vector_background" "', argument " "1"" of type '" "std::vector< MapBackground_Interop >::size_type""'");
    } 
    arg1 = static_cast< std::vector< MapBackground_Interop >::size_type >(val1);
    result = (std::vector< MapBackground_Interop > *)new std::vector< MapBackground_Interop >(arg1);
    r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_MapBackground_Interop_std__allocatorT_MapBackground_Interop_t_t, SWIG_POINTER_OWN |  0 );
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_vector_background_pop_back ( SEXP self)
{
  {
    std::vector< MapBackground_Interop > *arg1 = (std::vector< MapBackground_Interop > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_MapBackground_Interop_std__allocatorT_MapBackground_Interop_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_background_pop_back" "', argument " "1"" of type '" "std::vector< MapBackground_Interop > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< MapBackground_Interop > * >(argp1);
    (arg1)->pop_back();
    r_ans = R_NilValue;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_vector_background_resize__SWIG_0 ( SEXP self, SEXP new_size)
{
  {
    std::vector< MapBackground_Interop > *arg1 = (std::vector< MapBackground_Interop > *) 0 ;
    std::vector< MapBackground_Interop >::size_type arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_MapBackground_Interop_std__allocatorT_MapBackground_Interop_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_background_resize" "', argument " "1"" of type '" "std::vector< MapBackground_Interop > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< MapBackground_Interop > * >(argp1);
    ecode2 = SWIG_AsVal_int(new_size, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_background_resize" "', argument " "2"" of type '" "std::vector< MapBackground_Interop >::size_type""'");
    } 
    arg2 = static_cast< std::vector< MapBackground_Interop >::size_type >(val2);
    (arg1)->resize(arg2);
    r_ans = R_NilValue;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_new_vector_background__SWIG_3 ( SEXP size, SEXP value)
{
  {
    std::vector< MapBackground_Interop > *result = 0 ;
    std::vector< MapBackground_Interop >::size_type arg1 ;
    std::vector< MapBackground_Interop >::value_type *arg2 = 0 ;
    int val1 ;
    int ecode1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    ecode1 = SWIG_AsVal_int(size, &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_vector_background" "', argument " "1"" of type '" "std::vector< MapBackground_Interop >::size_type""'");
    } 
    arg1 = static_cast< std::vector< MapBackground_Interop >::size_type >(val1);
    res2 = SWIG_R_ConvertPtr(value, &argp2, SWIGTYPE_p_MapBackground_Interop,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_vector_background" "', argument " "2"" of type '" "std::vector< MapBackground_Interop >::value_type const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_vector_background" "', argument " "2"" of type '" "std::vector< MapBackground_Interop >::value_type const &""'"); 
    }
    arg2 = reinterpret_cast< std::vector< MapBackground_Interop >::value_type * >(argp2);
    result = (std::vector< MapBackground_Interop > *)new std::vector< MapBackground_Interop >(arg1,(std::vector< MapBackground_Interop >::value_type const &)*arg2);
    r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_MapBackground_Interop_std__allocatorT_MapBackground_Interop_t_t, SWIG_POINTER_OWN |  0 );
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_vector_background_push_back ( SEXP self, SEXP x)
{
  {
    std::vector< MapBackground_Interop > *arg1 = (std::vector< MapBackground_Interop > *) 0 ;
    std::vector< MapBackground_Interop >::value_type *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_MapBackground_Interop_std__allocatorT_MapBackground_Interop_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_background_push_back" "', argument " "1"" of type '" "std::vector< MapBackground_Interop > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< MapBackground_Interop > * >(argp1);
    res2 = SWIG_R_ConvertPtr(x, &argp2, SWIGTYPE_p_MapBackground_Interop,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vector_background_push_back" "', argument " "2"" of type '" "std::vector< MapBackground_Interop >::value_type const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_background_push_back" "', argument " "2"" of type '" "std::vector< MapBackground_Interop >::value_type const &""'"); 
    }
    arg2 = reinterpret_cast< std::vector< MapBackground_Interop >::value_type * >(argp2);
    (arg1)->push_back((std::vector< MapBackground_Interop >::value_type const &)*arg2);
    r_ans = R_NilValue;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_vector_background_front ( SEXP self, SEXP s_swig_copy)
{
  {
    std::vector< MapBackground_Interop >::value_type *result = 0 ;
    std::vector< MapBackground_Interop > *arg1 = (std::vector< MapBackground_Interop > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_MapBackground_Interop_std__allocatorT_MapBackground_Interop_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_background_front" "', argument " "1"" of type '" "std::vector< MapBackground_Interop > const *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< MapBackground_Interop > * >(argp1);
    result = (std::vector< MapBackground_Interop >::value_type *) &((std::vector< MapBackground_Interop > const *)arg1)->front();
    r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_MapBackground_Interop, 0 |  0 );
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_vector_background_back ( SEXP self, SEXP s_swig_copy)
{
  {
    std::vector< MapBackground_Interop >::value_type *result = 0 ;
    std::vector< MapBackground_Interop > *arg1 = (std::vector< MapBackground_Interop > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_MapBackground_Interop_std__allocatorT_MapBackground_Interop_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_background_back" "', argument " "1"" of type '" "std::vector< MapBackground_Interop > const *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< MapBackground_Interop > * >(argp1);
    result = (std::vector< MapBackground_Interop >::value_type *) &((std::vector< MapBackground_Interop > const *)arg1)->back();
    r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_MapBackground_Interop, 0 |  0 );
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_vector_background_assign ( SEXP self, SEXP n, SEXP x)
{
  {
    std::vector< MapBackground_Interop > *arg1 = (std::vector< MapBackground_Interop > *) 0 ;
    std::vector< MapBackground_Interop >::size_type arg2 ;
    std::vector< MapBackground_Interop >::value_type *arg3 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    void *argp3 = 0 ;
    int res3 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_MapBackground_Interop_std__allocatorT_MapBackground_Interop_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_background_assign" "', argument " "1"" of type '" "std::vector< MapBackground_Interop > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< MapBackground_Interop > * >(argp1);
    ecode2 = SWIG_AsVal_int(n, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_background_assign" "', argument " "2"" of type '" "std::vector< MapBackground_Interop >::size_type""'");
    } 
    arg2 = static_cast< std::vector< MapBackground_Interop >::size_type >(val2);
    res3 = SWIG_R_ConvertPtr(x, &argp3, SWIGTYPE_p_MapBackground_Interop,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vector_background_assign" "', argument " "3"" of type '" "std::vector< MapBackground_Interop >::value_type const &""'"); 
    }
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_background_assign" "', argument " "3"" of type '" "std::vector< MapBackground_Interop >::value_type const &""'"); 
    }
    arg3 = reinterpret_cast< std::vector< MapBackground_Interop >::value_type * >(argp3);
    (arg1)->assign(arg2,(std::vector< MapBackground_Interop >::value_type const &)*arg3);
    r_ans = R_NilValue;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_vector_background_resize__SWIG_1 ( SEXP self, SEXP new_size, SEXP x)
{
  {
    std::vector< MapBackground_Interop > *arg1 = (std::vector< MapBackground_Interop > *) 0 ;
    std::vector< MapBackground_Interop >::size_type arg2 ;
    std::vector< MapBackground_Interop >::value_type *arg3 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    void *argp3 = 0 ;
    int res3 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_MapBackground_Interop_std__allocatorT_MapBackground_Interop_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_background_resize" "', argument " "1"" of type '" "std::vector< MapBackground_Interop > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< MapBackground_Interop > * >(argp1);
    ecode2 = SWIG_AsVal_int(new_size, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_background_resize" "', argument " "2"" of type '" "std::vector< MapBackground_Interop >::size_type""'");
    } 
    arg2 = static_cast< std::vector< MapBackground_Interop >::size_type >(val2);
    res3 = SWIG_R_ConvertPtr(x, &argp3, SWIGTYPE_p_MapBackground_Interop,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vector_background_resize" "', argument " "3"" of type '" "std::vector< MapBackground_Interop >::value_type const &""'"); 
    }
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_background_resize" "', argument " "3"" of type '" "std::vector< MapBackground_Interop >::value_type const &""'"); 
    }
    arg3 = reinterpret_cast< std::vector< MapBackground_Interop >::value_type * >(argp3);
    (arg1)->resize(arg2,(std::vector< MapBackground_Interop >::value_type const &)*arg3);
    r_ans = R_NilValue;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_vector_background_reserve ( SEXP self, SEXP n)
{
  {
    std::vector< MapBackground_Interop > *arg1 = (std::vector< MapBackground_Interop > *) 0 ;
    std::vector< MapBackground_Interop >::size_type arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_MapBackground_Interop_std__allocatorT_MapBackground_Interop_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_background_reserve" "', argument " "1"" of type '" "std::vector< MapBackground_Interop > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< MapBackground_Interop > * >(argp1);
    ecode2 = SWIG_AsVal_int(n, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_background_reserve" "', argument " "2"" of type '" "std::vector< MapBackground_Interop >::size_type""'");
    } 
    arg2 = static_cast< std::vector< MapBackground_Interop >::size_type >(val2);
    (arg1)->reserve(arg2);
    r_ans = R_NilValue;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_vector_background_capacity ( SEXP self, SEXP s_swig_copy)
{
  {
    std::vector< MapBackground_Interop >::size_type result;
    std::vector< MapBackground_Interop > *arg1 = (std::vector< MapBackground_Interop > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_MapBackground_Interop_std__allocatorT_MapBackground_Interop_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_background_capacity" "', argument " "1"" of type '" "std::vector< MapBackground_Interop > const *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< MapBackground_Interop > * >(argp1);
    result = ((std::vector< MapBackground_Interop > const *)arg1)->capacity();
    r_ans = SWIG_From_int(static_cast< int >(result));
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_delete_vector_background ( SEXP self)
{
  {
    std::vector< MapBackground_Interop > *arg1 = (std::vector< MapBackground_Interop > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_MapBackground_Interop_std__allocatorT_MapBackground_Interop_t_t, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_vector_background" "', argument " "1"" of type '" "std::vector< MapBackground_Interop > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< MapBackground_Interop > * >(argp1);
    delete arg1;
    r_ans = R_NilValue;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    R_ClearExternalPtr(self);
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_vector_colors___nonzero__ ( SEXP self, SEXP s_swig_copy)
{
  {
    bool result;
    std::vector< Color_Interop > *arg1 = (std::vector< Color_Interop > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_Color_Interop_std__allocatorT_Color_Interop_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_colors___nonzero__" "', argument " "1"" of type '" "std::vector< Color_Interop > const *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< Color_Interop > * >(argp1);
    result = (bool)std_vector_Sl_Color_Interop_Sg____nonzero__((std::vector< Color_Interop > const *)arg1);
    r_ans = Rf_ScalarLogical(result);
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_vector_colors___len__ ( SEXP self, SEXP s_swig_copy)
{
  {
    std::vector< Color_Interop >::size_type result;
    std::vector< Color_Interop > *arg1 = (std::vector< Color_Interop > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_Color_Interop_std__allocatorT_Color_Interop_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_colors___len__" "', argument " "1"" of type '" "std::vector< Color_Interop > const *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< Color_Interop > * >(argp1);
    result = std_vector_Sl_Color_Interop_Sg____len__((std::vector< Color_Interop > const *)arg1);
    r_ans = SWIG_From_int(static_cast< int >(result));
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_vector_colors_pop ( SEXP self, SEXP s_swig_copy)
{
  {
    std::vector< Color_Interop >::value_type result;
    std::vector< Color_Interop > *arg1 = (std::vector< Color_Interop > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_Color_Interop_std__allocatorT_Color_Interop_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_colors_pop" "', argument " "1"" of type '" "std::vector< Color_Interop > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< Color_Interop > * >(argp1);
    try {
      result = std_vector_Sl_Color_Interop_Sg__pop(arg1);
    } catch(std::out_of_range &_e) {
      SWIG_R_Raise(SWIG_R_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))), SWIGTYPE_p_std__out_of_range, SWIG_POINTER_OWN), "C/C++ exception of type " "std::out_of_range"); return R_NilValue;
    }
    r_ans = SWIG_R_NewPointerObj((new std::vector< Color_Interop >::value_type(result)), SWIGTYPE_p_Color_Interop, SWIG_POINTER_OWN |  0 );
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_vector_colors___getslice__ ( SEXP self, SEXP i, SEXP j)
{
  {
    std::vector< Color_Interop,std::allocator< Color_Interop > > *result = 0 ;
    std::vector< Color_Interop > *arg1 = (std::vector< Color_Interop > *) 0 ;
    std::vector< Color_Interop >::difference_type arg2 ;
    std::vector< Color_Interop >::difference_type arg3 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int val3 ;
    int ecode3 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_Color_Interop_std__allocatorT_Color_Interop_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_colors___getslice__" "', argument " "1"" of type '" "std::vector< Color_Interop > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< Color_Interop > * >(argp1);
    ecode2 = SWIG_AsVal_int(i, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_colors___getslice__" "', argument " "2"" of type '" "std::vector< Color_Interop >::difference_type""'");
    } 
    arg2 = static_cast< std::vector< Color_Interop >::difference_type >(val2);
    ecode3 = SWIG_AsVal_int(j, &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_colors___getslice__" "', argument " "3"" of type '" "std::vector< Color_Interop >::difference_type""'");
    } 
    arg3 = static_cast< std::vector< Color_Interop >::difference_type >(val3);
    try {
      result = (std::vector< Color_Interop,std::allocator< Color_Interop > > *)std_vector_Sl_Color_Interop_Sg____getslice__(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
    } catch(std::out_of_range &_e) {
      SWIG_R_Raise(SWIG_R_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))), SWIGTYPE_p_std__out_of_range, SWIG_POINTER_OWN), "C/C++ exception of type " "std::out_of_range"); return R_NilValue;
    }
    r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Color_Interop_std__allocatorT_Color_Interop_t_t, SWIG_POINTER_OWN |  0 );
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_vector_colors___setslice__ ( SEXP self, SEXP i, SEXP j, SEXP v)
{
  {
    std::vector< Color_Interop > *arg1 = (std::vector< Color_Interop > *) 0 ;
    std::vector< Color_Interop >::difference_type arg2 ;
    std::vector< Color_Interop >::difference_type arg3 ;
    std::vector< Color_Interop,std::allocator< Color_Interop > > *arg4 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int val3 ;
    int ecode3 = 0 ;
    int res4 = SWIG_OLDOBJ ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_Color_Interop_std__allocatorT_Color_Interop_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_colors___setslice__" "', argument " "1"" of type '" "std::vector< Color_Interop > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< Color_Interop > * >(argp1);
    ecode2 = SWIG_AsVal_int(i, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_colors___setslice__" "', argument " "2"" of type '" "std::vector< Color_Interop >::difference_type""'");
    } 
    arg2 = static_cast< std::vector< Color_Interop >::difference_type >(val2);
    ecode3 = SWIG_AsVal_int(j, &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_colors___setslice__" "', argument " "3"" of type '" "std::vector< Color_Interop >::difference_type""'");
    } 
    arg3 = static_cast< std::vector< Color_Interop >::difference_type >(val3);
    {
      std::vector< Color_Interop,std::allocator< Color_Interop > > *ptr = (std::vector< Color_Interop,std::allocator< Color_Interop > > *)0;
      res4 = swig::asptr(v, &ptr);
      if (!SWIG_IsOK(res4)) {
        SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "vector_colors___setslice__" "', argument " "4"" of type '" "std::vector< Color_Interop,std::allocator< Color_Interop > > const &""'"); 
      }
      if (!ptr) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_colors___setslice__" "', argument " "4"" of type '" "std::vector< Color_Interop,std::allocator< Color_Interop > > const &""'"); 
      }
      arg4 = ptr;
    }
    try {
      std_vector_Sl_Color_Interop_Sg____setslice__(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),(std::vector< Color_Interop,std::allocator< Color_Interop > > const &)*arg4);
    } catch(std::out_of_range &_e) {
      SWIG_R_Raise(SWIG_R_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))), SWIGTYPE_p_std__out_of_range, SWIG_POINTER_OWN), "C/C++ exception of type " "std::out_of_range"); return R_NilValue;
    } catch(std::invalid_argument &_e) {
      SWIG_R_Raise(SWIG_R_NewPointerObj((new std::invalid_argument(static_cast< const std::invalid_argument& >(_e))), SWIGTYPE_p_std__invalid_argument, SWIG_POINTER_OWN), "C/C++ exception of type " "std::invalid_argument"); return R_NilValue;
    }
    r_ans = R_NilValue;
    if (SWIG_IsNewObj(res4)) delete arg4;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
    if (SWIG_IsNewObj(res4)) delete arg4;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_vector_colors___delslice__ ( SEXP self, SEXP i, SEXP j)
{
  {
    std::vector< Color_Interop > *arg1 = (std::vector< Color_Interop > *) 0 ;
    std::vector< Color_Interop >::difference_type arg2 ;
    std::vector< Color_Interop >::difference_type arg3 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int val3 ;
    int ecode3 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_Color_Interop_std__allocatorT_Color_Interop_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_colors___delslice__" "', argument " "1"" of type '" "std::vector< Color_Interop > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< Color_Interop > * >(argp1);
    ecode2 = SWIG_AsVal_int(i, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_colors___delslice__" "', argument " "2"" of type '" "std::vector< Color_Interop >::difference_type""'");
    } 
    arg2 = static_cast< std::vector< Color_Interop >::difference_type >(val2);
    ecode3 = SWIG_AsVal_int(j, &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_colors___delslice__" "', argument " "3"" of type '" "std::vector< Color_Interop >::difference_type""'");
    } 
    arg3 = static_cast< std::vector< Color_Interop >::difference_type >(val3);
    try {
      std_vector_Sl_Color_Interop_Sg____delslice__(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
    } catch(std::out_of_range &_e) {
      SWIG_R_Raise(SWIG_R_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))), SWIGTYPE_p_std__out_of_range, SWIG_POINTER_OWN), "C/C++ exception of type " "std::out_of_range"); return R_NilValue;
    }
    r_ans = R_NilValue;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_vector_colors___delitem__ ( SEXP self, SEXP i)
{
  {
    std::vector< Color_Interop > *arg1 = (std::vector< Color_Interop > *) 0 ;
    std::vector< Color_Interop >::difference_type arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_Color_Interop_std__allocatorT_Color_Interop_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_colors___delitem__" "', argument " "1"" of type '" "std::vector< Color_Interop > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< Color_Interop > * >(argp1);
    ecode2 = SWIG_AsVal_int(i, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_colors___delitem__" "', argument " "2"" of type '" "std::vector< Color_Interop >::difference_type""'");
    } 
    arg2 = static_cast< std::vector< Color_Interop >::difference_type >(val2);
    try {
      std_vector_Sl_Color_Interop_Sg____delitem__(arg1,SWIG_STD_MOVE(arg2));
    } catch(std::out_of_range &_e) {
      SWIG_R_Raise(SWIG_R_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))), SWIGTYPE_p_std__out_of_range, SWIG_POINTER_OWN), "C/C++ exception of type " "std::out_of_range"); return R_NilValue;
    }
    r_ans = R_NilValue;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_vector_colors___getitem__ ( SEXP self, SEXP i, SEXP s_swig_copy)
{
  {
    std::vector< Color_Interop >::value_type *result = 0 ;
    std::vector< Color_Interop > *arg1 = (std::vector< Color_Interop > *) 0 ;
    std::vector< Color_Interop >::difference_type arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_Color_Interop_std__allocatorT_Color_Interop_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_colors___getitem__" "', argument " "1"" of type '" "std::vector< Color_Interop > const *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< Color_Interop > * >(argp1);
    ecode2 = SWIG_AsVal_int(i, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_colors___getitem__" "', argument " "2"" of type '" "std::vector< Color_Interop >::difference_type""'");
    } 
    arg2 = static_cast< std::vector< Color_Interop >::difference_type >(val2);
    try {
      result = (std::vector< Color_Interop >::value_type *) &std_vector_Sl_Color_Interop_Sg____getitem__((std::vector< Color_Interop > const *)arg1,SWIG_STD_MOVE(arg2));
    } catch(std::out_of_range &_e) {
      SWIG_R_Raise(SWIG_R_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))), SWIGTYPE_p_std__out_of_range, SWIG_POINTER_OWN), "C/C++ exception of type " "std::out_of_range"); return R_NilValue;
    }
    r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Color_Interop, 0 |  0 );
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_vector_colors___setitem__ ( SEXP self, SEXP i, SEXP x)
{
  {
    std::vector< Color_Interop > *arg1 = (std::vector< Color_Interop > *) 0 ;
    std::vector< Color_Interop >::difference_type arg2 ;
    std::vector< Color_Interop >::value_type *arg3 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    void *argp3 = 0 ;
    int res3 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_Color_Interop_std__allocatorT_Color_Interop_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_colors___setitem__" "', argument " "1"" of type '" "std::vector< Color_Interop > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< Color_Interop > * >(argp1);
    ecode2 = SWIG_AsVal_int(i, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_colors___setitem__" "', argument " "2"" of type '" "std::vector< Color_Interop >::difference_type""'");
    } 
    arg2 = static_cast< std::vector< Color_Interop >::difference_type >(val2);
    res3 = SWIG_R_ConvertPtr(x, &argp3, SWIGTYPE_p_Color_Interop,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vector_colors___setitem__" "', argument " "3"" of type '" "std::vector< Color_Interop >::value_type const &""'"); 
    }
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_colors___setitem__" "', argument " "3"" of type '" "std::vector< Color_Interop >::value_type const &""'"); 
    }
    arg3 = reinterpret_cast< std::vector< Color_Interop >::value_type * >(argp3);
    try {
      std_vector_Sl_Color_Interop_Sg____setitem__(arg1,SWIG_STD_MOVE(arg2),(Color_Interop const &)*arg3);
    } catch(std::out_of_range &_e) {
      SWIG_R_Raise(SWIG_R_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))), SWIGTYPE_p_std__out_of_range, SWIG_POINTER_OWN), "C/C++ exception of type " "std::out_of_range"); return R_NilValue;
    }
    r_ans = R_NilValue;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_vector_colors_append ( SEXP self, SEXP x)
{
  {
    std::vector< Color_Interop > *arg1 = (std::vector< Color_Interop > *) 0 ;
    std::vector< Color_Interop >::value_type *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_Color_Interop_std__allocatorT_Color_Interop_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_colors_append" "', argument " "1"" of type '" "std::vector< Color_Interop > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< Color_Interop > * >(argp1);
    res2 = SWIG_R_ConvertPtr(x, &argp2, SWIGTYPE_p_Color_Interop,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vector_colors_append" "', argument " "2"" of type '" "std::vector< Color_Interop >::value_type const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_colors_append" "', argument " "2"" of type '" "std::vector< Color_Interop >::value_type const &""'"); 
    }
    arg2 = reinterpret_cast< std::vector< Color_Interop >::value_type * >(argp2);
    std_vector_Sl_Color_Interop_Sg__append(arg1,(Color_Interop const &)*arg2);
    r_ans = R_NilValue;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_new_vector_colors__SWIG_0 ( )
{
  {
    std::vector< Color_Interop > *result = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    result = (std::vector< Color_Interop > *)new std::vector< Color_Interop >();
    r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Color_Interop_std__allocatorT_Color_Interop_t_t, SWIG_POINTER_OWN |  0 );
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_new_vector_colors__SWIG_1 ( SEXP other)
{
  {
    std::vector< Color_Interop > *result = 0 ;
    std::vector< Color_Interop > *arg1 = 0 ;
    int res1 = SWIG_OLDOBJ ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    {
      std::vector< Color_Interop,std::allocator< Color_Interop > > *ptr = (std::vector< Color_Interop,std::allocator< Color_Interop > > *)0;
      res1 = swig::asptr(other, &ptr);
      if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_vector_colors" "', argument " "1"" of type '" "std::vector< Color_Interop > const &""'"); 
      }
      if (!ptr) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_vector_colors" "', argument " "1"" of type '" "std::vector< Color_Interop > const &""'"); 
      }
      arg1 = ptr;
    }
    result = (std::vector< Color_Interop > *)new std::vector< Color_Interop >((std::vector< Color_Interop > const &)*arg1);
    r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Color_Interop_std__allocatorT_Color_Interop_t_t, SWIG_POINTER_OWN |  0 );
    if (SWIG_IsNewObj(res1)) delete arg1;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
    if (SWIG_IsNewObj(res1)) delete arg1;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_vector_colors_empty ( SEXP self, SEXP s_swig_copy)
{
  {
    bool result;
    std::vector< Color_Interop > *arg1 = (std::vector< Color_Interop > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_Color_Interop_std__allocatorT_Color_Interop_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_colors_empty" "', argument " "1"" of type '" "std::vector< Color_Interop > const *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< Color_Interop > * >(argp1);
    result = (bool)((std::vector< Color_Interop > const *)arg1)->empty();
    r_ans = Rf_ScalarLogical(result);
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_vector_colors_size ( SEXP self, SEXP s_swig_copy)
{
  {
    std::vector< Color_Interop >::size_type result;
    std::vector< Color_Interop > *arg1 = (std::vector< Color_Interop > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_Color_Interop_std__allocatorT_Color_Interop_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_colors_size" "', argument " "1"" of type '" "std::vector< Color_Interop > const *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< Color_Interop > * >(argp1);
    result = ((std::vector< Color_Interop > const *)arg1)->size();
    r_ans = SWIG_From_int(static_cast< int >(result));
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_vector_colors_swap ( SEXP self, SEXP v)
{
  {
    std::vector< Color_Interop > *arg1 = (std::vector< Color_Interop > *) 0 ;
    std::vector< Color_Interop > *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_Color_Interop_std__allocatorT_Color_Interop_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_colors_swap" "', argument " "1"" of type '" "std::vector< Color_Interop > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< Color_Interop > * >(argp1);
    res2 = SWIG_R_ConvertPtr(v, &argp2, SWIGTYPE_p_std__vectorT_Color_Interop_std__allocatorT_Color_Interop_t_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vector_colors_swap" "', argument " "2"" of type '" "std::vector< Color_Interop > &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_colors_swap" "', argument " "2"" of type '" "std::vector< Color_Interop > &""'"); 
    }
    arg2 = reinterpret_cast< std::vector< Color_Interop > * >(argp2);
    (arg1)->swap(*arg2);
    r_ans = R_NilValue;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_vector_colors_clear ( SEXP self)
{
  {
    std::vector< Color_Interop > *arg1 = (std::vector< Color_Interop > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_Color_Interop_std__allocatorT_Color_Interop_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_colors_clear" "', argument " "1"" of type '" "std::vector< Color_Interop > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< Color_Interop > * >(argp1);
    (arg1)->clear();
    r_ans = R_NilValue;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_vector_colors_get_allocator ( SEXP self, SEXP s_swig_copy)
{
  {
    SwigValueWrapper< std::allocator< Color_Interop > > result;
    std::vector< Color_Interop > *arg1 = (std::vector< Color_Interop > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_Color_Interop_std__allocatorT_Color_Interop_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_colors_get_allocator" "', argument " "1"" of type '" "std::vector< Color_Interop > const *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< Color_Interop > * >(argp1);
    result = ((std::vector< Color_Interop > const *)arg1)->get_allocator();
    r_ans = SWIG_R_NewPointerObj((new std::vector< Color_Interop >::allocator_type(result)), SWIGTYPE_p_std__allocatorT_Color_Interop_t, SWIG_POINTER_OWN |  0 );
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_new_vector_colors__SWIG_2 ( SEXP size)
{
  {
    std::vector< Color_Interop > *result = 0 ;
    std::vector< Color_Interop >::size_type arg1 ;
    int val1 ;
    int ecode1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    ecode1 = SWIG_AsVal_int(size, &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_vector_colors" "', argument " "1"" of type '" "std::vector< Color_Interop >::size_type""'");
    } 
    arg1 = static_cast< std::vector< Color_Interop >::size_type >(val1);
    result = (std::vector< Color_Interop > *)new std::vector< Color_Interop >(arg1);
    r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Color_Interop_std__allocatorT_Color_Interop_t_t, SWIG_POINTER_OWN |  0 );
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_vector_colors_pop_back ( SEXP self)
{
  {
    std::vector< Color_Interop > *arg1 = (std::vector< Color_Interop > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_Color_Interop_std__allocatorT_Color_Interop_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_colors_pop_back" "', argument " "1"" of type '" "std::vector< Color_Interop > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< Color_Interop > * >(argp1);
    (arg1)->pop_back();
    r_ans = R_NilValue;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_vector_colors_resize__SWIG_0 ( SEXP self, SEXP new_size)
{
  {
    std::vector< Color_Interop > *arg1 = (std::vector< Color_Interop > *) 0 ;
    std::vector< Color_Interop >::size_type arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_Color_Interop_std__allocatorT_Color_Interop_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_colors_resize" "', argument " "1"" of type '" "std::vector< Color_Interop > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< Color_Interop > * >(argp1);
    ecode2 = SWIG_AsVal_int(new_size, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_colors_resize" "', argument " "2"" of type '" "std::vector< Color_Interop >::size_type""'");
    } 
    arg2 = static_cast< std::vector< Color_Interop >::size_type >(val2);
    (arg1)->resize(arg2);
    r_ans = R_NilValue;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_new_vector_colors__SWIG_3 ( SEXP size, SEXP value)
{
  {
    std::vector< Color_Interop > *result = 0 ;
    std::vector< Color_Interop >::size_type arg1 ;
    std::vector< Color_Interop >::value_type *arg2 = 0 ;
    int val1 ;
    int ecode1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    ecode1 = SWIG_AsVal_int(size, &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_vector_colors" "', argument " "1"" of type '" "std::vector< Color_Interop >::size_type""'");
    } 
    arg1 = static_cast< std::vector< Color_Interop >::size_type >(val1);
    res2 = SWIG_R_ConvertPtr(value, &argp2, SWIGTYPE_p_Color_Interop,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_vector_colors" "', argument " "2"" of type '" "std::vector< Color_Interop >::value_type const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_vector_colors" "', argument " "2"" of type '" "std::vector< Color_Interop >::value_type const &""'"); 
    }
    arg2 = reinterpret_cast< std::vector< Color_Interop >::value_type * >(argp2);
    result = (std::vector< Color_Interop > *)new std::vector< Color_Interop >(arg1,(std::vector< Color_Interop >::value_type const &)*arg2);
    r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Color_Interop_std__allocatorT_Color_Interop_t_t, SWIG_POINTER_OWN |  0 );
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_vector_colors_push_back ( SEXP self, SEXP x)
{
  {
    std::vector< Color_Interop > *arg1 = (std::vector< Color_Interop > *) 0 ;
    std::vector< Color_Interop >::value_type *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_Color_Interop_std__allocatorT_Color_Interop_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_colors_push_back" "', argument " "1"" of type '" "std::vector< Color_Interop > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< Color_Interop > * >(argp1);
    res2 = SWIG_R_ConvertPtr(x, &argp2, SWIGTYPE_p_Color_Interop,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vector_colors_push_back" "', argument " "2"" of type '" "std::vector< Color_Interop >::value_type const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_colors_push_back" "', argument " "2"" of type '" "std::vector< Color_Interop >::value_type const &""'"); 
    }
    arg2 = reinterpret_cast< std::vector< Color_Interop >::value_type * >(argp2);
    (arg1)->push_back((std::vector< Color_Interop >::value_type const &)*arg2);
    r_ans = R_NilValue;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_vector_colors_front ( SEXP self, SEXP s_swig_copy)
{
  {
    std::vector< Color_Interop >::value_type *result = 0 ;
    std::vector< Color_Interop > *arg1 = (std::vector< Color_Interop > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_Color_Interop_std__allocatorT_Color_Interop_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_colors_front" "', argument " "1"" of type '" "std::vector< Color_Interop > const *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< Color_Interop > * >(argp1);
    result = (std::vector< Color_Interop >::value_type *) &((std::vector< Color_Interop > const *)arg1)->front();
    r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Color_Interop, 0 |  0 );
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_vector_colors_back ( SEXP self, SEXP s_swig_copy)
{
  {
    std::vector< Color_Interop >::value_type *result = 0 ;
    std::vector< Color_Interop > *arg1 = (std::vector< Color_Interop > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_Color_Interop_std__allocatorT_Color_Interop_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_colors_back" "', argument " "1"" of type '" "std::vector< Color_Interop > const *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< Color_Interop > * >(argp1);
    result = (std::vector< Color_Interop >::value_type *) &((std::vector< Color_Interop > const *)arg1)->back();
    r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Color_Interop, 0 |  0 );
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_vector_colors_assign ( SEXP self, SEXP n, SEXP x)
{
  {
    std::vector< Color_Interop > *arg1 = (std::vector< Color_Interop > *) 0 ;
    std::vector< Color_Interop >::size_type arg2 ;
    std::vector< Color_Interop >::value_type *arg3 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    void *argp3 = 0 ;
    int res3 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_Color_Interop_std__allocatorT_Color_Interop_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_colors_assign" "', argument " "1"" of type '" "std::vector< Color_Interop > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< Color_Interop > * >(argp1);
    ecode2 = SWIG_AsVal_int(n, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_colors_assign" "', argument " "2"" of type '" "std::vector< Color_Interop >::size_type""'");
    } 
    arg2 = static_cast< std::vector< Color_Interop >::size_type >(val2);
    res3 = SWIG_R_ConvertPtr(x, &argp3, SWIGTYPE_p_Color_Interop,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vector_colors_assign" "', argument " "3"" of type '" "std::vector< Color_Interop >::value_type const &""'"); 
    }
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_colors_assign" "', argument " "3"" of type '" "std::vector< Color_Interop >::value_type const &""'"); 
    }
    arg3 = reinterpret_cast< std::vector< Color_Interop >::value_type * >(argp3);
    (arg1)->assign(arg2,(std::vector< Color_Interop >::value_type const &)*arg3);
    r_ans = R_NilValue;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_vector_colors_resize__SWIG_1 ( SEXP self, SEXP new_size, SEXP x)
{
  {
    std::vector< Color_Interop > *arg1 = (std::vector< Color_Interop > *) 0 ;
    std::vector< Color_Interop >::size_type arg2 ;
    std::vector< Color_Interop >::value_type *arg3 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    void *argp3 = 0 ;
    int res3 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_Color_Interop_std__allocatorT_Color_Interop_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_colors_resize" "', argument " "1"" of type '" "std::vector< Color_Interop > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< Color_Interop > * >(argp1);
    ecode2 = SWIG_AsVal_int(new_size, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_colors_resize" "', argument " "2"" of type '" "std::vector< Color_Interop >::size_type""'");
    } 
    arg2 = static_cast< std::vector< Color_Interop >::size_type >(val2);
    res3 = SWIG_R_ConvertPtr(x, &argp3, SWIGTYPE_p_Color_Interop,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vector_colors_resize" "', argument " "3"" of type '" "std::vector< Color_Interop >::value_type const &""'"); 
    }
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_colors_resize" "', argument " "3"" of type '" "std::vector< Color_Interop >::value_type const &""'"); 
    }
    arg3 = reinterpret_cast< std::vector< Color_Interop >::value_type * >(argp3);
    (arg1)->resize(arg2,(std::vector< Color_Interop >::value_type const &)*arg3);
    r_ans = R_NilValue;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_vector_colors_reserve ( SEXP self, SEXP n)
{
  {
    std::vector< Color_Interop > *arg1 = (std::vector< Color_Interop > *) 0 ;
    std::vector< Color_Interop >::size_type arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_Color_Interop_std__allocatorT_Color_Interop_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_colors_reserve" "', argument " "1"" of type '" "std::vector< Color_Interop > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< Color_Interop > * >(argp1);
    ecode2 = SWIG_AsVal_int(n, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_colors_reserve" "', argument " "2"" of type '" "std::vector< Color_Interop >::size_type""'");
    } 
    arg2 = static_cast< std::vector< Color_Interop >::size_type >(val2);
    (arg1)->reserve(arg2);
    r_ans = R_NilValue;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_vector_colors_capacity ( SEXP self, SEXP s_swig_copy)
{
  {
    std::vector< Color_Interop >::size_type result;
    std::vector< Color_Interop > *arg1 = (std::vector< Color_Interop > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_Color_Interop_std__allocatorT_Color_Interop_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_colors_capacity" "', argument " "1"" of type '" "std::vector< Color_Interop > const *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< Color_Interop > * >(argp1);
    result = ((std::vector< Color_Interop > const *)arg1)->capacity();
    r_ans = SWIG_From_int(static_cast< int >(result));
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_delete_vector_colors ( SEXP self)
{
  {
    std::vector< Color_Interop > *arg1 = (std::vector< Color_Interop > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_Color_Interop_std__allocatorT_Color_Interop_t_t, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_vector_colors" "', argument " "1"" of type '" "std::vector< Color_Interop > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< Color_Interop > * >(argp1);
    delete arg1;
    r_ans = R_NilValue;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    R_ClearExternalPtr(self);
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_new_map_int_background__SWIG_0 ( SEXP other)
{
  {
    std::map< int,MapBackground_Interop > *result = 0 ;
    std::less< int > *arg1 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(other, &argp1, SWIGTYPE_p_std__lessT_int_t,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_map_int_background" "', argument " "1"" of type '" "std::less< int > const &""'"); 
    }
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_map_int_background" "', argument " "1"" of type '" "std::less< int > const &""'"); 
    }
    arg1 = reinterpret_cast< std::less< int > * >(argp1);
    result = (std::map< int,MapBackground_Interop > *)new std::map< int,MapBackground_Interop >((std::less< int > const &)*arg1);
    r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__mapT_int_MapBackground_Interop_std__lessT_int_t_std__allocatorT_std__pairT_int_const_MapBackground_Interop_t_t_t, SWIG_POINTER_OWN |  0 );
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_new_map_int_background__SWIG_1 ( )
{
  {
    std::map< int,MapBackground_Interop > *result = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    result = (std::map< int,MapBackground_Interop > *)new std::map< int,MapBackground_Interop >();
    r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__mapT_int_MapBackground_Interop_std__lessT_int_t_std__allocatorT_std__pairT_int_const_MapBackground_Interop_t_t_t, SWIG_POINTER_OWN |  0 );
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_new_map_int_background__SWIG_2 ( SEXP other)
{
  {
    std::map< int,MapBackground_Interop > *result = 0 ;
    std::map< int,MapBackground_Interop > *arg1 = 0 ;
    int res1 = SWIG_OLDOBJ ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    {
      std::map< int,MapBackground_Interop,std::less< int >,std::allocator< std::pair< int const,MapBackground_Interop > > > *ptr = (std::map< int,MapBackground_Interop,std::less< int >,std::allocator< std::pair< int const,MapBackground_Interop > > > *)0;
      res1 = swig::asptr(other, &ptr);
      if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_map_int_background" "', argument " "1"" of type '" "std::map< int,MapBackground_Interop > const &""'"); 
      }
      if (!ptr) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_map_int_background" "', argument " "1"" of type '" "std::map< int,MapBackground_Interop > const &""'"); 
      }
      arg1 = ptr;
    }
    result = (std::map< int,MapBackground_Interop > *)new std::map< int,MapBackground_Interop >((std::map< int,MapBackground_Interop > const &)*arg1);
    r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__mapT_int_MapBackground_Interop_std__lessT_int_t_std__allocatorT_std__pairT_int_const_MapBackground_Interop_t_t_t, SWIG_POINTER_OWN |  0 );
    if (SWIG_IsNewObj(res1)) delete arg1;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
    if (SWIG_IsNewObj(res1)) delete arg1;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_map_int_background_empty ( SEXP self, SEXP s_swig_copy)
{
  {
    bool result;
    std::map< int,MapBackground_Interop > *arg1 = (std::map< int,MapBackground_Interop > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__mapT_int_MapBackground_Interop_std__lessT_int_t_std__allocatorT_std__pairT_int_const_MapBackground_Interop_t_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_int_background_empty" "', argument " "1"" of type '" "std::map< int,MapBackground_Interop > const *""'"); 
    }
    arg1 = reinterpret_cast< std::map< int,MapBackground_Interop > * >(argp1);
    result = (bool)((std::map< int,MapBackground_Interop > const *)arg1)->empty();
    r_ans = Rf_ScalarLogical(result);
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_map_int_background_size ( SEXP self, SEXP s_swig_copy)
{
  {
    std::map< int,MapBackground_Interop >::size_type result;
    std::map< int,MapBackground_Interop > *arg1 = (std::map< int,MapBackground_Interop > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__mapT_int_MapBackground_Interop_std__lessT_int_t_std__allocatorT_std__pairT_int_const_MapBackground_Interop_t_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_int_background_size" "', argument " "1"" of type '" "std::map< int,MapBackground_Interop > const *""'"); 
    }
    arg1 = reinterpret_cast< std::map< int,MapBackground_Interop > * >(argp1);
    result = ((std::map< int,MapBackground_Interop > const *)arg1)->size();
    r_ans = SWIG_From_int(static_cast< int >(result));
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_map_int_background_swap ( SEXP self, SEXP v)
{
  {
    std::map< int,MapBackground_Interop > *arg1 = (std::map< int,MapBackground_Interop > *) 0 ;
    std::map< int,MapBackground_Interop > *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__mapT_int_MapBackground_Interop_std__lessT_int_t_std__allocatorT_std__pairT_int_const_MapBackground_Interop_t_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_int_background_swap" "', argument " "1"" of type '" "std::map< int,MapBackground_Interop > *""'"); 
    }
    arg1 = reinterpret_cast< std::map< int,MapBackground_Interop > * >(argp1);
    res2 = SWIG_R_ConvertPtr(v, &argp2, SWIGTYPE_p_std__mapT_int_MapBackground_Interop_std__lessT_int_t_std__allocatorT_std__pairT_int_const_MapBackground_Interop_t_t_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "map_int_background_swap" "', argument " "2"" of type '" "std::map< int,MapBackground_Interop > &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "map_int_background_swap" "', argument " "2"" of type '" "std::map< int,MapBackground_Interop > &""'"); 
    }
    arg2 = reinterpret_cast< std::map< int,MapBackground_Interop > * >(argp2);
    (arg1)->swap(*arg2);
    r_ans = R_NilValue;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_map_int_background_clear ( SEXP self)
{
  {
    std::map< int,MapBackground_Interop > *arg1 = (std::map< int,MapBackground_Interop > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__mapT_int_MapBackground_Interop_std__lessT_int_t_std__allocatorT_std__pairT_int_const_MapBackground_Interop_t_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_int_background_clear" "', argument " "1"" of type '" "std::map< int,MapBackground_Interop > *""'"); 
    }
    arg1 = reinterpret_cast< std::map< int,MapBackground_Interop > * >(argp1);
    (arg1)->clear();
    r_ans = R_NilValue;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_map_int_background_get_allocator ( SEXP self, SEXP s_swig_copy)
{
  {
    SwigValueWrapper< std::allocator< std::pair< int const,MapBackground_Interop > > > result;
    std::map< int,MapBackground_Interop > *arg1 = (std::map< int,MapBackground_Interop > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__mapT_int_MapBackground_Interop_std__lessT_int_t_std__allocatorT_std__pairT_int_const_MapBackground_Interop_t_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_int_background_get_allocator" "', argument " "1"" of type '" "std::map< int,MapBackground_Interop > const *""'"); 
    }
    arg1 = reinterpret_cast< std::map< int,MapBackground_Interop > * >(argp1);
    result = ((std::map< int,MapBackground_Interop > const *)arg1)->get_allocator();
    r_ans = SWIG_R_NewPointerObj((new std::map< int,MapBackground_Interop >::allocator_type(result)), SWIGTYPE_p_std__allocatorT_std__pairT_int_const_MapBackground_Interop_t_t, SWIG_POINTER_OWN |  0 );
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_map_int_background_erase ( SEXP self, SEXP x, SEXP s_swig_copy)
{
  {
    std::map< int,MapBackground_Interop >::size_type result;
    std::map< int,MapBackground_Interop > *arg1 = (std::map< int,MapBackground_Interop > *) 0 ;
    std::map< int,MapBackground_Interop >::key_type *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    std::map< int,MapBackground_Interop >::key_type temp2 ;
    int val2 ;
    int ecode2 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__mapT_int_MapBackground_Interop_std__lessT_int_t_std__allocatorT_std__pairT_int_const_MapBackground_Interop_t_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_int_background_erase" "', argument " "1"" of type '" "std::map< int,MapBackground_Interop > *""'"); 
    }
    arg1 = reinterpret_cast< std::map< int,MapBackground_Interop > * >(argp1);
    ecode2 = SWIG_AsVal_int(x, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "map_int_background_erase" "', argument " "2"" of type '" "std::map< int,MapBackground_Interop >::key_type""'");
    } 
    temp2 = static_cast< std::map< int,MapBackground_Interop >::key_type >(val2);
    arg2 = &temp2;
    result = (arg1)->erase((std::map< int,MapBackground_Interop >::key_type const &)*arg2);
    r_ans = SWIG_From_int(static_cast< int >(result));
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_map_int_background_count ( SEXP self, SEXP x, SEXP s_swig_copy)
{
  {
    std::map< int,MapBackground_Interop >::size_type result;
    std::map< int,MapBackground_Interop > *arg1 = (std::map< int,MapBackground_Interop > *) 0 ;
    std::map< int,MapBackground_Interop >::key_type *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    std::map< int,MapBackground_Interop >::key_type temp2 ;
    int val2 ;
    int ecode2 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__mapT_int_MapBackground_Interop_std__lessT_int_t_std__allocatorT_std__pairT_int_const_MapBackground_Interop_t_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_int_background_count" "', argument " "1"" of type '" "std::map< int,MapBackground_Interop > const *""'"); 
    }
    arg1 = reinterpret_cast< std::map< int,MapBackground_Interop > * >(argp1);
    ecode2 = SWIG_AsVal_int(x, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "map_int_background_count" "', argument " "2"" of type '" "std::map< int,MapBackground_Interop >::key_type""'");
    } 
    temp2 = static_cast< std::map< int,MapBackground_Interop >::key_type >(val2);
    arg2 = &temp2;
    result = ((std::map< int,MapBackground_Interop > const *)arg1)->count((std::map< int,MapBackground_Interop >::key_type const &)*arg2);
    r_ans = SWIG_From_int(static_cast< int >(result));
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_delete_map_int_background ( SEXP self)
{
  {
    std::map< int,MapBackground_Interop > *arg1 = (std::map< int,MapBackground_Interop > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__mapT_int_MapBackground_Interop_std__lessT_int_t_std__allocatorT_std__pairT_int_const_MapBackground_Interop_t_t_t, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_map_int_background" "', argument " "1"" of type '" "std::map< int,MapBackground_Interop > *""'"); 
    }
    arg1 = reinterpret_cast< std::map< int,MapBackground_Interop > * >(argp1);
    delete arg1;
    r_ans = R_NilValue;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    R_ClearExternalPtr(self);
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_new_map_int_polyline__SWIG_0 ( SEXP other)
{
  {
    std::map< int,MapPolyline_Interop > *result = 0 ;
    std::less< int > *arg1 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(other, &argp1, SWIGTYPE_p_std__lessT_int_t,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_map_int_polyline" "', argument " "1"" of type '" "std::less< int > const &""'"); 
    }
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_map_int_polyline" "', argument " "1"" of type '" "std::less< int > const &""'"); 
    }
    arg1 = reinterpret_cast< std::less< int > * >(argp1);
    result = (std::map< int,MapPolyline_Interop > *)new std::map< int,MapPolyline_Interop >((std::less< int > const &)*arg1);
    r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__mapT_int_MapPolyline_Interop_std__lessT_int_t_std__allocatorT_std__pairT_int_const_MapPolyline_Interop_t_t_t, SWIG_POINTER_OWN |  0 );
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_new_map_int_polyline__SWIG_1 ( )
{
  {
    std::map< int,MapPolyline_Interop > *result = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    result = (std::map< int,MapPolyline_Interop > *)new std::map< int,MapPolyline_Interop >();
    r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__mapT_int_MapPolyline_Interop_std__lessT_int_t_std__allocatorT_std__pairT_int_const_MapPolyline_Interop_t_t_t, SWIG_POINTER_OWN |  0 );
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_new_map_int_polyline__SWIG_2 ( SEXP other)
{
  {
    std::map< int,MapPolyline_Interop > *result = 0 ;
    std::map< int,MapPolyline_Interop > *arg1 = 0 ;
    int res1 = SWIG_OLDOBJ ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    {
      std::map< int,MapPolyline_Interop,std::less< int >,std::allocator< std::pair< int const,MapPolyline_Interop > > > *ptr = (std::map< int,MapPolyline_Interop,std::less< int >,std::allocator< std::pair< int const,MapPolyline_Interop > > > *)0;
      res1 = swig::asptr(other, &ptr);
      if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_map_int_polyline" "', argument " "1"" of type '" "std::map< int,MapPolyline_Interop > const &""'"); 
      }
      if (!ptr) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_map_int_polyline" "', argument " "1"" of type '" "std::map< int,MapPolyline_Interop > const &""'"); 
      }
      arg1 = ptr;
    }
    result = (std::map< int,MapPolyline_Interop > *)new std::map< int,MapPolyline_Interop >((std::map< int,MapPolyline_Interop > const &)*arg1);
    r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__mapT_int_MapPolyline_Interop_std__lessT_int_t_std__allocatorT_std__pairT_int_const_MapPolyline_Interop_t_t_t, SWIG_POINTER_OWN |  0 );
    if (SWIG_IsNewObj(res1)) delete arg1;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
    if (SWIG_IsNewObj(res1)) delete arg1;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_map_int_polyline_empty ( SEXP self, SEXP s_swig_copy)
{
  {
    bool result;
    std::map< int,MapPolyline_Interop > *arg1 = (std::map< int,MapPolyline_Interop > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__mapT_int_MapPolyline_Interop_std__lessT_int_t_std__allocatorT_std__pairT_int_const_MapPolyline_Interop_t_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_int_polyline_empty" "', argument " "1"" of type '" "std::map< int,MapPolyline_Interop > const *""'"); 
    }
    arg1 = reinterpret_cast< std::map< int,MapPolyline_Interop > * >(argp1);
    result = (bool)((std::map< int,MapPolyline_Interop > const *)arg1)->empty();
    r_ans = Rf_ScalarLogical(result);
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_map_int_polyline_size ( SEXP self, SEXP s_swig_copy)
{
  {
    std::map< int,MapPolyline_Interop >::size_type result;
    std::map< int,MapPolyline_Interop > *arg1 = (std::map< int,MapPolyline_Interop > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__mapT_int_MapPolyline_Interop_std__lessT_int_t_std__allocatorT_std__pairT_int_const_MapPolyline_Interop_t_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_int_polyline_size" "', argument " "1"" of type '" "std::map< int,MapPolyline_Interop > const *""'"); 
    }
    arg1 = reinterpret_cast< std::map< int,MapPolyline_Interop > * >(argp1);
    result = ((std::map< int,MapPolyline_Interop > const *)arg1)->size();
    r_ans = SWIG_From_int(static_cast< int >(result));
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_map_int_polyline_swap ( SEXP self, SEXP v)
{
  {
    std::map< int,MapPolyline_Interop > *arg1 = (std::map< int,MapPolyline_Interop > *) 0 ;
    std::map< int,MapPolyline_Interop > *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__mapT_int_MapPolyline_Interop_std__lessT_int_t_std__allocatorT_std__pairT_int_const_MapPolyline_Interop_t_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_int_polyline_swap" "', argument " "1"" of type '" "std::map< int,MapPolyline_Interop > *""'"); 
    }
    arg1 = reinterpret_cast< std::map< int,MapPolyline_Interop > * >(argp1);
    res2 = SWIG_R_ConvertPtr(v, &argp2, SWIGTYPE_p_std__mapT_int_MapPolyline_Interop_std__lessT_int_t_std__allocatorT_std__pairT_int_const_MapPolyline_Interop_t_t_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "map_int_polyline_swap" "', argument " "2"" of type '" "std::map< int,MapPolyline_Interop > &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "map_int_polyline_swap" "', argument " "2"" of type '" "std::map< int,MapPolyline_Interop > &""'"); 
    }
    arg2 = reinterpret_cast< std::map< int,MapPolyline_Interop > * >(argp2);
    (arg1)->swap(*arg2);
    r_ans = R_NilValue;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_map_int_polyline_clear ( SEXP self)
{
  {
    std::map< int,MapPolyline_Interop > *arg1 = (std::map< int,MapPolyline_Interop > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__mapT_int_MapPolyline_Interop_std__lessT_int_t_std__allocatorT_std__pairT_int_const_MapPolyline_Interop_t_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_int_polyline_clear" "', argument " "1"" of type '" "std::map< int,MapPolyline_Interop > *""'"); 
    }
    arg1 = reinterpret_cast< std::map< int,MapPolyline_Interop > * >(argp1);
    (arg1)->clear();
    r_ans = R_NilValue;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_map_int_polyline_get_allocator ( SEXP self, SEXP s_swig_copy)
{
  {
    SwigValueWrapper< std::allocator< std::pair< int const,MapPolyline_Interop > > > result;
    std::map< int,MapPolyline_Interop > *arg1 = (std::map< int,MapPolyline_Interop > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__mapT_int_MapPolyline_Interop_std__lessT_int_t_std__allocatorT_std__pairT_int_const_MapPolyline_Interop_t_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_int_polyline_get_allocator" "', argument " "1"" of type '" "std::map< int,MapPolyline_Interop > const *""'"); 
    }
    arg1 = reinterpret_cast< std::map< int,MapPolyline_Interop > * >(argp1);
    result = ((std::map< int,MapPolyline_Interop > const *)arg1)->get_allocator();
    r_ans = SWIG_R_NewPointerObj((new std::map< int,MapPolyline_Interop >::allocator_type(result)), SWIGTYPE_p_std__allocatorT_std__pairT_int_const_MapPolyline_Interop_t_t, SWIG_POINTER_OWN |  0 );
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_map_int_polyline_erase ( SEXP self, SEXP x, SEXP s_swig_copy)
{
  {
    std::map< int,MapPolyline_Interop >::size_type result;
    std::map< int,MapPolyline_Interop > *arg1 = (std::map< int,MapPolyline_Interop > *) 0 ;
    std::map< int,MapPolyline_Interop >::key_type *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    std::map< int,MapPolyline_Interop >::key_type temp2 ;
    int val2 ;
    int ecode2 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__mapT_int_MapPolyline_Interop_std__lessT_int_t_std__allocatorT_std__pairT_int_const_MapPolyline_Interop_t_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_int_polyline_erase" "', argument " "1"" of type '" "std::map< int,MapPolyline_Interop > *""'"); 
    }
    arg1 = reinterpret_cast< std::map< int,MapPolyline_Interop > * >(argp1);
    ecode2 = SWIG_AsVal_int(x, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "map_int_polyline_erase" "', argument " "2"" of type '" "std::map< int,MapPolyline_Interop >::key_type""'");
    } 
    temp2 = static_cast< std::map< int,MapPolyline_Interop >::key_type >(val2);
    arg2 = &temp2;
    result = (arg1)->erase((std::map< int,MapPolyline_Interop >::key_type const &)*arg2);
    r_ans = SWIG_From_int(static_cast< int >(result));
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_map_int_polyline_count ( SEXP self, SEXP x, SEXP s_swig_copy)
{
  {
    std::map< int,MapPolyline_Interop >::size_type result;
    std::map< int,MapPolyline_Interop > *arg1 = (std::map< int,MapPolyline_Interop > *) 0 ;
    std::map< int,MapPolyline_Interop >::key_type *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    std::map< int,MapPolyline_Interop >::key_type temp2 ;
    int val2 ;
    int ecode2 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__mapT_int_MapPolyline_Interop_std__lessT_int_t_std__allocatorT_std__pairT_int_const_MapPolyline_Interop_t_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_int_polyline_count" "', argument " "1"" of type '" "std::map< int,MapPolyline_Interop > const *""'"); 
    }
    arg1 = reinterpret_cast< std::map< int,MapPolyline_Interop > * >(argp1);
    ecode2 = SWIG_AsVal_int(x, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "map_int_polyline_count" "', argument " "2"" of type '" "std::map< int,MapPolyline_Interop >::key_type""'");
    } 
    temp2 = static_cast< std::map< int,MapPolyline_Interop >::key_type >(val2);
    arg2 = &temp2;
    result = ((std::map< int,MapPolyline_Interop > const *)arg1)->count((std::map< int,MapPolyline_Interop >::key_type const &)*arg2);
    r_ans = SWIG_From_int(static_cast< int >(result));
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_delete_map_int_polyline ( SEXP self)
{
  {
    std::map< int,MapPolyline_Interop > *arg1 = (std::map< int,MapPolyline_Interop > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__mapT_int_MapPolyline_Interop_std__lessT_int_t_std__allocatorT_std__pairT_int_const_MapPolyline_Interop_t_t_t, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_map_int_polyline" "', argument " "1"" of type '" "std::map< int,MapPolyline_Interop > *""'"); 
    }
    arg1 = reinterpret_cast< std::map< int,MapPolyline_Interop > * >(argp1);
    delete arg1;
    r_ans = R_NilValue;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    R_ClearExternalPtr(self);
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_new_map_int_icon__SWIG_0 ( SEXP other)
{
  {
    std::map< int,MapIcon_Interop > *result = 0 ;
    std::less< int > *arg1 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(other, &argp1, SWIGTYPE_p_std__lessT_int_t,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_map_int_icon" "', argument " "1"" of type '" "std::less< int > const &""'"); 
    }
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_map_int_icon" "', argument " "1"" of type '" "std::less< int > const &""'"); 
    }
    arg1 = reinterpret_cast< std::less< int > * >(argp1);
    result = (std::map< int,MapIcon_Interop > *)new std::map< int,MapIcon_Interop >((std::less< int > const &)*arg1);
    r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__mapT_int_MapIcon_Interop_std__lessT_int_t_std__allocatorT_std__pairT_int_const_MapIcon_Interop_t_t_t, SWIG_POINTER_OWN |  0 );
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_new_map_int_icon__SWIG_1 ( )
{
  {
    std::map< int,MapIcon_Interop > *result = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    result = (std::map< int,MapIcon_Interop > *)new std::map< int,MapIcon_Interop >();
    r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__mapT_int_MapIcon_Interop_std__lessT_int_t_std__allocatorT_std__pairT_int_const_MapIcon_Interop_t_t_t, SWIG_POINTER_OWN |  0 );
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_new_map_int_icon__SWIG_2 ( SEXP other)
{
  {
    std::map< int,MapIcon_Interop > *result = 0 ;
    std::map< int,MapIcon_Interop > *arg1 = 0 ;
    int res1 = SWIG_OLDOBJ ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    {
      std::map< int,MapIcon_Interop,std::less< int >,std::allocator< std::pair< int const,MapIcon_Interop > > > *ptr = (std::map< int,MapIcon_Interop,std::less< int >,std::allocator< std::pair< int const,MapIcon_Interop > > > *)0;
      res1 = swig::asptr(other, &ptr);
      if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_map_int_icon" "', argument " "1"" of type '" "std::map< int,MapIcon_Interop > const &""'"); 
      }
      if (!ptr) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_map_int_icon" "', argument " "1"" of type '" "std::map< int,MapIcon_Interop > const &""'"); 
      }
      arg1 = ptr;
    }
    result = (std::map< int,MapIcon_Interop > *)new std::map< int,MapIcon_Interop >((std::map< int,MapIcon_Interop > const &)*arg1);
    r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__mapT_int_MapIcon_Interop_std__lessT_int_t_std__allocatorT_std__pairT_int_const_MapIcon_Interop_t_t_t, SWIG_POINTER_OWN |  0 );
    if (SWIG_IsNewObj(res1)) delete arg1;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
    if (SWIG_IsNewObj(res1)) delete arg1;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_map_int_icon_empty ( SEXP self, SEXP s_swig_copy)
{
  {
    bool result;
    std::map< int,MapIcon_Interop > *arg1 = (std::map< int,MapIcon_Interop > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__mapT_int_MapIcon_Interop_std__lessT_int_t_std__allocatorT_std__pairT_int_const_MapIcon_Interop_t_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_int_icon_empty" "', argument " "1"" of type '" "std::map< int,MapIcon_Interop > const *""'"); 
    }
    arg1 = reinterpret_cast< std::map< int,MapIcon_Interop > * >(argp1);
    result = (bool)((std::map< int,MapIcon_Interop > const *)arg1)->empty();
    r_ans = Rf_ScalarLogical(result);
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_map_int_icon_size ( SEXP self, SEXP s_swig_copy)
{
  {
    std::map< int,MapIcon_Interop >::size_type result;
    std::map< int,MapIcon_Interop > *arg1 = (std::map< int,MapIcon_Interop > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__mapT_int_MapIcon_Interop_std__lessT_int_t_std__allocatorT_std__pairT_int_const_MapIcon_Interop_t_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_int_icon_size" "', argument " "1"" of type '" "std::map< int,MapIcon_Interop > const *""'"); 
    }
    arg1 = reinterpret_cast< std::map< int,MapIcon_Interop > * >(argp1);
    result = ((std::map< int,MapIcon_Interop > const *)arg1)->size();
    r_ans = SWIG_From_int(static_cast< int >(result));
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_map_int_icon_swap ( SEXP self, SEXP v)
{
  {
    std::map< int,MapIcon_Interop > *arg1 = (std::map< int,MapIcon_Interop > *) 0 ;
    std::map< int,MapIcon_Interop > *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__mapT_int_MapIcon_Interop_std__lessT_int_t_std__allocatorT_std__pairT_int_const_MapIcon_Interop_t_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_int_icon_swap" "', argument " "1"" of type '" "std::map< int,MapIcon_Interop > *""'"); 
    }
    arg1 = reinterpret_cast< std::map< int,MapIcon_Interop > * >(argp1);
    res2 = SWIG_R_ConvertPtr(v, &argp2, SWIGTYPE_p_std__mapT_int_MapIcon_Interop_std__lessT_int_t_std__allocatorT_std__pairT_int_const_MapIcon_Interop_t_t_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "map_int_icon_swap" "', argument " "2"" of type '" "std::map< int,MapIcon_Interop > &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "map_int_icon_swap" "', argument " "2"" of type '" "std::map< int,MapIcon_Interop > &""'"); 
    }
    arg2 = reinterpret_cast< std::map< int,MapIcon_Interop > * >(argp2);
    (arg1)->swap(*arg2);
    r_ans = R_NilValue;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_map_int_icon_clear ( SEXP self)
{
  {
    std::map< int,MapIcon_Interop > *arg1 = (std::map< int,MapIcon_Interop > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__mapT_int_MapIcon_Interop_std__lessT_int_t_std__allocatorT_std__pairT_int_const_MapIcon_Interop_t_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_int_icon_clear" "', argument " "1"" of type '" "std::map< int,MapIcon_Interop > *""'"); 
    }
    arg1 = reinterpret_cast< std::map< int,MapIcon_Interop > * >(argp1);
    (arg1)->clear();
    r_ans = R_NilValue;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_map_int_icon_get_allocator ( SEXP self, SEXP s_swig_copy)
{
  {
    SwigValueWrapper< std::allocator< std::pair< int const,MapIcon_Interop > > > result;
    std::map< int,MapIcon_Interop > *arg1 = (std::map< int,MapIcon_Interop > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__mapT_int_MapIcon_Interop_std__lessT_int_t_std__allocatorT_std__pairT_int_const_MapIcon_Interop_t_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_int_icon_get_allocator" "', argument " "1"" of type '" "std::map< int,MapIcon_Interop > const *""'"); 
    }
    arg1 = reinterpret_cast< std::map< int,MapIcon_Interop > * >(argp1);
    result = ((std::map< int,MapIcon_Interop > const *)arg1)->get_allocator();
    r_ans = SWIG_R_NewPointerObj((new std::map< int,MapIcon_Interop >::allocator_type(result)), SWIGTYPE_p_std__allocatorT_std__pairT_int_const_MapIcon_Interop_t_t, SWIG_POINTER_OWN |  0 );
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_map_int_icon_erase ( SEXP self, SEXP x, SEXP s_swig_copy)
{
  {
    std::map< int,MapIcon_Interop >::size_type result;
    std::map< int,MapIcon_Interop > *arg1 = (std::map< int,MapIcon_Interop > *) 0 ;
    std::map< int,MapIcon_Interop >::key_type *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    std::map< int,MapIcon_Interop >::key_type temp2 ;
    int val2 ;
    int ecode2 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__mapT_int_MapIcon_Interop_std__lessT_int_t_std__allocatorT_std__pairT_int_const_MapIcon_Interop_t_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_int_icon_erase" "', argument " "1"" of type '" "std::map< int,MapIcon_Interop > *""'"); 
    }
    arg1 = reinterpret_cast< std::map< int,MapIcon_Interop > * >(argp1);
    ecode2 = SWIG_AsVal_int(x, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "map_int_icon_erase" "', argument " "2"" of type '" "std::map< int,MapIcon_Interop >::key_type""'");
    } 
    temp2 = static_cast< std::map< int,MapIcon_Interop >::key_type >(val2);
    arg2 = &temp2;
    result = (arg1)->erase((std::map< int,MapIcon_Interop >::key_type const &)*arg2);
    r_ans = SWIG_From_int(static_cast< int >(result));
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_map_int_icon_count ( SEXP self, SEXP x, SEXP s_swig_copy)
{
  {
    std::map< int,MapIcon_Interop >::size_type result;
    std::map< int,MapIcon_Interop > *arg1 = (std::map< int,MapIcon_Interop > *) 0 ;
    std::map< int,MapIcon_Interop >::key_type *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    std::map< int,MapIcon_Interop >::key_type temp2 ;
    int val2 ;
    int ecode2 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__mapT_int_MapIcon_Interop_std__lessT_int_t_std__allocatorT_std__pairT_int_const_MapIcon_Interop_t_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_int_icon_count" "', argument " "1"" of type '" "std::map< int,MapIcon_Interop > const *""'"); 
    }
    arg1 = reinterpret_cast< std::map< int,MapIcon_Interop > * >(argp1);
    ecode2 = SWIG_AsVal_int(x, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "map_int_icon_count" "', argument " "2"" of type '" "std::map< int,MapIcon_Interop >::key_type""'");
    } 
    temp2 = static_cast< std::map< int,MapIcon_Interop >::key_type >(val2);
    arg2 = &temp2;
    result = ((std::map< int,MapIcon_Interop > const *)arg1)->count((std::map< int,MapIcon_Interop >::key_type const &)*arg2);
    r_ans = SWIG_From_int(static_cast< int >(result));
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


SWIGEXPORT SEXP
R_swig_delete_map_int_icon ( SEXP self)
{
  {
    std::map< int,MapIcon_Interop > *arg1 = (std::map< int,MapIcon_Interop > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int r_nprotect = 0;
    SEXP r_ans = R_NilValue ;
    VMAXTYPE r_vmax = vmaxget() ;
    
    res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__mapT_int_MapIcon_Interop_std__lessT_int_t_std__allocatorT_std__pairT_int_const_MapIcon_Interop_t_t_t, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_map_int_icon" "', argument " "1"" of type '" "std::map< int,MapIcon_Interop > *""'"); 
    }
    arg1 = reinterpret_cast< std::map< int,MapIcon_Interop > * >(argp1);
    delete arg1;
    r_ans = R_NilValue;
    vmaxset(r_vmax);
    if(r_nprotect)  Rf_unprotect(r_nprotect);
    
    R_ClearExternalPtr(self);
    return r_ans;
    fail: SWIGUNUSED;
  }
  Rf_error("%s %s", SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  return R_NilValue;
}


#ifdef __cplusplus
}
#endif

/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static swig_type_info _swigt__p_Awaiter = {"_p_Awaiter", "Awaiter *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Color_Interop = {"_p_Color_Interop", "std::vector< Color_Interop >::value_type *|Color_Interop *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_MapBackground_Interop = {"_p_MapBackground_Interop", "std::vector< MapBackground_Interop >::value_type *|MapBackground_Interop *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_MapIcon_Interop = {"_p_MapIcon_Interop", "MapIcon_Interop *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_MapLayer_Interop = {"_p_MapLayer_Interop", "MapLayer_Interop *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_MapPolyline_Interop = {"_p_MapPolyline_Interop", "MapPolyline_Interop *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_PairT_bool_PairT_std__string_std__string_t_t = {"_p_PairT_bool_PairT_std__string_std__string_t_t", "Pair< bool,Pair< std::string,std::string > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_PairT_cweeDateTime_float_t = {"_p_PairT_cweeDateTime_float_t", "std::vector< Pair< cweeDateTime,float > >::value_type *|Pair< cweeDateTime,float > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_PairT_double_double_t = {"_p_PairT_double_double_t", "std::vector< Pair< double,double > >::value_type *|Pair< double,double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_PairT_int_PairT_std__string_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t = {"_p_PairT_int_PairT_std__string_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t", "Pair< int,Pair< std::string,std::vector< std::string,std::allocator< std::string > > > > *|Pair< int,Pair< std::string,std::vector< std::string > > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_PairT_std__string_std__string_t = {"_p_PairT_std__string_std__string_t", "Pair< std::string,std::string > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_PairT_std__string_std__vectorT_std__string_std__allocatorT_std__string_t_t_t = {"_p_PairT_std__string_std__vectorT_std__string_std__allocatorT_std__string_t_t_t", "Pair< std::string,std::vector< std::string,std::allocator< std::string > > > *|Pair< std::string,std::vector< std::string > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ScriptEngine = {"_p_ScriptEngine", "ScriptEngine *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ScriptObject = {"_p_ScriptObject", "ScriptObject *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ScriptingNode = {"_p_ScriptingNode", "std::vector< ScriptingNode >::value_type *|ScriptingNode *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SharedMatrix = {"_p_SharedMatrix", "SharedMatrix *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SharedString = {"_p_SharedString", "SharedString *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SharedTimeSeriesPattern = {"_p_SharedTimeSeriesPattern", "SharedTimeSeriesPattern *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_WaterWatch = {"_p_WaterWatch", "WaterWatch *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_WaterWatchEnums = {"_p_WaterWatchEnums", "WaterWatchEnums *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_allocator_type = {"_p_allocator_type", "allocator_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_bool = {"_p_bool", "bool *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_cweeDateTime = {"_p_cweeDateTime", "cweeDateTime *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_cweeSharedPtrT_void_t = {"_p_cweeSharedPtrT_void_t", "cweeSharedPtr< void > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_difference_type = {"_p_difference_type", "difference_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_double = {"_p_double", "double *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_float = {"_p_float", "float *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int = {"_p_int", "int *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_key_type = {"_p_key_type", "key_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mapped_type = {"_p_mapped_type", "mapped_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_size_type = {"_p_size_type", "size_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_Color_Interop_t = {"_p_std__allocatorT_Color_Interop_t", "std::vector< Color_Interop >::allocator_type *|std::allocator< Color_Interop > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_MapBackground_Interop_t = {"_p_std__allocatorT_MapBackground_Interop_t", "std::vector< MapBackground_Interop >::allocator_type *|std::allocator< MapBackground_Interop > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_PairT_cweeDateTime_float_t_t = {"_p_std__allocatorT_PairT_cweeDateTime_float_t_t", "std::vector< Pair< cweeDateTime,float > >::allocator_type *|std::allocator< Pair< cweeDateTime,float > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_PairT_double_double_t_t = {"_p_std__allocatorT_PairT_double_double_t_t", "std::vector< Pair< double,double > >::allocator_type *|std::allocator< Pair< double,double > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_ScriptingNode_t = {"_p_std__allocatorT_ScriptingNode_t", "std::vector< ScriptingNode >::allocator_type *|std::allocator< ScriptingNode > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_double_t = {"_p_std__allocatorT_double_t", "std::vector< double >::allocator_type *|std::allocator< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_float_t = {"_p_std__allocatorT_float_t", "std::vector< float >::allocator_type *|std::allocator< float > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_std__pairT_int_const_MapBackground_Interop_t_t = {"_p_std__allocatorT_std__pairT_int_const_MapBackground_Interop_t_t", "std::map< int,MapBackground_Interop >::allocator_type *|std::allocator< std::pair< int const,MapBackground_Interop > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_std__pairT_int_const_MapIcon_Interop_t_t = {"_p_std__allocatorT_std__pairT_int_const_MapIcon_Interop_t_t", "std::map< int,MapIcon_Interop >::allocator_type *|std::allocator< std::pair< int const,MapIcon_Interop > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_std__pairT_int_const_MapPolyline_Interop_t_t = {"_p_std__allocatorT_std__pairT_int_const_MapPolyline_Interop_t_t", "std::map< int,MapPolyline_Interop >::allocator_type *|std::allocator< std::pair< int const,MapPolyline_Interop > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_std__string_t = {"_p_std__allocatorT_std__string_t", "std::vector< std::string >::allocator_type *|std::allocator< std::string > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__invalid_argument = {"_p_std__invalid_argument", "std::invalid_argument *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__lessT_int_t = {"_p_std__lessT_int_t", "std::less< int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__mapT_int_MapBackground_Interop_std__lessT_int_t_std__allocatorT_std__pairT_int_const_MapBackground_Interop_t_t_t = {"_p_std__mapT_int_MapBackground_Interop_std__lessT_int_t_std__allocatorT_std__pairT_int_const_MapBackground_Interop_t_t_t", "std::map< int,MapBackground_Interop,std::less< int >,std::allocator< std::pair< int const,MapBackground_Interop > > > *|std::map< int,MapBackground_Interop > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__mapT_int_MapIcon_Interop_std__lessT_int_t_std__allocatorT_std__pairT_int_const_MapIcon_Interop_t_t_t = {"_p_std__mapT_int_MapIcon_Interop_std__lessT_int_t_std__allocatorT_std__pairT_int_const_MapIcon_Interop_t_t_t", "std::map< int,MapIcon_Interop,std::less< int >,std::allocator< std::pair< int const,MapIcon_Interop > > > *|std::map< int,MapIcon_Interop > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__mapT_int_MapPolyline_Interop_std__lessT_int_t_std__allocatorT_std__pairT_int_const_MapPolyline_Interop_t_t_t = {"_p_std__mapT_int_MapPolyline_Interop_std__lessT_int_t_std__allocatorT_std__pairT_int_const_MapPolyline_Interop_t_t_t", "std::map< int,MapPolyline_Interop,std::less< int >,std::allocator< std::pair< int const,MapPolyline_Interop > > > *|std::map< int,MapPolyline_Interop > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__out_of_range = {"_p_std__out_of_range", "std::out_of_range *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__pairT_bool_PairT_std__string_std__string_t_t = {"_p_std__pairT_bool_PairT_std__string_std__string_t_t", "std::pair< bool,Pair< std::string,std::string > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__pairT_cweeDateTime_float_t = {"_p_std__pairT_cweeDateTime_float_t", "std::pair< cweeDateTime,float > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__pairT_double_double_t = {"_p_std__pairT_double_double_t", "std::pair< double,double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__pairT_int_PairT_std__string_std__vectorT_std__string_t_t_t = {"_p_std__pairT_int_PairT_std__string_std__vectorT_std__string_t_t_t", "std::pair< int,Pair< std::string,std::vector< std::string > > > *|std::pair< int,Pair< std::string,std::vector< std::string,std::allocator< std::string > > > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__pairT_std__string_std__string_t = {"_p_std__pairT_std__string_std__string_t", "std::pair< std::string,std::string > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__pairT_std__string_std__vectorT_std__string_std__allocatorT_std__string_t_t_t = {"_p_std__pairT_std__string_std__vectorT_std__string_std__allocatorT_std__string_t_t_t", "std::pair< std::string,std::vector< std::string,std::allocator< std::string > > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__shared_ptrT_bool_t = {"_p_std__shared_ptrT_bool_t", "std::shared_ptr< bool > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__shared_ptrT_std__string_t = {"_p_std__shared_ptrT_std__string_t", "std::shared_ptr< std::string > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__string = {"_p_std__string", "std::string *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_Color_Interop_std__allocatorT_Color_Interop_t_t = {"_p_std__vectorT_Color_Interop_std__allocatorT_Color_Interop_t_t", "std::vector< Color_Interop,std::allocator< Color_Interop > > *|std::vector< Color_Interop > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_MapBackground_Interop_std__allocatorT_MapBackground_Interop_t_t = {"_p_std__vectorT_MapBackground_Interop_std__allocatorT_MapBackground_Interop_t_t", "std::vector< MapBackground_Interop,std::allocator< MapBackground_Interop > > *|std::vector< MapBackground_Interop > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_PairT_cweeDateTime_float_t_std__allocatorT_PairT_cweeDateTime_float_t_t_t = {"_p_std__vectorT_PairT_cweeDateTime_float_t_std__allocatorT_PairT_cweeDateTime_float_t_t_t", "std::vector< Pair< cweeDateTime,float >,std::allocator< Pair< cweeDateTime,float > > > *|std::vector< Pair< cweeDateTime,float > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_PairT_double_double_t_std__allocatorT_PairT_double_double_t_t_t = {"_p_std__vectorT_PairT_double_double_t_std__allocatorT_PairT_double_double_t_t_t", "std::vector< Pair< double,double >,std::allocator< Pair< double,double > > > *|std::vector< Pair< double,double > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_ScriptingNode_std__allocatorT_ScriptingNode_t_t = {"_p_std__vectorT_ScriptingNode_std__allocatorT_ScriptingNode_t_t", "std::vector< ScriptingNode,std::allocator< ScriptingNode > > *|std::vector< ScriptingNode > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_double_std__allocatorT_double_t_t = {"_p_std__vectorT_double_std__allocatorT_double_t_t", "std::vector< double,std::allocator< double > > *|std::vector< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_float_std__allocatorT_float_t_t = {"_p_std__vectorT_float_std__allocatorT_float_t_t", "std::vector< float,std::allocator< float > > *|std::vector< float > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__string_std__allocatorT_std__string_t_t = {"_p_std__vectorT_std__string_std__allocatorT_std__string_t_t", "std::vector< std::string,std::allocator< std::string > > *|std::vector< std::string > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_value_type = {"_p_value_type", "value_type *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_Awaiter,
  &_swigt__p_Color_Interop,
  &_swigt__p_MapBackground_Interop,
  &_swigt__p_MapIcon_Interop,
  &_swigt__p_MapLayer_Interop,
  &_swigt__p_MapPolyline_Interop,
  &_swigt__p_PairT_bool_PairT_std__string_std__string_t_t,
  &_swigt__p_PairT_cweeDateTime_float_t,
  &_swigt__p_PairT_double_double_t,
  &_swigt__p_PairT_int_PairT_std__string_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t,
  &_swigt__p_PairT_std__string_std__string_t,
  &_swigt__p_PairT_std__string_std__vectorT_std__string_std__allocatorT_std__string_t_t_t,
  &_swigt__p_ScriptEngine,
  &_swigt__p_ScriptObject,
  &_swigt__p_ScriptingNode,
  &_swigt__p_SharedMatrix,
  &_swigt__p_SharedString,
  &_swigt__p_SharedTimeSeriesPattern,
  &_swigt__p_WaterWatch,
  &_swigt__p_WaterWatchEnums,
  &_swigt__p_allocator_type,
  &_swigt__p_bool,
  &_swigt__p_char,
  &_swigt__p_cweeDateTime,
  &_swigt__p_cweeSharedPtrT_void_t,
  &_swigt__p_difference_type,
  &_swigt__p_double,
  &_swigt__p_float,
  &_swigt__p_int,
  &_swigt__p_key_type,
  &_swigt__p_mapped_type,
  &_swigt__p_size_type,
  &_swigt__p_std__allocatorT_Color_Interop_t,
  &_swigt__p_std__allocatorT_MapBackground_Interop_t,
  &_swigt__p_std__allocatorT_PairT_cweeDateTime_float_t_t,
  &_swigt__p_std__allocatorT_PairT_double_double_t_t,
  &_swigt__p_std__allocatorT_ScriptingNode_t,
  &_swigt__p_std__allocatorT_double_t,
  &_swigt__p_std__allocatorT_float_t,
  &_swigt__p_std__allocatorT_std__pairT_int_const_MapBackground_Interop_t_t,
  &_swigt__p_std__allocatorT_std__pairT_int_const_MapIcon_Interop_t_t,
  &_swigt__p_std__allocatorT_std__pairT_int_const_MapPolyline_Interop_t_t,
  &_swigt__p_std__allocatorT_std__string_t,
  &_swigt__p_std__invalid_argument,
  &_swigt__p_std__lessT_int_t,
  &_swigt__p_std__mapT_int_MapBackground_Interop_std__lessT_int_t_std__allocatorT_std__pairT_int_const_MapBackground_Interop_t_t_t,
  &_swigt__p_std__mapT_int_MapIcon_Interop_std__lessT_int_t_std__allocatorT_std__pairT_int_const_MapIcon_Interop_t_t_t,
  &_swigt__p_std__mapT_int_MapPolyline_Interop_std__lessT_int_t_std__allocatorT_std__pairT_int_const_MapPolyline_Interop_t_t_t,
  &_swigt__p_std__out_of_range,
  &_swigt__p_std__pairT_bool_PairT_std__string_std__string_t_t,
  &_swigt__p_std__pairT_cweeDateTime_float_t,
  &_swigt__p_std__pairT_double_double_t,
  &_swigt__p_std__pairT_int_PairT_std__string_std__vectorT_std__string_t_t_t,
  &_swigt__p_std__pairT_std__string_std__string_t,
  &_swigt__p_std__pairT_std__string_std__vectorT_std__string_std__allocatorT_std__string_t_t_t,
  &_swigt__p_std__shared_ptrT_bool_t,
  &_swigt__p_std__shared_ptrT_std__string_t,
  &_swigt__p_std__string,
  &_swigt__p_std__vectorT_Color_Interop_std__allocatorT_Color_Interop_t_t,
  &_swigt__p_std__vectorT_MapBackground_Interop_std__allocatorT_MapBackground_Interop_t_t,
  &_swigt__p_std__vectorT_PairT_cweeDateTime_float_t_std__allocatorT_PairT_cweeDateTime_float_t_t_t,
  &_swigt__p_std__vectorT_PairT_double_double_t_std__allocatorT_PairT_double_double_t_t_t,
  &_swigt__p_std__vectorT_ScriptingNode_std__allocatorT_ScriptingNode_t_t,
  &_swigt__p_std__vectorT_double_std__allocatorT_double_t_t,
  &_swigt__p_std__vectorT_float_std__allocatorT_float_t_t,
  &_swigt__p_std__vectorT_std__string_std__allocatorT_std__string_t_t,
  &_swigt__p_value_type,
};

static swig_cast_info _swigc__p_Awaiter[] = {  {&_swigt__p_Awaiter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Color_Interop[] = {  {&_swigt__p_Color_Interop, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MapBackground_Interop[] = {  {&_swigt__p_MapBackground_Interop, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MapIcon_Interop[] = {  {&_swigt__p_MapIcon_Interop, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MapLayer_Interop[] = {  {&_swigt__p_MapLayer_Interop, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MapPolyline_Interop[] = {  {&_swigt__p_MapPolyline_Interop, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PairT_bool_PairT_std__string_std__string_t_t[] = {  {&_swigt__p_PairT_bool_PairT_std__string_std__string_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PairT_cweeDateTime_float_t[] = {  {&_swigt__p_PairT_cweeDateTime_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PairT_double_double_t[] = {  {&_swigt__p_PairT_double_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PairT_int_PairT_std__string_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t[] = {  {&_swigt__p_PairT_int_PairT_std__string_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PairT_std__string_std__string_t[] = {  {&_swigt__p_PairT_std__string_std__string_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PairT_std__string_std__vectorT_std__string_std__allocatorT_std__string_t_t_t[] = {  {&_swigt__p_PairT_std__string_std__vectorT_std__string_std__allocatorT_std__string_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ScriptEngine[] = {  {&_swigt__p_ScriptEngine, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ScriptObject[] = {  {&_swigt__p_ScriptObject, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ScriptingNode[] = {  {&_swigt__p_ScriptingNode, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SharedMatrix[] = {  {&_swigt__p_SharedMatrix, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SharedString[] = {  {&_swigt__p_SharedString, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SharedTimeSeriesPattern[] = {  {&_swigt__p_SharedTimeSeriesPattern, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_WaterWatch[] = {  {&_swigt__p_WaterWatch, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_WaterWatchEnums[] = {  {&_swigt__p_WaterWatchEnums, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_allocator_type[] = {  {&_swigt__p_allocator_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bool[] = {  {&_swigt__p_bool, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cweeDateTime[] = {  {&_swigt__p_cweeDateTime, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cweeSharedPtrT_void_t[] = {  {&_swigt__p_cweeSharedPtrT_void_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_difference_type[] = {  {&_swigt__p_difference_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_double[] = {  {&_swigt__p_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_float[] = {  {&_swigt__p_float, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_key_type[] = {  {&_swigt__p_key_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mapped_type[] = {  {&_swigt__p_mapped_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_size_type[] = {  {&_swigt__p_size_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_Color_Interop_t[] = {  {&_swigt__p_std__allocatorT_Color_Interop_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_MapBackground_Interop_t[] = {  {&_swigt__p_std__allocatorT_MapBackground_Interop_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_PairT_cweeDateTime_float_t_t[] = {  {&_swigt__p_std__allocatorT_PairT_cweeDateTime_float_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_PairT_double_double_t_t[] = {  {&_swigt__p_std__allocatorT_PairT_double_double_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_ScriptingNode_t[] = {  {&_swigt__p_std__allocatorT_ScriptingNode_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_double_t[] = {  {&_swigt__p_std__allocatorT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_float_t[] = {  {&_swigt__p_std__allocatorT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_std__pairT_int_const_MapBackground_Interop_t_t[] = {  {&_swigt__p_std__allocatorT_std__pairT_int_const_MapBackground_Interop_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_std__pairT_int_const_MapIcon_Interop_t_t[] = {  {&_swigt__p_std__allocatorT_std__pairT_int_const_MapIcon_Interop_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_std__pairT_int_const_MapPolyline_Interop_t_t[] = {  {&_swigt__p_std__allocatorT_std__pairT_int_const_MapPolyline_Interop_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_std__string_t[] = {  {&_swigt__p_std__allocatorT_std__string_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__invalid_argument[] = {  {&_swigt__p_std__invalid_argument, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__lessT_int_t[] = {  {&_swigt__p_std__lessT_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__mapT_int_MapBackground_Interop_std__lessT_int_t_std__allocatorT_std__pairT_int_const_MapBackground_Interop_t_t_t[] = {  {&_swigt__p_std__mapT_int_MapBackground_Interop_std__lessT_int_t_std__allocatorT_std__pairT_int_const_MapBackground_Interop_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__mapT_int_MapIcon_Interop_std__lessT_int_t_std__allocatorT_std__pairT_int_const_MapIcon_Interop_t_t_t[] = {  {&_swigt__p_std__mapT_int_MapIcon_Interop_std__lessT_int_t_std__allocatorT_std__pairT_int_const_MapIcon_Interop_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__mapT_int_MapPolyline_Interop_std__lessT_int_t_std__allocatorT_std__pairT_int_const_MapPolyline_Interop_t_t_t[] = {  {&_swigt__p_std__mapT_int_MapPolyline_Interop_std__lessT_int_t_std__allocatorT_std__pairT_int_const_MapPolyline_Interop_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__out_of_range[] = {  {&_swigt__p_std__out_of_range, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__pairT_bool_PairT_std__string_std__string_t_t[] = {  {&_swigt__p_std__pairT_bool_PairT_std__string_std__string_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__pairT_cweeDateTime_float_t[] = {  {&_swigt__p_std__pairT_cweeDateTime_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__pairT_double_double_t[] = {  {&_swigt__p_std__pairT_double_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__pairT_int_PairT_std__string_std__vectorT_std__string_t_t_t[] = {  {&_swigt__p_std__pairT_int_PairT_std__string_std__vectorT_std__string_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__pairT_std__string_std__string_t[] = {  {&_swigt__p_std__pairT_std__string_std__string_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__pairT_std__string_std__vectorT_std__string_std__allocatorT_std__string_t_t_t[] = {  {&_swigt__p_std__pairT_std__string_std__vectorT_std__string_std__allocatorT_std__string_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_bool_t[] = {  {&_swigt__p_std__shared_ptrT_bool_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_std__string_t[] = {  {&_swigt__p_std__shared_ptrT_std__string_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__string[] = {  {&_swigt__p_std__string, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_Color_Interop_std__allocatorT_Color_Interop_t_t[] = {  {&_swigt__p_std__vectorT_Color_Interop_std__allocatorT_Color_Interop_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_MapBackground_Interop_std__allocatorT_MapBackground_Interop_t_t[] = {  {&_swigt__p_std__vectorT_MapBackground_Interop_std__allocatorT_MapBackground_Interop_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_PairT_cweeDateTime_float_t_std__allocatorT_PairT_cweeDateTime_float_t_t_t[] = {  {&_swigt__p_std__vectorT_PairT_cweeDateTime_float_t_std__allocatorT_PairT_cweeDateTime_float_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_PairT_double_double_t_std__allocatorT_PairT_double_double_t_t_t[] = {  {&_swigt__p_std__vectorT_PairT_double_double_t_std__allocatorT_PairT_double_double_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_ScriptingNode_std__allocatorT_ScriptingNode_t_t[] = {  {&_swigt__p_std__vectorT_ScriptingNode_std__allocatorT_ScriptingNode_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_double_std__allocatorT_double_t_t[] = {  {&_swigt__p_std__vectorT_double_std__allocatorT_double_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_float_std__allocatorT_float_t_t[] = {  {&_swigt__p_std__vectorT_float_std__allocatorT_float_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__string_std__allocatorT_std__string_t_t[] = {  {&_swigt__p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_value_type[] = {  {&_swigt__p_value_type, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_Awaiter,
  _swigc__p_Color_Interop,
  _swigc__p_MapBackground_Interop,
  _swigc__p_MapIcon_Interop,
  _swigc__p_MapLayer_Interop,
  _swigc__p_MapPolyline_Interop,
  _swigc__p_PairT_bool_PairT_std__string_std__string_t_t,
  _swigc__p_PairT_cweeDateTime_float_t,
  _swigc__p_PairT_double_double_t,
  _swigc__p_PairT_int_PairT_std__string_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t,
  _swigc__p_PairT_std__string_std__string_t,
  _swigc__p_PairT_std__string_std__vectorT_std__string_std__allocatorT_std__string_t_t_t,
  _swigc__p_ScriptEngine,
  _swigc__p_ScriptObject,
  _swigc__p_ScriptingNode,
  _swigc__p_SharedMatrix,
  _swigc__p_SharedString,
  _swigc__p_SharedTimeSeriesPattern,
  _swigc__p_WaterWatch,
  _swigc__p_WaterWatchEnums,
  _swigc__p_allocator_type,
  _swigc__p_bool,
  _swigc__p_char,
  _swigc__p_cweeDateTime,
  _swigc__p_cweeSharedPtrT_void_t,
  _swigc__p_difference_type,
  _swigc__p_double,
  _swigc__p_float,
  _swigc__p_int,
  _swigc__p_key_type,
  _swigc__p_mapped_type,
  _swigc__p_size_type,
  _swigc__p_std__allocatorT_Color_Interop_t,
  _swigc__p_std__allocatorT_MapBackground_Interop_t,
  _swigc__p_std__allocatorT_PairT_cweeDateTime_float_t_t,
  _swigc__p_std__allocatorT_PairT_double_double_t_t,
  _swigc__p_std__allocatorT_ScriptingNode_t,
  _swigc__p_std__allocatorT_double_t,
  _swigc__p_std__allocatorT_float_t,
  _swigc__p_std__allocatorT_std__pairT_int_const_MapBackground_Interop_t_t,
  _swigc__p_std__allocatorT_std__pairT_int_const_MapIcon_Interop_t_t,
  _swigc__p_std__allocatorT_std__pairT_int_const_MapPolyline_Interop_t_t,
  _swigc__p_std__allocatorT_std__string_t,
  _swigc__p_std__invalid_argument,
  _swigc__p_std__lessT_int_t,
  _swigc__p_std__mapT_int_MapBackground_Interop_std__lessT_int_t_std__allocatorT_std__pairT_int_const_MapBackground_Interop_t_t_t,
  _swigc__p_std__mapT_int_MapIcon_Interop_std__lessT_int_t_std__allocatorT_std__pairT_int_const_MapIcon_Interop_t_t_t,
  _swigc__p_std__mapT_int_MapPolyline_Interop_std__lessT_int_t_std__allocatorT_std__pairT_int_const_MapPolyline_Interop_t_t_t,
  _swigc__p_std__out_of_range,
  _swigc__p_std__pairT_bool_PairT_std__string_std__string_t_t,
  _swigc__p_std__pairT_cweeDateTime_float_t,
  _swigc__p_std__pairT_double_double_t,
  _swigc__p_std__pairT_int_PairT_std__string_std__vectorT_std__string_t_t_t,
  _swigc__p_std__pairT_std__string_std__string_t,
  _swigc__p_std__pairT_std__string_std__vectorT_std__string_std__allocatorT_std__string_t_t_t,
  _swigc__p_std__shared_ptrT_bool_t,
  _swigc__p_std__shared_ptrT_std__string_t,
  _swigc__p_std__string,
  _swigc__p_std__vectorT_Color_Interop_std__allocatorT_Color_Interop_t_t,
  _swigc__p_std__vectorT_MapBackground_Interop_std__allocatorT_MapBackground_Interop_t_t,
  _swigc__p_std__vectorT_PairT_cweeDateTime_float_t_std__allocatorT_PairT_cweeDateTime_float_t_t_t,
  _swigc__p_std__vectorT_PairT_double_double_t_std__allocatorT_PairT_double_double_t_t_t,
  _swigc__p_std__vectorT_ScriptingNode_std__allocatorT_ScriptingNode_t_t,
  _swigc__p_std__vectorT_double_std__allocatorT_double_t_t,
  _swigc__p_std__vectorT_float_std__allocatorT_float_t_t,
  _swigc__p_std__vectorT_std__string_std__allocatorT_std__string_t_t,
  _swigc__p_value_type,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */


/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic
 * memory is used. Also, since swig_type_info structures store pointers to
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization.
 * The idea is that swig generates all the structures that are needed.
 * The runtime then collects these partially filled structures.
 * The SWIG_InitializeModule function takes these initial arrays out of
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned statically to an initial
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded.
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif

#ifndef SWIG_INIT_CLIENT_DATA_TYPE
#define SWIG_INIT_CLIENT_DATA_TYPE void *
#endif

SWIGRUNTIME void
SWIG_InitializeModule(SWIG_INIT_CLIENT_DATA_TYPE clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int init;

  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }

  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    iter=module_head;
    do {
      if (iter==&swig_module) {
        /* Our module is already in the list, so there's nothing more to do. */
        return;
      }
      iter=iter->next;
    } while (iter!= module_head);

    /* otherwise we must add our module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }

  /* When multiple interpreters are used, a module could have already been initialized in
     a different interpreter, but not yet have a pointer in this interpreter.
     In this case, we do not want to continue adding types... everything should be
     set up already */
  if (init == 0) return;

  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %lu\n", (unsigned long)swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;

#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %lu %s\n", (unsigned long)i, swig_module.type_initial[i]->name);
#endif

    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
	type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }

    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {

      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
	if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
	if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
	  printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
	  cast->type = ret;
	  ret = 0;
	} else {
	  /* Check for casting already in the list */
	  swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
	  if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
	  if (!ocast) ret = 0;
	}
      }

      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
	printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;

#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %lu %s\n", (unsigned long)i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
  printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;

  if (init_run) return;
  init_run = 1;

  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
            SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{ /* c-mode */
#endif
}
#endif


SWIGEXPORT void SWIG_init(void) {

}
#ifdef __cplusplus
extern "C" {
#endif

#include <R_ext/Rdynload.h>

#ifdef __cplusplus
}
#endif

SWIGINTERN R_CallMethodDef CallEntries[] = {
   {"R_swig_vector_scriptingnode_back", (DL_FUNC) &R_swig_vector_scriptingnode_back, 2},
   {"R_swig_ScriptingNode_startColumn_get", (DL_FUNC) &R_swig_ScriptingNode_startColumn_get, 2},
   {"R_swig_pair_string_vector_string_first_get", (DL_FUNC) &R_swig_pair_string_vector_string_first_get, 2},
   {"R_swig_ScriptEngine_PreParseScript", (DL_FUNC) &R_swig_ScriptEngine_PreParseScript, 3},
   {"R_swig_vector_background_resize__SWIG_0", (DL_FUNC) &R_swig_vector_background_resize__SWIG_0, 2},
   {"R_swig_uwp_color_BLUE_get", (DL_FUNC) &R_swig_uwp_color_BLUE_get, 1},
   {"R_swig_vector_background_resize__SWIG_1", (DL_FUNC) &R_swig_vector_background_resize__SWIG_1, 3},
   {"R_swig_ScriptEngine_FunctionsThatStartWith", (DL_FUNC) &R_swig_ScriptEngine_FunctionsThatStartWith, 3},
   {"R_swig_WaterWatch_GetPercentMemoryUsedOfMachine", (DL_FUNC) &R_swig_WaterWatch_GetPercentMemoryUsedOfMachine, 1},
   {"R_swig_uwp_patternInterpType_LEFT_get", (DL_FUNC) &R_swig_uwp_patternInterpType_LEFT_get, 1},
   {"R_swig_vector_pair_double_double___nonzero__", (DL_FUNC) &R_swig_vector_pair_double_double___nonzero__, 2},
   {"R_swig_vector_colors_resize__SWIG_0", (DL_FUNC) &R_swig_vector_colors_resize__SWIG_0, 2},
   {"R_swig_SharedTimeSeriesPattern_Y_Units", (DL_FUNC) &R_swig_SharedTimeSeriesPattern_Y_Units, 2},
   {"R_swig_Awaiter_Result", (DL_FUNC) &R_swig_Awaiter_Result, 2},
   {"R_swig_WaterWatch_Decode_1D_to_2D", (DL_FUNC) &R_swig_WaterWatch_Decode_1D_to_2D, 3},
   {"R_swig_SharedString_Get", (DL_FUNC) &R_swig_SharedString_Get, 2},
   {"R_swig_vector_scriptingnode_front", (DL_FUNC) &R_swig_vector_scriptingnode_front, 2},
   {"R_swig_vector_colors_resize__SWIG_1", (DL_FUNC) &R_swig_vector_colors_resize__SWIG_1, 3},
   {"R_swig_cweeDateTime_hour_get", (DL_FUNC) &R_swig_cweeDateTime_hour_get, 2},
   {"R_swig_pair_double_double_second_get", (DL_FUNC) &R_swig_pair_double_double_second_get, 2},
   {"R_swig_WaterWatch_RandomFloat", (DL_FUNC) &R_swig_WaterWatch_RandomFloat, 3},
   {"R_swig_delete_cweeDateTime", (DL_FUNC) &R_swig_delete_cweeDateTime, 1},
   {"R_swig_WaterWatch_AddToLog", (DL_FUNC) &R_swig_WaterWatch_AddToLog, 2},
   {"R_swig_vector_double_resize__SWIG_0", (DL_FUNC) &R_swig_vector_double_resize__SWIG_0, 2},
   {"R_swig_MapBackground_Interop_maxValue_get", (DL_FUNC) &R_swig_MapBackground_Interop_maxValue_get, 2},
   {"R_swig_vector_double_resize__SWIG_1", (DL_FUNC) &R_swig_vector_double_resize__SWIG_1, 3},
   {"R_swig_new_vector_string__SWIG_0", (DL_FUNC) &R_swig_new_vector_string__SWIG_0, 0},
   {"R_swig_new_vector_string__SWIG_1", (DL_FUNC) &R_swig_new_vector_string__SWIG_1, 1},
   {"R_swig_WaterWatchEnums_Arg_List_get", (DL_FUNC) &R_swig_WaterWatchEnums_Arg_List_get, 1},
   {"R_swig_new_vector_string__SWIG_2", (DL_FUNC) &R_swig_new_vector_string__SWIG_2, 1},
   {"R_swig_new_vector_string__SWIG_3", (DL_FUNC) &R_swig_new_vector_string__SWIG_3, 2},
   {"R_swig_vector_pair_double_double___delslice__", (DL_FUNC) &R_swig_vector_pair_double_double___delslice__, 3},
   {"R_swig_MapPolyline_Interop_color_get", (DL_FUNC) &R_swig_MapPolyline_Interop_color_get, 1},
   {"R_swig_new_WaterWatch", (DL_FUNC) &R_swig_new_WaterWatch, 0},
   {"R_swig_vector_pair_double_double_size", (DL_FUNC) &R_swig_vector_pair_double_double_size, 2},
   {"R_swig_Awaiter_isFinished_m_set", (DL_FUNC) &R_swig_Awaiter_isFinished_m_set, 2},
   {"R_swig_WaterWatchEnums_Finally_get", (DL_FUNC) &R_swig_WaterWatchEnums_Finally_get, 1},
   {"R_swig_vector_background_empty", (DL_FUNC) &R_swig_vector_background_empty, 2},
   {"R_swig_WaterWatchEnums_Logical_And_get", (DL_FUNC) &R_swig_WaterWatchEnums_Logical_And_get, 1},
   {"R_swig_delete_ScriptingNode", (DL_FUNC) &R_swig_delete_ScriptingNode, 1},
   {"R_swig_Awaiter_IsFinished", (DL_FUNC) &R_swig_Awaiter_IsFinished, 2},
   {"R_swig_delete_vector_pair_timeseries", (DL_FUNC) &R_swig_delete_vector_pair_timeseries, 1},
   {"R_swig_WaterWatch_GetNumMultithreadingCores", (DL_FUNC) &R_swig_WaterWatch_GetNumMultithreadingCores, 1},
   {"R_swig_ScriptEngine_DoScript_Cast_VectorFloats", (DL_FUNC) &R_swig_ScriptEngine_DoScript_Cast_VectorFloats, 3},
   {"R_swig_SharedTimeSeriesPattern_GetNumValues", (DL_FUNC) &R_swig_SharedTimeSeriesPattern_GetNumValues, 2},
   {"R_swig_map_int_icon_clear", (DL_FUNC) &R_swig_map_int_icon_clear, 1},
   {"R_swig_ScriptingNode_text_get", (DL_FUNC) &R_swig_ScriptingNode_text_get, 2},
   {"R_swig_WaterWatchEnums_Inline_Range_get", (DL_FUNC) &R_swig_WaterWatchEnums_Inline_Range_get, 1},
   {"R_swig_cweeDateTime_month_set", (DL_FUNC) &R_swig_cweeDateTime_month_set, 2},
   {"R_swig_map_int_icon_swap", (DL_FUNC) &R_swig_map_int_icon_swap, 2},
   {"R_swig_WaterWatch_GetNumPhysicalCoresOnMachine", (DL_FUNC) &R_swig_WaterWatch_GetNumPhysicalCoresOnMachine, 1},
   {"R_swig_new_map_int_icon__SWIG_0", (DL_FUNC) &R_swig_new_map_int_icon__SWIG_0, 1},
   {"R_swig_new_map_int_icon__SWIG_1", (DL_FUNC) &R_swig_new_map_int_icon__SWIG_1, 0},
   {"R_swig_new_map_int_icon__SWIG_2", (DL_FUNC) &R_swig_new_map_int_icon__SWIG_2, 1},
   {"R_swig_ScriptEngine_Cast_MapIcon", (DL_FUNC) &R_swig_ScriptEngine_Cast_MapIcon, 3},
   {"R_swig_vector_pair_double_double_reserve", (DL_FUNC) &R_swig_vector_pair_double_double_reserve, 2},
   {"R_swig_delete_vector_background", (DL_FUNC) &R_swig_delete_vector_background, 1},
   {"R_swig_vector_pair_timeseries_pop", (DL_FUNC) &R_swig_vector_pair_timeseries_pop, 2},
   {"R_swig_Color_Interop_R_set", (DL_FUNC) &R_swig_Color_Interop_R_set, 2},
   {"R_swig_vector_background_pop", (DL_FUNC) &R_swig_vector_background_pop, 2},
   {"R_swig_SharedTimeSeriesPattern_X_Units", (DL_FUNC) &R_swig_SharedTimeSeriesPattern_X_Units, 2},
   {"R_swig_vector_float_empty", (DL_FUNC) &R_swig_vector_float_empty, 2},
   {"R_swig_ScriptObject_Cast_MapPolyline", (DL_FUNC) &R_swig_ScriptObject_Cast_MapPolyline, 2},
   {"R_swig_vector_background_append", (DL_FUNC) &R_swig_vector_background_append, 2},
   {"R_swig_vector_string_assign", (DL_FUNC) &R_swig_vector_string_assign, 3},
   {"R_swig_MapIcon_Interop_longitude_set", (DL_FUNC) &R_swig_MapIcon_Interop_longitude_set, 2},
   {"R_swig_vector_scriptingnode___getitem__", (DL_FUNC) &R_swig_vector_scriptingnode___getitem__, 3},
   {"R_swig_map_int_polyline_clear", (DL_FUNC) &R_swig_map_int_polyline_clear, 1},
   {"R_swig_WaterWatchEnums_Arg_get", (DL_FUNC) &R_swig_WaterWatchEnums_Arg_get, 1},
   {"R_swig_WaterWatchEnums_Return_get", (DL_FUNC) &R_swig_WaterWatchEnums_Return_get, 1},
   {"R_swig_ScriptingNode_startLine_set", (DL_FUNC) &R_swig_ScriptingNode_startLine_set, 2},
   {"R_swig_MapIcon_Interop_latitude_set", (DL_FUNC) &R_swig_MapIcon_Interop_latitude_set, 2},
   {"R_swig_vector_colors_pop_back", (DL_FUNC) &R_swig_vector_colors_pop_back, 1},
   {"R_swig_Color_Interop_B_get", (DL_FUNC) &R_swig_Color_Interop_B_get, 2},
   {"R_swig_pair_int_pair_string_vector_string_first_get", (DL_FUNC) &R_swig_pair_int_pair_string_vector_string_first_get, 2},
   {"R_swig_WaterWatch_getCurrentTime", (DL_FUNC) &R_swig_WaterWatch_getCurrentTime, 1},
   {"R_swig_vector_pair_double_double_clear", (DL_FUNC) &R_swig_vector_pair_double_double_clear, 1},
   {"R_swig_vector_pair_double_double_push_back", (DL_FUNC) &R_swig_vector_pair_double_double_push_back, 2},
   {"R_swig_delete_SharedTimeSeriesPattern", (DL_FUNC) &R_swig_delete_SharedTimeSeriesPattern, 1},
   {"R_swig_delete_vector_scriptingnode", (DL_FUNC) &R_swig_delete_vector_scriptingnode, 1},
   {"R_swig_map_int_background_size", (DL_FUNC) &R_swig_map_int_background_size, 2},
   {"R_swig_MapBackground_Interop_max_color_get", (DL_FUNC) &R_swig_MapBackground_Interop_max_color_get, 1},
   {"R_swig_pair_string_string_first_get", (DL_FUNC) &R_swig_pair_string_string_first_get, 2},
   {"R_swig_vector_scriptingnode_push_back", (DL_FUNC) &R_swig_vector_scriptingnode_push_back, 2},
   {"R_swig_cweeDateTime_second_get", (DL_FUNC) &R_swig_cweeDateTime_second_get, 2},
   {"R_swig_MapBackground_Interop_matrix_set", (DL_FUNC) &R_swig_MapBackground_Interop_matrix_set, 2},
   {"R_swig_new_ScriptObject", (DL_FUNC) &R_swig_new_ScriptObject, 1},
   {"R_swig_vector_string___getitem__", (DL_FUNC) &R_swig_vector_string___getitem__, 3},
   {"R_swig_ScriptingNode_endColumn_get", (DL_FUNC) &R_swig_ScriptingNode_endColumn_get, 2},
   {"R_swig_vector_scriptingnode___delitem__", (DL_FUNC) &R_swig_vector_scriptingnode___delitem__, 2},
   {"R_swig_vector_colors_empty", (DL_FUNC) &R_swig_vector_colors_empty, 2},
   {"R_swig_vector_colors_assign", (DL_FUNC) &R_swig_vector_colors_assign, 3},
   {"R_swig_map_int_background_get_allocator", (DL_FUNC) &R_swig_map_int_background_get_allocator, 2},
   {"R_swig_MapBackground_Interop_clipToBounds_get", (DL_FUNC) &R_swig_MapBackground_Interop_clipToBounds_get, 2},
   {"R_swig_delete_WaterWatch", (DL_FUNC) &R_swig_delete_WaterWatch, 1},
   {"R_swig_vector_pair_timeseries_clear", (DL_FUNC) &R_swig_vector_pair_timeseries_clear, 1},
   {"R_swig_vector_scriptingnode___setslice__", (DL_FUNC) &R_swig_vector_scriptingnode___setslice__, 4},
   {"R_swig_vector_string___delslice__", (DL_FUNC) &R_swig_vector_string___delslice__, 3},
   {"R_swig_map_int_polyline_get_allocator", (DL_FUNC) &R_swig_map_int_polyline_get_allocator, 2},
   {"R_swig_new_WaterWatchEnums", (DL_FUNC) &R_swig_new_WaterWatchEnums, 0},
   {"R_swig_vector_double_append", (DL_FUNC) &R_swig_vector_double_append, 2},
   {"R_swig_WaterWatchEnums_If_get", (DL_FUNC) &R_swig_WaterWatchEnums_If_get, 1},
   {"R_swig_ScriptEngine_DoScriptAsync", (DL_FUNC) &R_swig_ScriptEngine_DoScriptAsync, 3},
   {"R_swig_pair_double_double_first_set", (DL_FUNC) &R_swig_pair_double_double_first_set, 2},
   {"R_swig_new_pair_string_vector_string__SWIG_0", (DL_FUNC) &R_swig_new_pair_string_vector_string__SWIG_0, 0},
   {"R_swig_new_pair_string_vector_string__SWIG_1", (DL_FUNC) &R_swig_new_pair_string_vector_string__SWIG_1, 2},
   {"R_swig_new_pair_int_pair_string_vector_string__SWIG_3", (DL_FUNC) &R_swig_new_pair_int_pair_string_vector_string__SWIG_3, 1},
   {"R_swig_new_pair_int_pair_string_vector_string__SWIG_2", (DL_FUNC) &R_swig_new_pair_int_pair_string_vector_string__SWIG_2, 2},
   {"R_swig_new_pair_int_pair_string_vector_string__SWIG_1", (DL_FUNC) &R_swig_new_pair_int_pair_string_vector_string__SWIG_1, 2},
   {"R_swig_new_pair_int_pair_string_vector_string__SWIG_0", (DL_FUNC) &R_swig_new_pair_int_pair_string_vector_string__SWIG_0, 0},
   {"R_swig_new_pair_string_vector_string__SWIG_2", (DL_FUNC) &R_swig_new_pair_string_vector_string__SWIG_2, 2},
   {"R_swig_vector_colors_capacity", (DL_FUNC) &R_swig_vector_colors_capacity, 2},
   {"R_swig_vector_string___delitem__", (DL_FUNC) &R_swig_vector_string___delitem__, 2},
   {"R_swig_ScriptingNode_type_get", (DL_FUNC) &R_swig_ScriptingNode_type_get, 2},
   {"R_swig_cweeDateTime_day_set", (DL_FUNC) &R_swig_cweeDateTime_day_set, 2},
   {"R_swig_new_pair_string_vector_string__SWIG_3", (DL_FUNC) &R_swig_new_pair_string_vector_string__SWIG_3, 1},
   {"R_swig_pair_string_string_second_set", (DL_FUNC) &R_swig_pair_string_string_second_set, 2},
   {"R_swig_MapIcon_Interop_color_set", (DL_FUNC) &R_swig_MapIcon_Interop_color_set, 2},
   {"R_swig_WaterWatchEnums_Value_Range_get", (DL_FUNC) &R_swig_WaterWatchEnums_Value_Range_get, 1},
   {"R_swig_ScriptEngine_StopCurrentScript", (DL_FUNC) &R_swig_ScriptEngine_StopCurrentScript, 1},
   {"R_swig_vector_scriptingnode___getslice__", (DL_FUNC) &R_swig_vector_scriptingnode___getslice__, 3},
   {"R_swig_vector_pair_timeseries___getitem__", (DL_FUNC) &R_swig_vector_pair_timeseries___getitem__, 3},
   {"R_swig_vector_scriptingnode___len__", (DL_FUNC) &R_swig_vector_scriptingnode___len__, 2},
   {"R_swig_WaterWatchEnums_Lambda_get", (DL_FUNC) &R_swig_WaterWatchEnums_Lambda_get, 1},
   {"R_swig_vector_scriptingnode___nonzero__", (DL_FUNC) &R_swig_vector_scriptingnode___nonzero__, 2},
   {"R_swig_vector_background_reserve", (DL_FUNC) &R_swig_vector_background_reserve, 2},
   {"R_swig_vector_string_reserve", (DL_FUNC) &R_swig_vector_string_reserve, 2},
   {"R_swig_MapBackground_Interop_minValue_get", (DL_FUNC) &R_swig_MapBackground_Interop_minValue_get, 2},
   {"R_swig_SharedTimeSeriesPattern_GetMaxTime", (DL_FUNC) &R_swig_SharedTimeSeriesPattern_GetMaxTime, 2},
   {"R_swig_MapBackground_Interop_min_color_get", (DL_FUNC) &R_swig_MapBackground_Interop_min_color_get, 1},
   {"R_swig_new_Awaiter", (DL_FUNC) &R_swig_new_Awaiter, 0},
   {"R_swig_vector_double_size", (DL_FUNC) &R_swig_vector_double_size, 2},
   {"R_swig_vector_colors___getitem__", (DL_FUNC) &R_swig_vector_colors___getitem__, 3},
   {"R_swig_MapIcon_Interop_IconPathGeometry_set", (DL_FUNC) &R_swig_MapIcon_Interop_IconPathGeometry_set, 2},
   {"R_swig_new_vector_double__SWIG_0", (DL_FUNC) &R_swig_new_vector_double__SWIG_0, 0},
   {"R_swig_vector_scriptingnode_empty", (DL_FUNC) &R_swig_vector_scriptingnode_empty, 2},
   {"R_swig_new_vector_double__SWIG_1", (DL_FUNC) &R_swig_new_vector_double__SWIG_1, 1},
   {"R_swig_new_vector_double__SWIG_2", (DL_FUNC) &R_swig_new_vector_double__SWIG_2, 1},
   {"R_swig_new_vector_double__SWIG_3", (DL_FUNC) &R_swig_new_vector_double__SWIG_3, 2},
   {"R_swig_SharedMatrix_GetValue", (DL_FUNC) &R_swig_SharedMatrix_GetValue, 4},
   {"R_swig_WaterWatchEnums_Block_get", (DL_FUNC) &R_swig_WaterWatchEnums_Block_get, 1},
   {"R_swig_cweeDateTime_year_set", (DL_FUNC) &R_swig_cweeDateTime_year_set, 2},
   {"R_swig_ScriptingNode_endLine_set", (DL_FUNC) &R_swig_ScriptingNode_endLine_set, 2},
   {"R_swig_WaterWatchEnums_Compiled_get", (DL_FUNC) &R_swig_WaterWatchEnums_Compiled_get, 1},
   {"R_swig_MapBackground_Interop_highQuality_set", (DL_FUNC) &R_swig_MapBackground_Interop_highQuality_set, 2},
   {"R_swig_delete_MapBackground_Interop", (DL_FUNC) &R_swig_delete_MapBackground_Interop, 1},
   {"R_swig_vector_pair_timeseries___delitem__", (DL_FUNC) &R_swig_vector_pair_timeseries___delitem__, 2},
   {"R_swig_SharedTimeSeriesPattern_GetAvgValue", (DL_FUNC) &R_swig_SharedTimeSeriesPattern_GetAvgValue, 4},
   {"R_swig_vector_string___nonzero__", (DL_FUNC) &R_swig_vector_string___nonzero__, 2},
   {"R_swig_MapPolyline_Interop_coordinates_get", (DL_FUNC) &R_swig_MapPolyline_Interop_coordinates_get, 1},
   {"R_swig_ScriptingNode_typeHint_get", (DL_FUNC) &R_swig_ScriptingNode_typeHint_get, 2},
   {"R_swig_delete_SharedString", (DL_FUNC) &R_swig_delete_SharedString, 1},
   {"R_swig_vector_colors___delitem__", (DL_FUNC) &R_swig_vector_colors___delitem__, 2},
   {"R_swig_ScriptingNode_depth_get", (DL_FUNC) &R_swig_ScriptingNode_depth_get, 2},
   {"R_swig_map_int_background_empty", (DL_FUNC) &R_swig_map_int_background_empty, 2},
   {"R_swig_vector_string_clear", (DL_FUNC) &R_swig_vector_string_clear, 1},
   {"R_swig_new_map_int_polyline__SWIG_0", (DL_FUNC) &R_swig_new_map_int_polyline__SWIG_0, 1},
   {"R_swig_new_map_int_polyline__SWIG_1", (DL_FUNC) &R_swig_new_map_int_polyline__SWIG_1, 0},
   {"R_swig_new_vector_pair_double_double__SWIG_0", (DL_FUNC) &R_swig_new_vector_pair_double_double__SWIG_0, 0},
   {"R_swig_vector_background___setitem__", (DL_FUNC) &R_swig_vector_background___setitem__, 3},
   {"R_swig_new_map_int_polyline__SWIG_2", (DL_FUNC) &R_swig_new_map_int_polyline__SWIG_2, 1},
   {"R_swig_new_vector_pair_double_double__SWIG_1", (DL_FUNC) &R_swig_new_vector_pair_double_double__SWIG_1, 1},
   {"R_swig_vector_background_get_allocator", (DL_FUNC) &R_swig_vector_background_get_allocator, 2},
   {"R_swig_WaterWatchEnums_Ranged_For_get", (DL_FUNC) &R_swig_WaterWatchEnums_Ranged_For_get, 1},
   {"R_swig_new_vector_pair_double_double__SWIG_2", (DL_FUNC) &R_swig_new_vector_pair_double_double__SWIG_2, 1},
   {"R_swig_vector_colors___delslice__", (DL_FUNC) &R_swig_vector_colors___delslice__, 3},
   {"R_swig_new_vector_pair_double_double__SWIG_3", (DL_FUNC) &R_swig_new_vector_pair_double_double__SWIG_3, 2},
   {"R_swig_Color_Interop_A_get", (DL_FUNC) &R_swig_Color_Interop_A_get, 2},
   {"R_swig_WaterWatch_GetPercentCpuUsedOfMachine", (DL_FUNC) &R_swig_WaterWatch_GetPercentCpuUsedOfMachine, 1},
   {"R_swig_vector_pair_double_double_front", (DL_FUNC) &R_swig_vector_pair_double_double_front, 2},
   {"R_swig_vector_scriptingnode_size", (DL_FUNC) &R_swig_vector_scriptingnode_size, 2},
   {"R_swig_delete_vector_colors", (DL_FUNC) &R_swig_delete_vector_colors, 1},
   {"R_swig_vector_string_resize__SWIG_0", (DL_FUNC) &R_swig_vector_string_resize__SWIG_0, 2},
   {"R_swig_WaterWatchEnums_Inline_Array_get", (DL_FUNC) &R_swig_WaterWatchEnums_Inline_Array_get, 1},
   {"R_swig_vector_float_get_allocator", (DL_FUNC) &R_swig_vector_float_get_allocator, 2},
   {"R_swig_vector_string_resize__SWIG_1", (DL_FUNC) &R_swig_vector_string_resize__SWIG_1, 3},
   {"R_swig_ScriptEngine_DoScript_Cast_VectorStrings", (DL_FUNC) &R_swig_ScriptEngine_DoScript_Cast_VectorStrings, 3},
   {"R_swig_vector_float_swap", (DL_FUNC) &R_swig_vector_float_swap, 2},
   {"R_swig_vector_pair_timeseries___nonzero__", (DL_FUNC) &R_swig_vector_pair_timeseries___nonzero__, 2},
   {"R_swig_vector_background___delslice__", (DL_FUNC) &R_swig_vector_background___delslice__, 3},
   {"R_swig_SharedTimeSeriesPattern_GetMinTime", (DL_FUNC) &R_swig_SharedTimeSeriesPattern_GetMinTime, 2},
   {"R_swig_delete_vector_float", (DL_FUNC) &R_swig_delete_vector_float, 1},
   {"R_swig_cweeDateTime_minute_get", (DL_FUNC) &R_swig_cweeDateTime_minute_get, 2},
   {"R_swig_vector_colors___nonzero__", (DL_FUNC) &R_swig_vector_colors___nonzero__, 2},
   {"R_swig_vector_pair_timeseries_front", (DL_FUNC) &R_swig_vector_pair_timeseries_front, 2},
   {"R_swig_delete_ScriptObject", (DL_FUNC) &R_swig_delete_ScriptObject, 1},
   {"R_swig_MapIcon_Interop_Label_set", (DL_FUNC) &R_swig_MapIcon_Interop_Label_set, 2},
   {"R_swig_pair_int_pair_string_vector_string_first_set", (DL_FUNC) &R_swig_pair_int_pair_string_vector_string_first_set, 2},
   {"R_swig_vector_string_push_back", (DL_FUNC) &R_swig_vector_string_push_back, 2},
   {"R_swig_delete_MapIcon_Interop", (DL_FUNC) &R_swig_delete_MapIcon_Interop, 1},
   {"R_swig_ScriptEngine_DoScript", (DL_FUNC) &R_swig_ScriptEngine_DoScript, 3},
   {"R_swig_pair_bool_pair_string_string_first_get", (DL_FUNC) &R_swig_pair_bool_pair_string_string_first_get, 2},
   {"R_swig_WaterWatch_ValidateCoordinates", (DL_FUNC) &R_swig_WaterWatch_ValidateCoordinates, 3},
   {"R_swig_Color_Interop_G_get", (DL_FUNC) &R_swig_Color_Interop_G_get, 2},
   {"R_swig_WaterWatchEnums_ControlBlock_get", (DL_FUNC) &R_swig_WaterWatchEnums_ControlBlock_get, 1},
   {"R_swig_vector_pair_timeseries_swap", (DL_FUNC) &R_swig_vector_pair_timeseries_swap, 2},
   {"R_swig_delete_map_int_icon", (DL_FUNC) &R_swig_delete_map_int_icon, 1},
   {"R_swig_vector_scriptingnode_pop", (DL_FUNC) &R_swig_vector_scriptingnode_pop, 2},
   {"R_swig_vector_string_swap", (DL_FUNC) &R_swig_vector_string_swap, 2},
   {"R_swig_new_vector_colors__SWIG_0", (DL_FUNC) &R_swig_new_vector_colors__SWIG_0, 0},
   {"R_swig_new_vector_background__SWIG_0", (DL_FUNC) &R_swig_new_vector_background__SWIG_0, 0},
   {"R_swig_new_vector_colors__SWIG_1", (DL_FUNC) &R_swig_new_vector_colors__SWIG_1, 1},
   {"R_swig_new_pair_timeseries__SWIG_0", (DL_FUNC) &R_swig_new_pair_timeseries__SWIG_0, 0},
   {"R_swig_new_vector_background__SWIG_1", (DL_FUNC) &R_swig_new_vector_background__SWIG_1, 1},
   {"R_swig_new_vector_colors__SWIG_2", (DL_FUNC) &R_swig_new_vector_colors__SWIG_2, 1},
   {"R_swig_WaterWatchEnums_Method_get", (DL_FUNC) &R_swig_WaterWatchEnums_Method_get, 1},
   {"R_swig_new_pair_timeseries__SWIG_1", (DL_FUNC) &R_swig_new_pair_timeseries__SWIG_1, 2},
   {"R_swig_MapLayer_Interop_icons_get", (DL_FUNC) &R_swig_MapLayer_Interop_icons_get, 1},
   {"R_swig_vector_float_pop_back", (DL_FUNC) &R_swig_vector_float_pop_back, 1},
   {"R_swig_new_vector_background__SWIG_2", (DL_FUNC) &R_swig_new_vector_background__SWIG_2, 1},
   {"R_swig_new_vector_colors__SWIG_3", (DL_FUNC) &R_swig_new_vector_colors__SWIG_3, 2},
   {"R_swig_SharedString_Index", (DL_FUNC) &R_swig_SharedString_Index, 2},
   {"R_swig_new_cweeDateTime__SWIG_0", (DL_FUNC) &R_swig_new_cweeDateTime__SWIG_0, 0},
   {"R_swig_new_pair_timeseries__SWIG_2", (DL_FUNC) &R_swig_new_pair_timeseries__SWIG_2, 2},
   {"R_swig_new_vector_background__SWIG_3", (DL_FUNC) &R_swig_new_vector_background__SWIG_3, 2},
   {"R_swig_vector_colors_swap", (DL_FUNC) &R_swig_vector_colors_swap, 2},
   {"R_swig_new_cweeDateTime__SWIG_1", (DL_FUNC) &R_swig_new_cweeDateTime__SWIG_1, 1},
   {"R_swig_pair_timeseries_first_set", (DL_FUNC) &R_swig_pair_timeseries_first_set, 2},
   {"R_swig_new_pair_timeseries__SWIG_3", (DL_FUNC) &R_swig_new_pair_timeseries__SWIG_3, 1},
   {"R_swig_vector_colors_pop", (DL_FUNC) &R_swig_vector_colors_pop, 2},
   {"R_swig_vector_float___setitem__", (DL_FUNC) &R_swig_vector_float___setitem__, 3},
   {"R_swig_vector_string_append", (DL_FUNC) &R_swig_vector_string_append, 2},
   {"R_swig_new_ScriptingNode", (DL_FUNC) &R_swig_new_ScriptingNode, 0},
   {"R_swig_vector_pair_timeseries___setslice__", (DL_FUNC) &R_swig_vector_pair_timeseries___setslice__, 4},
   {"R_swig_vector_pair_double_double_pop", (DL_FUNC) &R_swig_vector_pair_double_double_pop, 2},
   {"R_swig_MapPolyline_Interop_dashed_get", (DL_FUNC) &R_swig_MapPolyline_Interop_dashed_get, 2},
   {"R_swig_WaterWatchEnums_Attr_Decl_get", (DL_FUNC) &R_swig_WaterWatchEnums_Attr_Decl_get, 1},
   {"R_swig_MapPolyline_Interop_thickness_get", (DL_FUNC) &R_swig_MapPolyline_Interop_thickness_get, 2},
   {"R_swig_delete_vector_pair_double_double", (DL_FUNC) &R_swig_delete_vector_pair_double_double, 1},
   {"R_swig_MapLayer_Interop_polylines_set", (DL_FUNC) &R_swig_MapLayer_Interop_polylines_set, 2},
   {"R_swig_WaterWatchEnums_Var_Decl_get", (DL_FUNC) &R_swig_WaterWatchEnums_Var_Decl_get, 1},
   {"R_swig_vector_double___getitem__", (DL_FUNC) &R_swig_vector_double___getitem__, 3},
   {"R_swig_vector_double_reserve", (DL_FUNC) &R_swig_vector_double_reserve, 2},
   {"R_swig_MapIcon_Interop_size_set", (DL_FUNC) &R_swig_MapIcon_Interop_size_set, 2},
   {"R_swig_vector_float_back", (DL_FUNC) &R_swig_vector_float_back, 2},
   {"R_swig_vector_scriptingnode_assign", (DL_FUNC) &R_swig_vector_scriptingnode_assign, 3},
   {"R_swig_new_vector_scriptingnode__SWIG_0", (DL_FUNC) &R_swig_new_vector_scriptingnode__SWIG_0, 0},
   {"R_swig_new_vector_scriptingnode__SWIG_1", (DL_FUNC) &R_swig_new_vector_scriptingnode__SWIG_1, 1},
   {"R_swig_WaterWatchEnums_Def_get", (DL_FUNC) &R_swig_WaterWatchEnums_Def_get, 1},
   {"R_swig_vector_pair_timeseries___getslice__", (DL_FUNC) &R_swig_vector_pair_timeseries___getslice__, 3},
   {"R_swig_vector_pair_double_double_pop_back", (DL_FUNC) &R_swig_vector_pair_double_double_pop_back, 1},
   {"R_swig_new_vector_scriptingnode__SWIG_2", (DL_FUNC) &R_swig_new_vector_scriptingnode__SWIG_2, 1},
   {"R_swig_new_vector_scriptingnode__SWIG_3", (DL_FUNC) &R_swig_new_vector_scriptingnode__SWIG_3, 2},
   {"R_swig_WaterWatchEnums_Catch_get", (DL_FUNC) &R_swig_WaterWatchEnums_Catch_get, 1},
   {"R_swig_WaterWatchEnums_Scopeless_Block_get", (DL_FUNC) &R_swig_WaterWatchEnums_Scopeless_Block_get, 1},
   {"R_swig_WaterWatchEnums_Prefix_get", (DL_FUNC) &R_swig_WaterWatchEnums_Prefix_get, 1},
   {"R_swig_vector_float_capacity", (DL_FUNC) &R_swig_vector_float_capacity, 2},
   {"R_swig_vector_colors_append", (DL_FUNC) &R_swig_vector_colors_append, 2},
   {"R_swig_WaterWatch_GeocodeAddress__SWIG_0", (DL_FUNC) &R_swig_WaterWatch_GeocodeAddress__SWIG_0, 2},
   {"R_swig_vector_string_front", (DL_FUNC) &R_swig_vector_string_front, 2},
   {"R_swig_WaterWatch_GeocodeAddress__SWIG_1", (DL_FUNC) &R_swig_WaterWatch_GeocodeAddress__SWIG_1, 3},
   {"R_swig_vector_double_get_allocator", (DL_FUNC) &R_swig_vector_double_get_allocator, 2},
   {"R_swig_map_int_icon_empty", (DL_FUNC) &R_swig_map_int_icon_empty, 2},
   {"R_swig_WaterWatchEnums_Class_get", (DL_FUNC) &R_swig_WaterWatchEnums_Class_get, 1},
   {"R_swig_WaterWatchEnums_Map_Pair_get", (DL_FUNC) &R_swig_WaterWatchEnums_Map_Pair_get, 1},
   {"R_swig_WaterWatchEnums_Dot_Access_get", (DL_FUNC) &R_swig_WaterWatchEnums_Dot_Access_get, 1},
   {"R_swig_WaterWatchEnums_Error_get", (DL_FUNC) &R_swig_WaterWatchEnums_Error_get, 1},
   {"R_swig_vector_double___delslice__", (DL_FUNC) &R_swig_vector_double___delslice__, 3},
   {"R_swig_cweeDateTime_milliseconds_get", (DL_FUNC) &R_swig_cweeDateTime_milliseconds_get, 2},
   {"R_swig_WaterWatch_TryGetToast", (DL_FUNC) &R_swig_WaterWatch_TryGetToast, 1},
   {"R_swig_MapIcon_Interop_HideOnCollision_set", (DL_FUNC) &R_swig_MapIcon_Interop_HideOnCollision_set, 2},
   {"R_swig_ScriptObject_Cast_MapLayer", (DL_FUNC) &R_swig_ScriptObject_Cast_MapLayer, 2},
   {"R_swig_pair_string_vector_string_second_set", (DL_FUNC) &R_swig_pair_string_vector_string_second_set, 2},
   {"R_swig_WaterWatch_TryGetAppRequest", (DL_FUNC) &R_swig_WaterWatch_TryGetAppRequest, 1},
   {"R_swig_vector_pair_double_double___len__", (DL_FUNC) &R_swig_vector_pair_double_double___len__, 2},
   {"R_swig_pair_timeseries_second_get", (DL_FUNC) &R_swig_pair_timeseries_second_get, 2},
   {"R_swig_vector_pair_timeseries_back", (DL_FUNC) &R_swig_vector_pair_timeseries_back, 2},
   {"R_swig_vector_double___delitem__", (DL_FUNC) &R_swig_vector_double___delitem__, 2},
   {"R_swig_vector_pair_double_double___setitem__", (DL_FUNC) &R_swig_vector_pair_double_double___setitem__, 3},
   {"R_swig_vector_string_back", (DL_FUNC) &R_swig_vector_string_back, 2},
   {"R_swig_new_MapBackground_Interop", (DL_FUNC) &R_swig_new_MapBackground_Interop, 0},
   {"R_swig_WaterWatch_RandomInt", (DL_FUNC) &R_swig_WaterWatch_RandomInt, 3},
   {"R_swig_Awaiter_data_m_set", (DL_FUNC) &R_swig_Awaiter_data_m_set, 2},
   {"R_swig_uwp_patternInterpType_RIGHT_get", (DL_FUNC) &R_swig_uwp_patternInterpType_RIGHT_get, 1},
   {"R_swig_pair_bool_pair_string_string_second_get", (DL_FUNC) &R_swig_pair_bool_pair_string_string_second_get, 1},
   {"R_swig_vector_background_pop_back", (DL_FUNC) &R_swig_vector_background_pop_back, 1},
   {"R_swig_vector_colors_back", (DL_FUNC) &R_swig_vector_colors_back, 2},
   {"R_swig_WaterWatch_SubmitToast", (DL_FUNC) &R_swig_WaterWatch_SubmitToast, 2},
   {"R_swig_vector_pair_double_double_capacity", (DL_FUNC) &R_swig_vector_pair_double_double_capacity, 2},
   {"R_swig_ScriptingNode_startColumn_set", (DL_FUNC) &R_swig_ScriptingNode_startColumn_set, 2},
   {"R_swig_vector_double_pop", (DL_FUNC) &R_swig_vector_double_pop, 2},
   {"R_swig_map_int_polyline_empty", (DL_FUNC) &R_swig_map_int_polyline_empty, 2},
   {"R_swig_map_int_polyline_swap", (DL_FUNC) &R_swig_map_int_polyline_swap, 2},
   {"R_swig_map_int_icon_size", (DL_FUNC) &R_swig_map_int_icon_size, 2},
   {"R_swig_pair_string_vector_string_first_set", (DL_FUNC) &R_swig_pair_string_vector_string_first_set, 2},
   {"R_swig_vector_pair_double_double_assign", (DL_FUNC) &R_swig_vector_pair_double_double_assign, 3},
   {"R_swig_WaterWatch_GetNumLogicalCoresOnMachine", (DL_FUNC) &R_swig_WaterWatch_GetNumLogicalCoresOnMachine, 1},
   {"R_swig_SharedTimeSeriesPattern_GetInterpolationType", (DL_FUNC) &R_swig_SharedTimeSeriesPattern_GetInterpolationType, 2},
   {"R_swig_vector_float_reserve", (DL_FUNC) &R_swig_vector_float_reserve, 2},
   {"R_swig_vector_float___delslice__", (DL_FUNC) &R_swig_vector_float___delslice__, 3},
   {"R_swig_WaterWatchEnums_Id_get", (DL_FUNC) &R_swig_WaterWatchEnums_Id_get, 1},
   {"R_swig_cweeDateTime_unixTime_get", (DL_FUNC) &R_swig_cweeDateTime_unixTime_get, 2},
   {"R_swig_vector_background_swap", (DL_FUNC) &R_swig_vector_background_swap, 2},
   {"R_swig_ScriptObject_Cast_String", (DL_FUNC) &R_swig_ScriptObject_Cast_String, 2},
   {"R_swig_SharedString_Set", (DL_FUNC) &R_swig_SharedString_Set, 2},
   {"R_swig_vector_pair_double_double_empty", (DL_FUNC) &R_swig_vector_pair_double_double_empty, 2},
   {"R_swig_WaterWatch_GeocodeElevation", (DL_FUNC) &R_swig_WaterWatch_GeocodeElevation, 3},
   {"R_swig_cweeDateTime_hour_set", (DL_FUNC) &R_swig_cweeDateTime_hour_set, 2},
   {"R_swig_vector_pair_double_double___setslice__", (DL_FUNC) &R_swig_vector_pair_double_double___setslice__, 4},
   {"R_swig_pair_double_double_second_set", (DL_FUNC) &R_swig_pair_double_double_second_set, 2},
   {"R_swig_vector_double_push_back", (DL_FUNC) &R_swig_vector_double_push_back, 2},
   {"R_swig_vector_double___nonzero__", (DL_FUNC) &R_swig_vector_double___nonzero__, 2},
   {"R_swig_uwp_patternInterpType_LINEAR_get", (DL_FUNC) &R_swig_uwp_patternInterpType_LINEAR_get, 1},
   {"R_swig_vector_pair_timeseries_get_allocator", (DL_FUNC) &R_swig_vector_pair_timeseries_get_allocator, 2},
   {"R_swig_MapBackground_Interop_maxValue_set", (DL_FUNC) &R_swig_MapBackground_Interop_maxValue_set, 2},
   {"R_swig_map_int_icon_get_allocator", (DL_FUNC) &R_swig_map_int_icon_get_allocator, 2},
   {"R_swig_WaterWatchEnums_For_get", (DL_FUNC) &R_swig_WaterWatchEnums_For_get, 1},
   {"R_swig_ScriptEngine_Cast_MapBackground", (DL_FUNC) &R_swig_ScriptEngine_Cast_MapBackground, 3},
   {"R_swig_WaterWatch_CompleteAppRequest", (DL_FUNC) &R_swig_WaterWatch_CompleteAppRequest, 2},
   {"R_swig_vector_pair_timeseries_assign", (DL_FUNC) &R_swig_vector_pair_timeseries_assign, 3},
   {"R_swig_ScriptEngine_Cast_MapPolyline", (DL_FUNC) &R_swig_ScriptEngine_Cast_MapPolyline, 3},
   {"R_swig_vector_pair_timeseries_empty", (DL_FUNC) &R_swig_vector_pair_timeseries_empty, 2},
   {"R_swig_MapPolyline_Interop_color_set", (DL_FUNC) &R_swig_MapPolyline_Interop_color_set, 2},
   {"R_swig_vector_pair_double_double_resize__SWIG_0", (DL_FUNC) &R_swig_vector_pair_double_double_resize__SWIG_0, 2},
   {"R_swig_vector_background_capacity", (DL_FUNC) &R_swig_vector_background_capacity, 2},
   {"R_swig_MapBackground_Interop_GetMatrix", (DL_FUNC) &R_swig_MapBackground_Interop_GetMatrix, 8},
   {"R_swig_vector_pair_double_double_resize__SWIG_1", (DL_FUNC) &R_swig_vector_pair_double_double_resize__SWIG_1, 3},
   {"R_swig_vector_colors_reserve", (DL_FUNC) &R_swig_vector_colors_reserve, 2},
   {"R_swig_vector_pair_double_double___getslice__", (DL_FUNC) &R_swig_vector_pair_double_double___getslice__, 3},
   {"R_swig_WaterWatchEnums_Assign_Decl_get", (DL_FUNC) &R_swig_WaterWatchEnums_Assign_Decl_get, 1},
   {"R_swig_vector_float_push_back", (DL_FUNC) &R_swig_vector_float_push_back, 2},
   {"R_swig_WaterWatchEnums_Unused_Return_Fun_Call_get", (DL_FUNC) &R_swig_WaterWatchEnums_Unused_Return_Fun_Call_get, 1},
   {"R_swig_vector_scriptingnode_get_allocator", (DL_FUNC) &R_swig_vector_scriptingnode_get_allocator, 2},
   {"R_swig_SharedMatrix_Clear", (DL_FUNC) &R_swig_SharedMatrix_Clear, 1},
   {"R_swig_ScriptingNode_text_set", (DL_FUNC) &R_swig_ScriptingNode_text_set, 2},
   {"R_swig_pair_int_pair_string_vector_string_second_get", (DL_FUNC) &R_swig_pair_int_pair_string_vector_string_second_get, 1},
   {"R_swig_SharedTimeSeriesPattern_Clear", (DL_FUNC) &R_swig_SharedTimeSeriesPattern_Clear, 1},
   {"R_swig_ScriptObject_Cast_Color", (DL_FUNC) &R_swig_ScriptObject_Cast_Color, 2},
   {"R_swig_delete_map_int_background", (DL_FUNC) &R_swig_delete_map_int_background, 1},
   {"R_swig_ScriptObject_Cast_MapIcon", (DL_FUNC) &R_swig_ScriptObject_Cast_MapIcon, 2},
   {"R_swig_uwp_color_GREEN_get", (DL_FUNC) &R_swig_uwp_color_GREEN_get, 1},
   {"R_swig_map_int_background_count", (DL_FUNC) &R_swig_map_int_background_count, 3},
   {"R_swig_vector_double_clear", (DL_FUNC) &R_swig_vector_double_clear, 1},
   {"R_swig_vector_background___len__", (DL_FUNC) &R_swig_vector_background___len__, 2},
   {"R_swig_WaterWatch_SetDataDirectory", (DL_FUNC) &R_swig_WaterWatch_SetDataDirectory, 1},
   {"R_swig_Awaiter_isFinished_m_get", (DL_FUNC) &R_swig_Awaiter_isFinished_m_get, 1},
   {"R_swig_vector_string___len__", (DL_FUNC) &R_swig_vector_string___len__, 2},
   {"R_swig_vector_pair_timeseries_push_back", (DL_FUNC) &R_swig_vector_pair_timeseries_push_back, 2},
   {"R_swig_vector_float_assign", (DL_FUNC) &R_swig_vector_float_assign, 3},
   {"R_swig_SharedTimeSeriesPattern_GetValue", (DL_FUNC) &R_swig_SharedTimeSeriesPattern_GetValue, 3},
   {"R_swig_vector_float_resize__SWIG_0", (DL_FUNC) &R_swig_vector_float_resize__SWIG_0, 2},
   {"R_swig_WaterWatchEnums_Break_get", (DL_FUNC) &R_swig_WaterWatchEnums_Break_get, 1},
   {"R_swig_pair_int_pair_string_vector_string_second_set", (DL_FUNC) &R_swig_pair_int_pair_string_vector_string_second_set, 2},
   {"R_swig_vector_float_resize__SWIG_1", (DL_FUNC) &R_swig_vector_float_resize__SWIG_1, 3},
   {"R_swig_vector_background_back", (DL_FUNC) &R_swig_vector_background_back, 2},
   {"R_swig_cweeDateTime_month_get", (DL_FUNC) &R_swig_cweeDateTime_month_get, 2},
   {"R_swig_WaterWatchEnums_Noop_get", (DL_FUNC) &R_swig_WaterWatchEnums_Noop_get, 1},
   {"R_swig_WaterWatchEnums_Default_get", (DL_FUNC) &R_swig_WaterWatchEnums_Default_get, 1},
   {"R_swig_new_pair_bool_pair_string_string__SWIG_0", (DL_FUNC) &R_swig_new_pair_bool_pair_string_string__SWIG_0, 0},
   {"R_swig_new_pair_bool_pair_string_string__SWIG_1", (DL_FUNC) &R_swig_new_pair_bool_pair_string_string__SWIG_1, 2},
   {"R_swig_new_ScriptEngine", (DL_FUNC) &R_swig_new_ScriptEngine, 0},
   {"R_swig_WaterWatch_GetDataDirectory", (DL_FUNC) &R_swig_WaterWatch_GetDataDirectory, 1},
   {"R_swig_SharedMatrix_GetTimeSeries", (DL_FUNC) &R_swig_SharedMatrix_GetTimeSeries, 8},
   {"R_swig_new_pair_bool_pair_string_string__SWIG_2", (DL_FUNC) &R_swig_new_pair_bool_pair_string_string__SWIG_2, 2},
   {"R_swig_vector_colors_get_allocator", (DL_FUNC) &R_swig_vector_colors_get_allocator, 2},
   {"R_swig_Color_Interop_B_set", (DL_FUNC) &R_swig_Color_Interop_B_set, 2},
   {"R_swig_new_pair_bool_pair_string_string__SWIG_3", (DL_FUNC) &R_swig_new_pair_bool_pair_string_string__SWIG_3, 1},
   {"R_swig_vector_pair_timeseries_reserve", (DL_FUNC) &R_swig_vector_pair_timeseries_reserve, 2},
   {"R_swig_map_int_background_erase", (DL_FUNC) &R_swig_map_int_background_erase, 3},
   {"R_swig_Color_Interop_R_get", (DL_FUNC) &R_swig_Color_Interop_R_get, 2},
   {"R_swig_ScriptEngine_Cast_Color", (DL_FUNC) &R_swig_ScriptEngine_Cast_Color, 3},
   {"R_swig_MapBackground_Interop_max_color_set", (DL_FUNC) &R_swig_MapBackground_Interop_max_color_set, 2},
   {"R_swig_pair_string_string_first_set", (DL_FUNC) &R_swig_pair_string_string_first_set, 2},
   {"R_swig_vector_string___setslice__", (DL_FUNC) &R_swig_vector_string___setslice__, 4},
   {"R_swig_vector_pair_double_double_get_allocator", (DL_FUNC) &R_swig_vector_pair_double_double_get_allocator, 2},
   {"R_swig_vector_scriptingnode_pop_back", (DL_FUNC) &R_swig_vector_scriptingnode_pop_back, 1},
   {"R_swig_delete_WaterWatchEnums", (DL_FUNC) &R_swig_delete_WaterWatchEnums, 1},
   {"R_swig_SharedMatrix_GetMaxX", (DL_FUNC) &R_swig_SharedMatrix_GetMaxX, 2},
   {"R_swig_cweeDateTime_second_set", (DL_FUNC) &R_swig_cweeDateTime_second_set, 2},
   {"R_swig_MapIcon_Interop_longitude_get", (DL_FUNC) &R_swig_MapIcon_Interop_longitude_get, 2},
   {"R_swig_ScriptEngine_Cast_String", (DL_FUNC) &R_swig_ScriptEngine_Cast_String, 3},
   {"R_swig_SharedMatrix_GetMaxY", (DL_FUNC) &R_swig_SharedMatrix_GetMaxY, 2},
   {"R_swig_ScriptingNode_endColumn_set", (DL_FUNC) &R_swig_ScriptingNode_endColumn_set, 2},
   {"R_swig_vector_string_empty", (DL_FUNC) &R_swig_vector_string_empty, 2},
   {"R_swig_SharedMatrix_AppendData", (DL_FUNC) &R_swig_SharedMatrix_AppendData, 4},
   {"R_swig_vector_string_pop", (DL_FUNC) &R_swig_vector_string_pop, 2},
   {"R_swig_vector_float_pop", (DL_FUNC) &R_swig_vector_float_pop, 2},
   {"R_swig_vector_pair_timeseries_pop_back", (DL_FUNC) &R_swig_vector_pair_timeseries_pop_back, 1},
   {"R_swig_MapBackground_Interop_clipToBounds_set", (DL_FUNC) &R_swig_MapBackground_Interop_clipToBounds_set, 2},
   {"R_swig_ScriptingNode_startLine_get", (DL_FUNC) &R_swig_ScriptingNode_startLine_get, 2},
   {"R_swig_MapIcon_Interop_latitude_get", (DL_FUNC) &R_swig_MapIcon_Interop_latitude_get, 2},
   {"R_swig_vector_pair_double_double_swap", (DL_FUNC) &R_swig_vector_pair_double_double_swap, 2},
   {"R_swig_WaterWatchEnums_Switch_get", (DL_FUNC) &R_swig_WaterWatchEnums_Switch_get, 1},
   {"R_swig_vector_scriptingnode___setitem__", (DL_FUNC) &R_swig_vector_scriptingnode___setitem__, 3},
   {"R_swig_new_map_int_background__SWIG_0", (DL_FUNC) &R_swig_new_map_int_background__SWIG_0, 1},
   {"R_swig_WaterWatchEnums_Logical_Or_get", (DL_FUNC) &R_swig_WaterWatchEnums_Logical_Or_get, 1},
   {"R_swig_new_map_int_background__SWIG_1", (DL_FUNC) &R_swig_new_map_int_background__SWIG_1, 0},
   {"R_swig_vector_string___getslice__", (DL_FUNC) &R_swig_vector_string___getslice__, 3},
   {"R_swig_new_map_int_background__SWIG_2", (DL_FUNC) &R_swig_new_map_int_background__SWIG_2, 1},
   {"R_swig_vector_string_pop_back", (DL_FUNC) &R_swig_vector_string_pop_back, 1},
   {"R_swig_WaterWatch_PredictNext", (DL_FUNC) &R_swig_WaterWatch_PredictNext, 3},
   {"R_swig_delete_SharedMatrix", (DL_FUNC) &R_swig_delete_SharedMatrix, 1},
   {"R_swig_vector_scriptingnode_append", (DL_FUNC) &R_swig_vector_scriptingnode_append, 2},
   {"R_swig_WaterWatchEnums_Try_get", (DL_FUNC) &R_swig_WaterWatchEnums_Try_get, 1},
   {"R_swig_MapBackground_Interop_matrix_get", (DL_FUNC) &R_swig_MapBackground_Interop_matrix_get, 2},
   {"R_swig_ScriptingNode_type_set", (DL_FUNC) &R_swig_ScriptingNode_type_set, 2},
   {"R_swig_WaterWatchEnums_Do_get", (DL_FUNC) &R_swig_WaterWatchEnums_Do_get, 1},
   {"R_swig_vector_scriptingnode_capacity", (DL_FUNC) &R_swig_vector_scriptingnode_capacity, 2},
   {"R_swig_vector_pair_timeseries_resize__SWIG_0", (DL_FUNC) &R_swig_vector_pair_timeseries_resize__SWIG_0, 2},
   {"R_swig_WaterWatch_Encode_2D_to_1D", (DL_FUNC) &R_swig_WaterWatch_Encode_2D_to_1D, 4},
   {"R_swig_vector_pair_timeseries_resize__SWIG_1", (DL_FUNC) &R_swig_vector_pair_timeseries_resize__SWIG_1, 3},
   {"R_swig_vector_background_clear", (DL_FUNC) &R_swig_vector_background_clear, 1},
   {"R_swig_pair_double_double_first_get", (DL_FUNC) &R_swig_pair_double_double_first_get, 2},
   {"R_swig_delete_pair_double_double", (DL_FUNC) &R_swig_delete_pair_double_double, 1},
   {"R_swig_WaterWatch_GetTemporaryFilePath", (DL_FUNC) &R_swig_WaterWatch_GetTemporaryFilePath, 2},
   {"R_swig_MapBackground_Interop_minValue_set", (DL_FUNC) &R_swig_MapBackground_Interop_minValue_set, 2},
   {"R_swig_MapBackground_Interop_min_color_set", (DL_FUNC) &R_swig_MapBackground_Interop_min_color_set, 2},
   {"R_swig_WaterWatch_DoScript", (DL_FUNC) &R_swig_WaterWatch_DoScript, 2},
   {"R_swig_WaterWatchEnums_Reference_get", (DL_FUNC) &R_swig_WaterWatchEnums_Reference_get, 1},
   {"R_swig_vector_string___setitem__", (DL_FUNC) &R_swig_vector_string___setitem__, 3},
   {"R_swig_vector_pair_timeseries_capacity", (DL_FUNC) &R_swig_vector_pair_timeseries_capacity, 2},
   {"R_swig_new_SharedString__SWIG_0", (DL_FUNC) &R_swig_new_SharedString__SWIG_0, 0},
   {"R_swig_new_SharedString__SWIG_1", (DL_FUNC) &R_swig_new_SharedString__SWIG_1, 2},
   {"R_swig_WaterWatchEnums_Case_get", (DL_FUNC) &R_swig_WaterWatchEnums_Case_get, 1},
   {"R_swig_new_SharedString__SWIG_2", (DL_FUNC) &R_swig_new_SharedString__SWIG_2, 1},
   {"R_swig_vector_float_size", (DL_FUNC) &R_swig_vector_float_size, 2},
   {"R_swig_vector_string_get_allocator", (DL_FUNC) &R_swig_vector_string_get_allocator, 2},
   {"R_swig_SharedMatrix_GetMaxValue", (DL_FUNC) &R_swig_SharedMatrix_GetMaxValue, 2},
   {"R_swig_vector_scriptingnode___delslice__", (DL_FUNC) &R_swig_vector_scriptingnode___delslice__, 3},
   {"R_swig_cweeDateTime_day_get", (DL_FUNC) &R_swig_cweeDateTime_day_get, 2},
   {"R_swig_WaterWatchEnums_Constant_get", (DL_FUNC) &R_swig_WaterWatchEnums_Constant_get, 1},
   {"R_swig_pair_string_string_second_get", (DL_FUNC) &R_swig_pair_string_string_second_get, 2},
   {"R_swig_MapIcon_Interop_color_get", (DL_FUNC) &R_swig_MapIcon_Interop_color_get, 1},
   {"R_swig_vector_string_capacity", (DL_FUNC) &R_swig_vector_string_capacity, 2},
   {"R_swig_map_int_icon_count", (DL_FUNC) &R_swig_map_int_icon_count, 3},
   {"R_swig_vector_double_front", (DL_FUNC) &R_swig_vector_double_front, 2},
   {"R_swig_new_SharedTimeSeriesPattern__SWIG_0", (DL_FUNC) &R_swig_new_SharedTimeSeriesPattern__SWIG_0, 0},
   {"R_swig_WaterWatchEnums_While_get", (DL_FUNC) &R_swig_WaterWatchEnums_While_get, 1},
   {"R_swig_new_SharedTimeSeriesPattern__SWIG_1", (DL_FUNC) &R_swig_new_SharedTimeSeriesPattern__SWIG_1, 2},
   {"R_swig_SharedTimeSeriesPattern_GetTimeSeries", (DL_FUNC) &R_swig_SharedTimeSeriesPattern_GetTimeSeries, 2},
   {"R_swig_vector_background___getitem__", (DL_FUNC) &R_swig_vector_background___getitem__, 3},
   {"R_swig_new_SharedTimeSeriesPattern__SWIG_2", (DL_FUNC) &R_swig_new_SharedTimeSeriesPattern__SWIG_2, 1},
   {"R_swig_WaterWatchEnums_Inline_Map_get", (DL_FUNC) &R_swig_WaterWatchEnums_Inline_Map_get, 1},
   {"R_swig_map_int_background_swap", (DL_FUNC) &R_swig_map_int_background_swap, 2},
   {"R_swig_MapIcon_Interop_IconPathGeometry_get", (DL_FUNC) &R_swig_MapIcon_Interop_IconPathGeometry_get, 2},
   {"R_swig_MapPolyline_Interop_coordinates_set", (DL_FUNC) &R_swig_MapPolyline_Interop_coordinates_set, 2},
   {"R_swig_ScriptingNode_typeHint_set", (DL_FUNC) &R_swig_ScriptingNode_typeHint_set, 2},
   {"R_swig_WaterWatchEnums_Equation_get", (DL_FUNC) &R_swig_WaterWatchEnums_Equation_get, 1},
   {"R_swig_vector_float_clear", (DL_FUNC) &R_swig_vector_float_clear, 1},
   {"R_swig_vector_pair_double_double_append", (DL_FUNC) &R_swig_vector_pair_double_double_append, 2},
   {"R_swig_vector_colors___setslice__", (DL_FUNC) &R_swig_vector_colors___setslice__, 4},
   {"R_swig_WaterWatchEnums_Assign_Retroactively_get", (DL_FUNC) &R_swig_WaterWatchEnums_Assign_Retroactively_get, 1},
   {"R_swig_WaterWatchEnums_Fun_Call_get", (DL_FUNC) &R_swig_WaterWatchEnums_Fun_Call_get, 1},
   {"R_swig_SharedTimeSeriesPattern_AppendData", (DL_FUNC) &R_swig_SharedTimeSeriesPattern_AppendData, 3},
   {"R_swig_ScriptingNode_depth_set", (DL_FUNC) &R_swig_ScriptingNode_depth_set, 2},
   {"R_swig_vector_pair_timeseries_size", (DL_FUNC) &R_swig_vector_pair_timeseries_size, 2},
   {"R_swig_vector_pair_double_double_back", (DL_FUNC) &R_swig_vector_pair_double_double_back, 2},
   {"R_swig_vector_pair_timeseries___setitem__", (DL_FUNC) &R_swig_vector_pair_timeseries___setitem__, 3},
   {"R_swig_delete_MapPolyline_Interop", (DL_FUNC) &R_swig_delete_MapPolyline_Interop, 1},
   {"R_swig_vector_string_size", (DL_FUNC) &R_swig_vector_string_size, 2},
   {"R_swig_vector_scriptingnode_resize__SWIG_0", (DL_FUNC) &R_swig_vector_scriptingnode_resize__SWIG_0, 2},
   {"R_swig_cweeDateTime_year_get", (DL_FUNC) &R_swig_cweeDateTime_year_get, 2},
   {"R_swig_vector_double___len__", (DL_FUNC) &R_swig_vector_double___len__, 2},
   {"R_swig_vector_double_pop_back", (DL_FUNC) &R_swig_vector_double_pop_back, 1},
   {"R_swig_vector_scriptingnode_resize__SWIG_1", (DL_FUNC) &R_swig_vector_scriptingnode_resize__SWIG_1, 3},
   {"R_swig_ScriptingNode_endLine_get", (DL_FUNC) &R_swig_ScriptingNode_endLine_get, 2},
   {"R_swig_vector_background___setslice__", (DL_FUNC) &R_swig_vector_background___setslice__, 4},
   {"R_swig_vector_colors___setitem__", (DL_FUNC) &R_swig_vector_colors___setitem__, 3},
   {"R_swig_new_Color_Interop__SWIG_0", (DL_FUNC) &R_swig_new_Color_Interop__SWIG_0, 0},
   {"R_swig_delete_pair_bool_pair_string_string", (DL_FUNC) &R_swig_delete_pair_bool_pair_string_string, 1},
   {"R_swig_MapBackground_Interop_highQuality_get", (DL_FUNC) &R_swig_MapBackground_Interop_highQuality_get, 2},
   {"R_swig_new_Color_Interop__SWIG_1", (DL_FUNC) &R_swig_new_Color_Interop__SWIG_1, 1},
   {"R_swig_vector_colors_size", (DL_FUNC) &R_swig_vector_colors_size, 2},
   {"R_swig_map_int_polyline_count", (DL_FUNC) &R_swig_map_int_polyline_count, 3},
   {"R_swig_Color_Interop_A_set", (DL_FUNC) &R_swig_Color_Interop_A_set, 2},
   {"R_swig_new_Color_Interop__SWIG_2", (DL_FUNC) &R_swig_new_Color_Interop__SWIG_2, 4},
   {"R_swig_map_int_icon_erase", (DL_FUNC) &R_swig_map_int_icon_erase, 3},
   {"R_swig_vector_background___delitem__", (DL_FUNC) &R_swig_vector_background___delitem__, 2},
   {"R_swig_vector_colors___getslice__", (DL_FUNC) &R_swig_vector_colors___getslice__, 3},
   {"R_swig_delete_ScriptEngine", (DL_FUNC) &R_swig_delete_ScriptEngine, 1},
   {"R_swig_vector_pair_timeseries_append", (DL_FUNC) &R_swig_vector_pair_timeseries_append, 2},
   {"R_swig_vector_colors_clear", (DL_FUNC) &R_swig_vector_colors_clear, 1},
   {"R_swig_SharedMatrix_GetKnotSeries", (DL_FUNC) &R_swig_SharedMatrix_GetKnotSeries, 8},
   {"R_swig_cweeDateTime_minute_set", (DL_FUNC) &R_swig_cweeDateTime_minute_set, 2},
   {"R_swig_delete_vector_string", (DL_FUNC) &R_swig_delete_vector_string, 1},
   {"R_swig_WaterWatch_GetNanosecondsSinceStart", (DL_FUNC) &R_swig_WaterWatch_GetNanosecondsSinceStart, 1},
   {"R_swig_ScriptEngine_CompatibleFunctions", (DL_FUNC) &R_swig_ScriptEngine_CompatibleFunctions, 3},
   {"R_swig_vector_background___getslice__", (DL_FUNC) &R_swig_vector_background___getslice__, 3},
   {"R_swig_new_vector_pair_timeseries__SWIG_0", (DL_FUNC) &R_swig_new_vector_pair_timeseries__SWIG_0, 0},
   {"R_swig_vector_colors_push_back", (DL_FUNC) &R_swig_vector_colors_push_back, 2},
   {"R_swig_WaterWatchEnums_Continue_get", (DL_FUNC) &R_swig_WaterWatchEnums_Continue_get, 1},
   {"R_swig_new_vector_pair_timeseries__SWIG_1", (DL_FUNC) &R_swig_new_vector_pair_timeseries__SWIG_1, 1},
   {"R_swig_WaterWatch_DoScriptImmediately", (DL_FUNC) &R_swig_WaterWatch_DoScriptImmediately, 2},
   {"R_swig_vector_double_capacity", (DL_FUNC) &R_swig_vector_double_capacity, 2},
   {"R_swig_new_vector_pair_timeseries__SWIG_2", (DL_FUNC) &R_swig_new_vector_pair_timeseries__SWIG_2, 1},
   {"R_swig_delete_pair_timeseries", (DL_FUNC) &R_swig_delete_pair_timeseries, 1},
   {"R_swig_vector_double_swap", (DL_FUNC) &R_swig_vector_double_swap, 2},
   {"R_swig_new_vector_pair_timeseries__SWIG_3", (DL_FUNC) &R_swig_new_vector_pair_timeseries__SWIG_3, 2},
   {"R_swig_map_int_polyline_erase", (DL_FUNC) &R_swig_map_int_polyline_erase, 3},
   {"R_swig_delete_Color_Interop", (DL_FUNC) &R_swig_delete_Color_Interop, 1},
   {"R_swig_new_pair_double_double__SWIG_0", (DL_FUNC) &R_swig_new_pair_double_double__SWIG_0, 0},
   {"R_swig_pair_bool_pair_string_string_first_set", (DL_FUNC) &R_swig_pair_bool_pair_string_string_first_set, 2},
   {"R_swig_Color_Interop_G_set", (DL_FUNC) &R_swig_Color_Interop_G_set, 2},
   {"R_swig_new_pair_double_double__SWIG_1", (DL_FUNC) &R_swig_new_pair_double_double__SWIG_1, 2},
   {"R_swig_WaterWatchEnums_Postfix_get", (DL_FUNC) &R_swig_WaterWatchEnums_Postfix_get, 1},
   {"R_swig_new_pair_double_double__SWIG_2", (DL_FUNC) &R_swig_new_pair_double_double__SWIG_2, 2},
   {"R_swig_vector_float___getitem__", (DL_FUNC) &R_swig_vector_float___getitem__, 3},
   {"R_swig_new_pair_double_double__SWIG_3", (DL_FUNC) &R_swig_new_pair_double_double__SWIG_3, 1},
   {"R_swig_vector_float___len__", (DL_FUNC) &R_swig_vector_float___len__, 2},
   {"R_swig_delete_vector_double", (DL_FUNC) &R_swig_delete_vector_double, 1},
   {"R_swig_vector_background___nonzero__", (DL_FUNC) &R_swig_vector_background___nonzero__, 2},
   {"R_swig_WaterWatchEnums_Global_Decl_get", (DL_FUNC) &R_swig_WaterWatchEnums_Global_Decl_get, 1},
   {"R_swig_vector_background_assign", (DL_FUNC) &R_swig_vector_background_assign, 3},
   {"R_swig_MapIcon_Interop_Label_get", (DL_FUNC) &R_swig_MapIcon_Interop_Label_get, 2},
   {"R_swig_MapLayer_Interop_icons_set", (DL_FUNC) &R_swig_MapLayer_Interop_icons_set, 2},
   {"R_swig_vector_float_append", (DL_FUNC) &R_swig_vector_float_append, 2},
   {"R_swig_vector_background_front", (DL_FUNC) &R_swig_vector_background_front, 2},
   {"R_swig_ScriptEngine_Cast_VectorFloats", (DL_FUNC) &R_swig_ScriptEngine_Cast_VectorFloats, 3},
   {"R_swig_vector_scriptingnode_reserve", (DL_FUNC) &R_swig_vector_scriptingnode_reserve, 2},
   {"R_swig_vector_scriptingnode_clear", (DL_FUNC) &R_swig_vector_scriptingnode_clear, 1},
   {"R_swig_WaterWatchEnums_Array_Call_get", (DL_FUNC) &R_swig_WaterWatchEnums_Array_Call_get, 1},
   {"R_swig_new_vector_float__SWIG_0", (DL_FUNC) &R_swig_new_vector_float__SWIG_0, 0},
   {"R_swig_MapPolyline_Interop_dashed_set", (DL_FUNC) &R_swig_MapPolyline_Interop_dashed_set, 2},
   {"R_swig_WaterWatchEnums_Binary_get", (DL_FUNC) &R_swig_WaterWatchEnums_Binary_get, 1},
   {"R_swig_new_vector_float__SWIG_1", (DL_FUNC) &R_swig_new_vector_float__SWIG_1, 1},
   {"R_swig_MapPolyline_Interop_thickness_set", (DL_FUNC) &R_swig_MapPolyline_Interop_thickness_set, 2},
   {"R_swig_new_vector_float__SWIG_2", (DL_FUNC) &R_swig_new_vector_float__SWIG_2, 1},
   {"R_swig_SharedMatrix_GetMinValue", (DL_FUNC) &R_swig_SharedMatrix_GetMinValue, 2},
   {"R_swig_new_vector_float__SWIG_3", (DL_FUNC) &R_swig_new_vector_float__SWIG_3, 2},
   {"R_swig_delete_pair_string_vector_string", (DL_FUNC) &R_swig_delete_pair_string_vector_string, 1},
   {"R_swig_delete_pair_string_string", (DL_FUNC) &R_swig_delete_pair_string_string, 1},
   {"R_swig_vector_float___delitem__", (DL_FUNC) &R_swig_vector_float___delitem__, 2},
   {"R_swig_map_int_polyline_size", (DL_FUNC) &R_swig_map_int_polyline_size, 2},
   {"R_swig_SharedMatrix_Index", (DL_FUNC) &R_swig_SharedMatrix_Index, 2},
   {"R_swig_SharedTimeSeriesPattern_Index", (DL_FUNC) &R_swig_SharedTimeSeriesPattern_Index, 2},
   {"R_swig_WaterWatchEnums_File_get", (DL_FUNC) &R_swig_WaterWatchEnums_File_get, 1},
   {"R_swig_delete_Awaiter", (DL_FUNC) &R_swig_delete_Awaiter, 1},
   {"R_swig_new_MapIcon_Interop", (DL_FUNC) &R_swig_new_MapIcon_Interop, 0},
   {"R_swig_vector_colors___len__", (DL_FUNC) &R_swig_vector_colors___len__, 2},
   {"R_swig_pair_timeseries_first_get", (DL_FUNC) &R_swig_pair_timeseries_first_get, 1},
   {"R_swig_vector_double___setslice__", (DL_FUNC) &R_swig_vector_double___setslice__, 4},
   {"R_swig_vector_scriptingnode_swap", (DL_FUNC) &R_swig_vector_scriptingnode_swap, 2},
   {"R_swig_vector_background_size", (DL_FUNC) &R_swig_vector_background_size, 2},
   {"R_swig_new_MapLayer_Interop", (DL_FUNC) &R_swig_new_MapLayer_Interop, 0},
   {"R_swig_uwp_patternInterpType_SPLINE_get", (DL_FUNC) &R_swig_uwp_patternInterpType_SPLINE_get, 1},
   {"R_swig_vector_float_front", (DL_FUNC) &R_swig_vector_float_front, 2},
   {"R_swig_vector_background_push_back", (DL_FUNC) &R_swig_vector_background_push_back, 2},
   {"R_swig_new_pair_string_string__SWIG_0", (DL_FUNC) &R_swig_new_pair_string_string__SWIG_0, 0},
   {"R_swig_vector_double_assign", (DL_FUNC) &R_swig_vector_double_assign, 3},
   {"R_swig_vector_pair_double_double___getitem__", (DL_FUNC) &R_swig_vector_pair_double_double___getitem__, 3},
   {"R_swig_map_int_background_clear", (DL_FUNC) &R_swig_map_int_background_clear, 1},
   {"R_swig_new_pair_string_string__SWIG_1", (DL_FUNC) &R_swig_new_pair_string_string__SWIG_1, 2},
   {"R_swig_MapLayer_Interop_polylines_get", (DL_FUNC) &R_swig_MapLayer_Interop_polylines_get, 1},
   {"R_swig_new_pair_string_string__SWIG_2", (DL_FUNC) &R_swig_new_pair_string_string__SWIG_2, 2},
   {"R_swig_cweeDateTime_milliseconds_set", (DL_FUNC) &R_swig_cweeDateTime_milliseconds_set, 2},
   {"R_swig_new_pair_string_string__SWIG_3", (DL_FUNC) &R_swig_new_pair_string_string__SWIG_3, 1},
   {"R_swig_vector_double_back", (DL_FUNC) &R_swig_vector_double_back, 2},
   {"R_swig_vector_pair_timeseries___delslice__", (DL_FUNC) &R_swig_vector_pair_timeseries___delslice__, 3},
   {"R_swig_uwp_color_RED_get", (DL_FUNC) &R_swig_uwp_color_RED_get, 1},
   {"R_swig_MapIcon_Interop_size_get", (DL_FUNC) &R_swig_MapIcon_Interop_size_get, 2},
   {"R_swig_pair_timeseries_second_set", (DL_FUNC) &R_swig_pair_timeseries_second_set, 2},
   {"R_swig_vector_double___getslice__", (DL_FUNC) &R_swig_vector_double___getslice__, 3},
   {"R_swig_vector_float___nonzero__", (DL_FUNC) &R_swig_vector_float___nonzero__, 2},
   {"R_swig_vector_double_empty", (DL_FUNC) &R_swig_vector_double_empty, 2},
   {"R_swig_delete_MapLayer_Interop", (DL_FUNC) &R_swig_delete_MapLayer_Interop, 1},
   {"R_swig_pair_bool_pair_string_string_second_set", (DL_FUNC) &R_swig_pair_bool_pair_string_string_second_set, 2},
   {"R_swig_vector_float___setslice__", (DL_FUNC) &R_swig_vector_float___setslice__, 4},
   {"R_swig_vector_double___setitem__", (DL_FUNC) &R_swig_vector_double___setitem__, 3},
   {"R_swig_vector_colors_front", (DL_FUNC) &R_swig_vector_colors_front, 2},
   {"R_swig_SharedMatrix_GetMinX", (DL_FUNC) &R_swig_SharedMatrix_GetMinX, 2},
   {"R_swig_SharedMatrix_GetMinY", (DL_FUNC) &R_swig_SharedMatrix_GetMinY, 2},
   {"R_swig_vector_pair_double_double___delitem__", (DL_FUNC) &R_swig_vector_pair_double_double___delitem__, 2},
   {"R_swig_MapIcon_Interop_HideOnCollision_get", (DL_FUNC) &R_swig_MapIcon_Interop_HideOnCollision_get, 2},
   {"R_swig_pair_string_vector_string_second_get", (DL_FUNC) &R_swig_pair_string_vector_string_second_get, 1},
   {"R_swig_vector_pair_timeseries___len__", (DL_FUNC) &R_swig_vector_pair_timeseries___len__, 2},
   {"R_swig_delete_map_int_polyline", (DL_FUNC) &R_swig_delete_map_int_polyline, 1},
   {"R_swig_new_SharedMatrix__SWIG_0", (DL_FUNC) &R_swig_new_SharedMatrix__SWIG_0, 0},
   {"R_swig_SharedMatrix_GetNumValues", (DL_FUNC) &R_swig_SharedMatrix_GetNumValues, 2},
   {"R_swig_new_SharedMatrix__SWIG_1", (DL_FUNC) &R_swig_new_SharedMatrix__SWIG_1, 2},
   {"R_swig_new_SharedMatrix__SWIG_2", (DL_FUNC) &R_swig_new_SharedMatrix__SWIG_2, 1},
   {"R_swig_cweeDateTime_unixTime_set", (DL_FUNC) &R_swig_cweeDateTime_unixTime_set, 2},
   {"R_swig_delete_pair_int_pair_string_vector_string", (DL_FUNC) &R_swig_delete_pair_int_pair_string_vector_string, 1},
   {"R_swig_Awaiter_data_m_get", (DL_FUNC) &R_swig_Awaiter_data_m_get, 1},
   {"R_swig_new_SharedMatrix__SWIG_3", (DL_FUNC) &R_swig_new_SharedMatrix__SWIG_3, 1},
   {"R_swig_ScriptEngine_Cast_MapLayer", (DL_FUNC) &R_swig_ScriptEngine_Cast_MapLayer, 3},
   {"R_swig_new_MapPolyline_Interop", (DL_FUNC) &R_swig_new_MapPolyline_Interop, 0},
   {"R_swig_vector_float___getslice__", (DL_FUNC) &R_swig_vector_float___getslice__, 3},
   {"R_swig_WaterWatch_GetBestMatch", (DL_FUNC) &R_swig_WaterWatch_GetBestMatch, 3},
   {NULL, NULL, 0}
};

extern "C" SWIGEXPORT void R_init_Conv(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);


SWIG_init();
SWIG_InitializeModule(0);


}

