//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.1.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class WaterWatch : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal WaterWatch(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(WaterWatch obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(WaterWatch obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~WaterWatch() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          ConvPINVOKE.delete_WaterWatch(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public static void SubmitToast(string title, string content) {
    ConvPINVOKE.WaterWatch_SubmitToast(title, content);
    if (ConvPINVOKE.SWIGPendingException.Pending) throw ConvPINVOKE.SWIGPendingException.Retrieve();
  }

  public static pair_bool_pair_string_string TryGetToast() {
    pair_bool_pair_string_string ret = new pair_bool_pair_string_string(ConvPINVOKE.WaterWatch_TryGetToast(), true);
    return ret;
  }

  public static pair_int_pair_string_vector_string TryGetAppRequest() {
    pair_int_pair_string_vector_string ret = new pair_int_pair_string_vector_string(ConvPINVOKE.WaterWatch_TryGetAppRequest(), true);
    return ret;
  }

  public static void CompleteAppRequest(int ID, string reply) {
    ConvPINVOKE.WaterWatch_CompleteAppRequest(ID, reply);
    if (ConvPINVOKE.SWIGPendingException.Pending) throw ConvPINVOKE.SWIGPendingException.Retrieve();
  }

  public static string GetDataDirectory() {
    string ret = ConvPINVOKE.WaterWatch_GetDataDirectory();
    return ret;
  }

  public static void SetDataDirectory(string dir) {
    ConvPINVOKE.WaterWatch_SetDataDirectory(dir);
    if (ConvPINVOKE.SWIGPendingException.Pending) throw ConvPINVOKE.SWIGPendingException.Retrieve();
  }

  public static string GetTemporaryFilePath(string extension) {
    string ret = ConvPINVOKE.WaterWatch_GetTemporaryFilePath(extension);
    if (ConvPINVOKE.SWIGPendingException.Pending) throw ConvPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static pair_double_double GeocodeAddress(string address) {
    pair_double_double ret = new pair_double_double(ConvPINVOKE.WaterWatch_GeocodeAddress__SWIG_0(address), true);
    if (ConvPINVOKE.SWIGPendingException.Pending) throw ConvPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string GeocodeAddress(double longitude, double latitude) {
    string ret = ConvPINVOKE.WaterWatch_GeocodeAddress__SWIG_1(longitude, latitude);
    return ret;
  }

  public static double GeocodeElevation(double longitude, double latitude) {
    double ret = ConvPINVOKE.WaterWatch_GeocodeElevation(longitude, latitude);
    return ret;
  }

  public static pair_double_double ValidateCoordinates(double longitude, double latitude) {
    pair_double_double ret = new pair_double_double(ConvPINVOKE.WaterWatch_ValidateCoordinates(longitude, latitude), true);
    return ret;
  }

  public static double Encode_2D_to_1D(double x, double y, double H) {
    double ret = ConvPINVOKE.WaterWatch_Encode_2D_to_1D(x, y, H);
    return ret;
  }

  public static pair_double_double Decode_1D_to_2D(double l, double H) {
    pair_double_double ret = new pair_double_double(ConvPINVOKE.WaterWatch_Decode_1D_to_2D(l, H), true);
    return ret;
  }

  public static vector_float PredictNext(vector_double data, int nextN) {
    vector_float ret = new vector_float(ConvPINVOKE.WaterWatch_PredictNext(vector_double.getCPtr(data), nextN), true);
    if (ConvPINVOKE.SWIGPendingException.Pending) throw ConvPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static cweeDateTime getCurrentTime() {
    cweeDateTime ret = new cweeDateTime(ConvPINVOKE.WaterWatch_getCurrentTime(), true);
    return ret;
  }

  public static int RandomInt(int min, int max) {
    int ret = ConvPINVOKE.WaterWatch_RandomInt(min, max);
    return ret;
  }

  public static float RandomFloat(float min, float max) {
    float ret = ConvPINVOKE.WaterWatch_RandomFloat(min, max);
    return ret;
  }

  public static string GetBestMatch(string input, vector_string options) {
    string ret = ConvPINVOKE.WaterWatch_GetBestMatch(input, vector_string.getCPtr(options));
    if (ConvPINVOKE.SWIGPendingException.Pending) throw ConvPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int GetNumMultithreadingCores() {
    int ret = ConvPINVOKE.WaterWatch_GetNumMultithreadingCores();
    return ret;
  }

  public static int GetNumLogicalCoresOnMachine() {
    int ret = ConvPINVOKE.WaterWatch_GetNumLogicalCoresOnMachine();
    return ret;
  }

  public static int GetNumPhysicalCoresOnMachine() {
    int ret = ConvPINVOKE.WaterWatch_GetNumPhysicalCoresOnMachine();
    return ret;
  }

  public static float GetPercentMemoryUsedOfMachine() {
    float ret = ConvPINVOKE.WaterWatch_GetPercentMemoryUsedOfMachine();
    return ret;
  }

  public static float GetPercentCpuUsedOfMachine() {
    float ret = ConvPINVOKE.WaterWatch_GetPercentCpuUsedOfMachine();
    return ret;
  }

  public static Awaiter DoScript(string command) {
    Awaiter ret = new Awaiter(ConvPINVOKE.WaterWatch_DoScript(command), true);
    if (ConvPINVOKE.SWIGPendingException.Pending) throw ConvPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string DoScriptImmediately(string command) {
    string ret = ConvPINVOKE.WaterWatch_DoScriptImmediately(command);
    if (ConvPINVOKE.SWIGPendingException.Pending) throw ConvPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void AddToLog(string filePath, string content) {
    ConvPINVOKE.WaterWatch_AddToLog(filePath, content);
    if (ConvPINVOKE.SWIGPendingException.Pending) throw ConvPINVOKE.SWIGPendingException.Retrieve();
  }

  public static double GetNanosecondsSinceStart() {
    double ret = ConvPINVOKE.WaterWatch_GetNanosecondsSinceStart();
    return ret;
  }

  public WaterWatch() : this(ConvPINVOKE.new_WaterWatch(), true) {
  }

}
