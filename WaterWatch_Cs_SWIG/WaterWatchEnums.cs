//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.1.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class WaterWatchEnums : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal WaterWatchEnums(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(WaterWatchEnums obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(WaterWatchEnums obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~WaterWatchEnums() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          ConvPINVOKE.delete_WaterWatchEnums(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public WaterWatchEnums() : this(ConvPINVOKE.new_WaterWatchEnums(), true) {
  }

  public enum ScriptNodeType {
    Id = 0,
    Fun_Call = 1,
    Unused_Return_Fun_Call = 2,
    Arg_List = 3,
    Equation = 4,
    Var_Decl = 5,
    Assign_Decl = 6,
    Array_Call = 7,
    Dot_Access = 8,
    Lambda = 9,
    Block = 10,
    Scopeless_Block = 11,
    Def = 12,
    While = 13,
    If = 14,
    For = 15,
    Ranged_For = 16,
    Inline_Array = 17,
    Inline_Map = 18,
    Return = 19,
    File = 20,
    Prefix = 21,
    Break = 22,
    Continue = 23,
    Map_Pair = 24,
    Value_Range = 25,
    Inline_Range = 26,
    Do = 27,
    Try = 28,
    Catch = 29,
    Finally = 30,
    Method = 31,
    Attr_Decl = 32,
    Logical_And = 33,
    Logical_Or = 34,
    Reference = 35,
    Switch = 36,
    Case = 37,
    Default = 38,
    Noop = 39,
    Class = 40,
    Binary = 41,
    Arg = 42,
    Global_Decl = 43,
    Constant = 44,
    Compiled = 45,
    ControlBlock = 46,
    Postfix = 47,
    Assign_Retroactively = 48,
    Error = 49
  }

}
