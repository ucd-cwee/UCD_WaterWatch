/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.1.1
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


#define SWIG_VERSION 0x040101
#define SWIGCSHARP

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#include <stdlib.h>
#include <string.h>
#include <stdio.h>


/* Support for throwing C# exceptions from C/C++. There are two types: 
 * Exceptions that take a message and ArgumentExceptions that take a message and a parameter name. */
typedef enum {
  SWIG_CSharpApplicationException,
  SWIG_CSharpArithmeticException,
  SWIG_CSharpDivideByZeroException,
  SWIG_CSharpIndexOutOfRangeException,
  SWIG_CSharpInvalidCastException,
  SWIG_CSharpInvalidOperationException,
  SWIG_CSharpIOException,
  SWIG_CSharpNullReferenceException,
  SWIG_CSharpOutOfMemoryException,
  SWIG_CSharpOverflowException,
  SWIG_CSharpSystemException
} SWIG_CSharpExceptionCodes;

typedef enum {
  SWIG_CSharpArgumentException,
  SWIG_CSharpArgumentNullException,
  SWIG_CSharpArgumentOutOfRangeException
} SWIG_CSharpExceptionArgumentCodes;

typedef void (SWIGSTDCALL* SWIG_CSharpExceptionCallback_t)(const char *);
typedef void (SWIGSTDCALL* SWIG_CSharpExceptionArgumentCallback_t)(const char *, const char *);

typedef struct {
  SWIG_CSharpExceptionCodes code;
  SWIG_CSharpExceptionCallback_t callback;
} SWIG_CSharpException_t;

typedef struct {
  SWIG_CSharpExceptionArgumentCodes code;
  SWIG_CSharpExceptionArgumentCallback_t callback;
} SWIG_CSharpExceptionArgument_t;

static SWIG_CSharpException_t SWIG_csharp_exceptions[] = {
  { SWIG_CSharpApplicationException, NULL },
  { SWIG_CSharpArithmeticException, NULL },
  { SWIG_CSharpDivideByZeroException, NULL },
  { SWIG_CSharpIndexOutOfRangeException, NULL },
  { SWIG_CSharpInvalidCastException, NULL },
  { SWIG_CSharpInvalidOperationException, NULL },
  { SWIG_CSharpIOException, NULL },
  { SWIG_CSharpNullReferenceException, NULL },
  { SWIG_CSharpOutOfMemoryException, NULL },
  { SWIG_CSharpOverflowException, NULL },
  { SWIG_CSharpSystemException, NULL }
};

static SWIG_CSharpExceptionArgument_t SWIG_csharp_exceptions_argument[] = {
  { SWIG_CSharpArgumentException, NULL },
  { SWIG_CSharpArgumentNullException, NULL },
  { SWIG_CSharpArgumentOutOfRangeException, NULL }
};

static void SWIGUNUSED SWIG_CSharpSetPendingException(SWIG_CSharpExceptionCodes code, const char *msg) {
  SWIG_CSharpExceptionCallback_t callback = SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions)/sizeof(SWIG_CSharpException_t)) {
    callback = SWIG_csharp_exceptions[code].callback;
  }
  callback(msg);
}

static void SWIGUNUSED SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpExceptionArgumentCodes code, const char *msg, const char *param_name) {
  SWIG_CSharpExceptionArgumentCallback_t callback = SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions_argument)/sizeof(SWIG_CSharpExceptionArgument_t)) {
    callback = SWIG_csharp_exceptions_argument[code].callback;
  }
  callback(msg, param_name);
}


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionCallbacks_Conv(
                                                SWIG_CSharpExceptionCallback_t applicationCallback,
                                                SWIG_CSharpExceptionCallback_t arithmeticCallback,
                                                SWIG_CSharpExceptionCallback_t divideByZeroCallback, 
                                                SWIG_CSharpExceptionCallback_t indexOutOfRangeCallback, 
                                                SWIG_CSharpExceptionCallback_t invalidCastCallback,
                                                SWIG_CSharpExceptionCallback_t invalidOperationCallback,
                                                SWIG_CSharpExceptionCallback_t ioCallback,
                                                SWIG_CSharpExceptionCallback_t nullReferenceCallback,
                                                SWIG_CSharpExceptionCallback_t outOfMemoryCallback, 
                                                SWIG_CSharpExceptionCallback_t overflowCallback, 
                                                SWIG_CSharpExceptionCallback_t systemCallback) {
  SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback = applicationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpArithmeticException].callback = arithmeticCallback;
  SWIG_csharp_exceptions[SWIG_CSharpDivideByZeroException].callback = divideByZeroCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIndexOutOfRangeException].callback = indexOutOfRangeCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidCastException].callback = invalidCastCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidOperationException].callback = invalidOperationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIOException].callback = ioCallback;
  SWIG_csharp_exceptions[SWIG_CSharpNullReferenceException].callback = nullReferenceCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOutOfMemoryException].callback = outOfMemoryCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOverflowException].callback = overflowCallback;
  SWIG_csharp_exceptions[SWIG_CSharpSystemException].callback = systemCallback;
}

#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionArgumentCallbacks_Conv(
                                                SWIG_CSharpExceptionArgumentCallback_t argumentCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentNullCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentOutOfRangeCallback) {
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback = argumentCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentNullException].callback = argumentNullCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentOutOfRangeException].callback = argumentOutOfRangeCallback;
}


/* Callback for returning strings to C# without leaking memory */
typedef char * (SWIGSTDCALL* SWIG_CSharpStringHelperCallback)(const char *);
static SWIG_CSharpStringHelperCallback SWIG_csharp_string_callback = NULL;


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterStringCallback_Conv(SWIG_CSharpStringHelperCallback callback) {
  SWIG_csharp_string_callback = callback;
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) do { if (!(expr)) {SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, msg, ""); return nullreturn; } } while (0)

/* SWIG Errors applicable to all language modules, values are reserved from -1 to -99 */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13



#ifdef __cplusplus
#include <utility>
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigSmartPointer {
    T *ptr;
    SwigSmartPointer(T *p) : ptr(p) { }
    ~SwigSmartPointer() { delete ptr; }
    SwigSmartPointer& operator=(SwigSmartPointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
    void reset(T *p) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = p; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigSmartPointer tmp(new T(t)); pointer = tmp; return *this; }
#if __cplusplus >=201103L
  SwigValueWrapper& operator=(T&& t) { SwigSmartPointer tmp(new T(std::move(t))); pointer = tmp; return *this; }
  operator T&&() const { return std::move(*pointer.ptr); }
#else
  operator T&() const { return *pointer.ptr; }
#endif
  T *operator&() const { return pointer.ptr; }
  static void reset(SwigValueWrapper& t, T *p) { t.pointer.reset(p); }
};

/*
 * SwigValueInit() is a generic initialisation solution as the following approach:
 * 
 *       T c_result = T();
 * 
 * doesn't compile for all types for example:
 * 
 *       unsigned int c_result = unsigned int();
 */
template <typename T> T SwigValueInit() {
  return T();
}

#if __cplusplus >=201103L
# define SWIG_STD_MOVE(OBJ) std::move(OBJ)
#else
# define SWIG_STD_MOVE(OBJ) OBJ
#endif

#endif


#include "../WaterWatch_Cs_SWIG/Header.h"


#include <typeinfo>
#include <stdexcept>


#include <string>


#include <vector>
#include <algorithm>
#include <stdexcept>


#include <map>
#include <algorithm>
#include <stdexcept>


SWIGINTERN void SWIG_CSharpException(int code, const char *msg) {
  if (code == SWIG_ValueError) {
    SWIG_CSharpExceptionArgumentCodes exception_code = SWIG_CSharpArgumentOutOfRangeException;
    SWIG_CSharpSetPendingExceptionArgument(exception_code, msg, 0);
  } else {
    SWIG_CSharpExceptionCodes exception_code = SWIG_CSharpApplicationException;
    switch(code) {
    case SWIG_MemoryError:
      exception_code = SWIG_CSharpOutOfMemoryException;
      break;
    case SWIG_IndexError:
      exception_code = SWIG_CSharpIndexOutOfRangeException;
      break;
    case SWIG_DivisionByZero:
      exception_code = SWIG_CSharpDivideByZeroException;
      break;
    case SWIG_IOError:
      exception_code = SWIG_CSharpIOException;
      break;
    case SWIG_OverflowError:
      exception_code = SWIG_CSharpOverflowException;
      break;
    case SWIG_RuntimeError:
    case SWIG_TypeError:
    case SWIG_SyntaxError:
    case SWIG_SystemError:
    case SWIG_UnknownError:
    default:
      exception_code = SWIG_CSharpApplicationException;
      break;
    }
    SWIG_CSharpSetPendingException(exception_code, msg);
  }
}


#include <typeinfo>
#include <stdexcept>


#include <utility>

SWIGINTERN std::vector< std::string > *new_std_vector_Sl_std_string_Sg___SWIG_2(int capacity){
        std::vector< std::string >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< std::string >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN std::string std_vector_Sl_std_string_Sg__getitemcopy(std::vector< std::string > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< std::string >::value_type const &std_vector_Sl_std_string_Sg__getitem(std::vector< std::string > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__setitem(std::vector< std::string > *self,int index,std::string const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__AddRange(std::vector< std::string > *self,std::vector< std::string > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< std::string > *std_vector_Sl_std_string_Sg__GetRange(std::vector< std::string > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< std::string >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__Insert(std::vector< std::string > *self,int index,std::string const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__InsertRange(std::vector< std::string > *self,int index,std::vector< std::string > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__RemoveAt(std::vector< std::string > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__RemoveRange(std::vector< std::string > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< std::string > *std_vector_Sl_std_string_Sg__Repeat(std::string const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< std::string >(count, value);
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__Reverse__SWIG_0(std::vector< std::string > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__Reverse__SWIG_1(std::vector< std::string > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__SetRange(std::vector< std::string > *self,int index,std::vector< std::string > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN bool std_vector_Sl_std_string_Sg__Contains(std::vector< std::string > *self,std::string const &value){
        return std::find(self->begin(), self->end(), value) != self->end();
      }
SWIGINTERN int std_vector_Sl_std_string_Sg__IndexOf(std::vector< std::string > *self,std::string const &value){
        int index = -1;
        std::vector< std::string >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end())
          index = (int)(it - self->begin());
        return index;
      }
SWIGINTERN int std_vector_Sl_std_string_Sg__LastIndexOf(std::vector< std::string > *self,std::string const &value){
        int index = -1;
        std::vector< std::string >::reverse_iterator rit = std::find(self->rbegin(), self->rend(), value);
        if (rit != self->rend())
          index = (int)(self->rend() - 1 - rit);
        return index;
      }
SWIGINTERN bool std_vector_Sl_std_string_Sg__Remove(std::vector< std::string > *self,std::string const &value){
        std::vector< std::string >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end()) {
          self->erase(it);
          return true;
        }
        return false;
      }

#include <memory>

SWIGINTERN std::vector< float > *new_std_vector_Sl_float_Sg___SWIG_2(int capacity){
        std::vector< float >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< float >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN float std_vector_Sl_float_Sg__getitemcopy(std::vector< float > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< float >::value_type const &std_vector_Sl_float_Sg__getitem(std::vector< float > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_float_Sg__setitem(std::vector< float > *self,int index,float const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_float_Sg__AddRange(std::vector< float > *self,std::vector< float > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< float > *std_vector_Sl_float_Sg__GetRange(std::vector< float > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< float >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_float_Sg__Insert(std::vector< float > *self,int index,float const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_float_Sg__InsertRange(std::vector< float > *self,int index,std::vector< float > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_float_Sg__RemoveAt(std::vector< float > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_float_Sg__RemoveRange(std::vector< float > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< float > *std_vector_Sl_float_Sg__Repeat(float const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< float >(count, value);
      }
SWIGINTERN void std_vector_Sl_float_Sg__Reverse__SWIG_0(std::vector< float > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_float_Sg__Reverse__SWIG_1(std::vector< float > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_float_Sg__SetRange(std::vector< float > *self,int index,std::vector< float > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN bool std_vector_Sl_float_Sg__Contains(std::vector< float > *self,float const &value){
        return std::find(self->begin(), self->end(), value) != self->end();
      }
SWIGINTERN int std_vector_Sl_float_Sg__IndexOf(std::vector< float > *self,float const &value){
        int index = -1;
        std::vector< float >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end())
          index = (int)(it - self->begin());
        return index;
      }
SWIGINTERN int std_vector_Sl_float_Sg__LastIndexOf(std::vector< float > *self,float const &value){
        int index = -1;
        std::vector< float >::reverse_iterator rit = std::find(self->rbegin(), self->rend(), value);
        if (rit != self->rend())
          index = (int)(self->rend() - 1 - rit);
        return index;
      }
SWIGINTERN bool std_vector_Sl_float_Sg__Remove(std::vector< float > *self,float const &value){
        std::vector< float >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end()) {
          self->erase(it);
          return true;
        }
        return false;
      }
SWIGINTERN std::vector< double > *new_std_vector_Sl_double_Sg___SWIG_2(int capacity){
        std::vector< double >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< double >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN double std_vector_Sl_double_Sg__getitemcopy(std::vector< double > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< double >::value_type const &std_vector_Sl_double_Sg__getitem(std::vector< double > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_double_Sg__setitem(std::vector< double > *self,int index,double const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_double_Sg__AddRange(std::vector< double > *self,std::vector< double > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< double > *std_vector_Sl_double_Sg__GetRange(std::vector< double > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< double >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_double_Sg__Insert(std::vector< double > *self,int index,double const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_double_Sg__InsertRange(std::vector< double > *self,int index,std::vector< double > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_double_Sg__RemoveAt(std::vector< double > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_double_Sg__RemoveRange(std::vector< double > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< double > *std_vector_Sl_double_Sg__Repeat(double const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< double >(count, value);
      }
SWIGINTERN void std_vector_Sl_double_Sg__Reverse__SWIG_0(std::vector< double > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_double_Sg__Reverse__SWIG_1(std::vector< double > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_double_Sg__SetRange(std::vector< double > *self,int index,std::vector< double > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN bool std_vector_Sl_double_Sg__Contains(std::vector< double > *self,double const &value){
        return std::find(self->begin(), self->end(), value) != self->end();
      }
SWIGINTERN int std_vector_Sl_double_Sg__IndexOf(std::vector< double > *self,double const &value){
        int index = -1;
        std::vector< double >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end())
          index = (int)(it - self->begin());
        return index;
      }
SWIGINTERN int std_vector_Sl_double_Sg__LastIndexOf(std::vector< double > *self,double const &value){
        int index = -1;
        std::vector< double >::reverse_iterator rit = std::find(self->rbegin(), self->rend(), value);
        if (rit != self->rend())
          index = (int)(self->rend() - 1 - rit);
        return index;
      }
SWIGINTERN bool std_vector_Sl_double_Sg__Remove(std::vector< double > *self,double const &value){
        std::vector< double >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end()) {
          self->erase(it);
          return true;
        }
        return false;
      }
SWIGINTERN std::vector< Pair< cweeDateTime,float > > *new_std_vector_Sl_Pair_Sl_cweeDateTime_Sc_float_Sg__Sg___SWIG_2(int capacity){
        std::vector< Pair< cweeDateTime,float > >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< Pair< cweeDateTime,float > >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN Pair< cweeDateTime,float > std_vector_Sl_Pair_Sl_cweeDateTime_Sc_float_Sg__Sg__getitemcopy(std::vector< Pair< cweeDateTime,float > > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< Pair< cweeDateTime,float > >::value_type const &std_vector_Sl_Pair_Sl_cweeDateTime_Sc_float_Sg__Sg__getitem(std::vector< Pair< cweeDateTime,float > > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_Pair_Sl_cweeDateTime_Sc_float_Sg__Sg__setitem(std::vector< Pair< cweeDateTime,float > > *self,int index,Pair< cweeDateTime,float > const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_Pair_Sl_cweeDateTime_Sc_float_Sg__Sg__AddRange(std::vector< Pair< cweeDateTime,float > > *self,std::vector< Pair< cweeDateTime,float > > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< Pair< cweeDateTime,float > > *std_vector_Sl_Pair_Sl_cweeDateTime_Sc_float_Sg__Sg__GetRange(std::vector< Pair< cweeDateTime,float > > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< Pair< cweeDateTime,float > >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_Pair_Sl_cweeDateTime_Sc_float_Sg__Sg__Insert(std::vector< Pair< cweeDateTime,float > > *self,int index,Pair< cweeDateTime,float > const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_Pair_Sl_cweeDateTime_Sc_float_Sg__Sg__InsertRange(std::vector< Pair< cweeDateTime,float > > *self,int index,std::vector< Pair< cweeDateTime,float > > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_Pair_Sl_cweeDateTime_Sc_float_Sg__Sg__RemoveAt(std::vector< Pair< cweeDateTime,float > > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_Pair_Sl_cweeDateTime_Sc_float_Sg__Sg__RemoveRange(std::vector< Pair< cweeDateTime,float > > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< Pair< cweeDateTime,float > > *std_vector_Sl_Pair_Sl_cweeDateTime_Sc_float_Sg__Sg__Repeat(Pair< cweeDateTime,float > const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< Pair< cweeDateTime,float > >(count, value);
      }
SWIGINTERN void std_vector_Sl_Pair_Sl_cweeDateTime_Sc_float_Sg__Sg__Reverse__SWIG_0(std::vector< Pair< cweeDateTime,float > > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_Pair_Sl_cweeDateTime_Sc_float_Sg__Sg__Reverse__SWIG_1(std::vector< Pair< cweeDateTime,float > > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_Pair_Sl_cweeDateTime_Sc_float_Sg__Sg__SetRange(std::vector< Pair< cweeDateTime,float > > *self,int index,std::vector< Pair< cweeDateTime,float > > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< Pair< double,double > > *new_std_vector_Sl_Pair_Sl_double_Sc_double_Sg__Sg___SWIG_2(int capacity){
        std::vector< Pair< double,double > >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< Pair< double,double > >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN Pair< double,double > std_vector_Sl_Pair_Sl_double_Sc_double_Sg__Sg__getitemcopy(std::vector< Pair< double,double > > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< Pair< double,double > >::value_type const &std_vector_Sl_Pair_Sl_double_Sc_double_Sg__Sg__getitem(std::vector< Pair< double,double > > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_Pair_Sl_double_Sc_double_Sg__Sg__setitem(std::vector< Pair< double,double > > *self,int index,Pair< double,double > const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_Pair_Sl_double_Sc_double_Sg__Sg__AddRange(std::vector< Pair< double,double > > *self,std::vector< Pair< double,double > > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< Pair< double,double > > *std_vector_Sl_Pair_Sl_double_Sc_double_Sg__Sg__GetRange(std::vector< Pair< double,double > > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< Pair< double,double > >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_Pair_Sl_double_Sc_double_Sg__Sg__Insert(std::vector< Pair< double,double > > *self,int index,Pair< double,double > const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_Pair_Sl_double_Sc_double_Sg__Sg__InsertRange(std::vector< Pair< double,double > > *self,int index,std::vector< Pair< double,double > > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_Pair_Sl_double_Sc_double_Sg__Sg__RemoveAt(std::vector< Pair< double,double > > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_Pair_Sl_double_Sc_double_Sg__Sg__RemoveRange(std::vector< Pair< double,double > > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< Pair< double,double > > *std_vector_Sl_Pair_Sl_double_Sc_double_Sg__Sg__Repeat(Pair< double,double > const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< Pair< double,double > >(count, value);
      }
SWIGINTERN void std_vector_Sl_Pair_Sl_double_Sc_double_Sg__Sg__Reverse__SWIG_0(std::vector< Pair< double,double > > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_Pair_Sl_double_Sc_double_Sg__Sg__Reverse__SWIG_1(std::vector< Pair< double,double > > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_Pair_Sl_double_Sc_double_Sg__Sg__SetRange(std::vector< Pair< double,double > > *self,int index,std::vector< Pair< double,double > > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< ScriptingNode > *new_std_vector_Sl_ScriptingNode_Sg___SWIG_2(int capacity){
        std::vector< ScriptingNode >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< ScriptingNode >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN ScriptingNode std_vector_Sl_ScriptingNode_Sg__getitemcopy(std::vector< ScriptingNode > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< ScriptingNode >::value_type const &std_vector_Sl_ScriptingNode_Sg__getitem(std::vector< ScriptingNode > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_ScriptingNode_Sg__setitem(std::vector< ScriptingNode > *self,int index,ScriptingNode const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_ScriptingNode_Sg__AddRange(std::vector< ScriptingNode > *self,std::vector< ScriptingNode > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< ScriptingNode > *std_vector_Sl_ScriptingNode_Sg__GetRange(std::vector< ScriptingNode > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< ScriptingNode >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_ScriptingNode_Sg__Insert(std::vector< ScriptingNode > *self,int index,ScriptingNode const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_ScriptingNode_Sg__InsertRange(std::vector< ScriptingNode > *self,int index,std::vector< ScriptingNode > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_ScriptingNode_Sg__RemoveAt(std::vector< ScriptingNode > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_ScriptingNode_Sg__RemoveRange(std::vector< ScriptingNode > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< ScriptingNode > *std_vector_Sl_ScriptingNode_Sg__Repeat(ScriptingNode const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< ScriptingNode >(count, value);
      }
SWIGINTERN void std_vector_Sl_ScriptingNode_Sg__Reverse__SWIG_0(std::vector< ScriptingNode > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_ScriptingNode_Sg__Reverse__SWIG_1(std::vector< ScriptingNode > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_ScriptingNode_Sg__SetRange(std::vector< ScriptingNode > *self,int index,std::vector< ScriptingNode > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< MapBackground_Interop > *new_std_vector_Sl_MapBackground_Interop_Sg___SWIG_2(int capacity){
        std::vector< MapBackground_Interop >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< MapBackground_Interop >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN MapBackground_Interop std_vector_Sl_MapBackground_Interop_Sg__getitemcopy(std::vector< MapBackground_Interop > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< MapBackground_Interop >::value_type const &std_vector_Sl_MapBackground_Interop_Sg__getitem(std::vector< MapBackground_Interop > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_MapBackground_Interop_Sg__setitem(std::vector< MapBackground_Interop > *self,int index,MapBackground_Interop const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_MapBackground_Interop_Sg__AddRange(std::vector< MapBackground_Interop > *self,std::vector< MapBackground_Interop > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< MapBackground_Interop > *std_vector_Sl_MapBackground_Interop_Sg__GetRange(std::vector< MapBackground_Interop > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< MapBackground_Interop >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_MapBackground_Interop_Sg__Insert(std::vector< MapBackground_Interop > *self,int index,MapBackground_Interop const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_MapBackground_Interop_Sg__InsertRange(std::vector< MapBackground_Interop > *self,int index,std::vector< MapBackground_Interop > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_MapBackground_Interop_Sg__RemoveAt(std::vector< MapBackground_Interop > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_MapBackground_Interop_Sg__RemoveRange(std::vector< MapBackground_Interop > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< MapBackground_Interop > *std_vector_Sl_MapBackground_Interop_Sg__Repeat(MapBackground_Interop const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< MapBackground_Interop >(count, value);
      }
SWIGINTERN void std_vector_Sl_MapBackground_Interop_Sg__Reverse__SWIG_0(std::vector< MapBackground_Interop > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_MapBackground_Interop_Sg__Reverse__SWIG_1(std::vector< MapBackground_Interop > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_MapBackground_Interop_Sg__SetRange(std::vector< MapBackground_Interop > *self,int index,std::vector< MapBackground_Interop > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< Color_Interop > *new_std_vector_Sl_Color_Interop_Sg___SWIG_2(int capacity){
        std::vector< Color_Interop >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< Color_Interop >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN Color_Interop std_vector_Sl_Color_Interop_Sg__getitemcopy(std::vector< Color_Interop > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< Color_Interop >::value_type const &std_vector_Sl_Color_Interop_Sg__getitem(std::vector< Color_Interop > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_Color_Interop_Sg__setitem(std::vector< Color_Interop > *self,int index,Color_Interop const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_Color_Interop_Sg__AddRange(std::vector< Color_Interop > *self,std::vector< Color_Interop > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< Color_Interop > *std_vector_Sl_Color_Interop_Sg__GetRange(std::vector< Color_Interop > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< Color_Interop >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_Color_Interop_Sg__Insert(std::vector< Color_Interop > *self,int index,Color_Interop const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_Color_Interop_Sg__InsertRange(std::vector< Color_Interop > *self,int index,std::vector< Color_Interop > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_Color_Interop_Sg__RemoveAt(std::vector< Color_Interop > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_Color_Interop_Sg__RemoveRange(std::vector< Color_Interop > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< Color_Interop > *std_vector_Sl_Color_Interop_Sg__Repeat(Color_Interop const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< Color_Interop >(count, value);
      }
SWIGINTERN void std_vector_Sl_Color_Interop_Sg__Reverse__SWIG_0(std::vector< Color_Interop > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_Color_Interop_Sg__Reverse__SWIG_1(std::vector< Color_Interop > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_Color_Interop_Sg__SetRange(std::vector< Color_Interop > *self,int index,std::vector< Color_Interop > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::map< int,MapBackground_Interop >::mapped_type const &std_map_Sl_int_Sc_MapBackground_Interop_Sg__getitem(std::map< int,MapBackground_Interop > *self,std::map< int,MapBackground_Interop >::key_type const &key){
        std::map< int, MapBackground_Interop, std::less< int > >::iterator iter = self->find(key);
        if (iter != self->end())
          return iter->second;
        else
          throw std::out_of_range("key not found");
      }
SWIGINTERN void std_map_Sl_int_Sc_MapBackground_Interop_Sg__setitem(std::map< int,MapBackground_Interop > *self,std::map< int,MapBackground_Interop >::key_type const &key,std::map< int,MapBackground_Interop >::mapped_type const &x){
        (*self)[key] = x;
      }
SWIGINTERN bool std_map_Sl_int_Sc_MapBackground_Interop_Sg__ContainsKey(std::map< int,MapBackground_Interop > *self,std::map< int,MapBackground_Interop >::key_type const &key){
        std::map< int, MapBackground_Interop, std::less< int > >::iterator iter = self->find(key);
        return iter != self->end();
      }
SWIGINTERN void std_map_Sl_int_Sc_MapBackground_Interop_Sg__Add(std::map< int,MapBackground_Interop > *self,std::map< int,MapBackground_Interop >::key_type const &key,std::map< int,MapBackground_Interop >::mapped_type const &value){
        std::map< int, MapBackground_Interop, std::less< int > >::iterator iter = self->find(key);
        if (iter != self->end())
          throw std::out_of_range("key already exists");
        self->insert(std::pair< int, MapBackground_Interop >(key, value));
      }
SWIGINTERN bool std_map_Sl_int_Sc_MapBackground_Interop_Sg__Remove(std::map< int,MapBackground_Interop > *self,std::map< int,MapBackground_Interop >::key_type const &key){
        std::map< int, MapBackground_Interop, std::less< int > >::iterator iter = self->find(key);
        if (iter != self->end()) {
          self->erase(iter);
          return true;
        }
        return false;
      }
SWIGINTERN std::map< int,MapBackground_Interop,std::less< int > >::iterator *std_map_Sl_int_Sc_MapBackground_Interop_Sg__create_iterator_begin(std::map< int,MapBackground_Interop > *self){
        return new std::map< int, MapBackground_Interop, std::less< int > >::iterator(self->begin());
      }
SWIGINTERN std::map< int,MapBackground_Interop >::key_type const &std_map_Sl_int_Sc_MapBackground_Interop_Sg__get_next_key(std::map< int,MapBackground_Interop > *self,std::map< int,MapBackground_Interop,std::less< int > >::iterator *swigiterator){
        std::map< int, MapBackground_Interop, std::less< int > >::iterator iter = *swigiterator;
        (*swigiterator)++;
        return (*iter).first;
      }
SWIGINTERN void std_map_Sl_int_Sc_MapBackground_Interop_Sg__destroy_iterator(std::map< int,MapBackground_Interop > *self,std::map< int,MapBackground_Interop,std::less< int > >::iterator *swigiterator){
        delete swigiterator;
      }
SWIGINTERN std::map< int,MapPolyline_Interop >::mapped_type const &std_map_Sl_int_Sc_MapPolyline_Interop_Sg__getitem(std::map< int,MapPolyline_Interop > *self,std::map< int,MapPolyline_Interop >::key_type const &key){
        std::map< int, MapPolyline_Interop, std::less< int > >::iterator iter = self->find(key);
        if (iter != self->end())
          return iter->second;
        else
          throw std::out_of_range("key not found");
      }
SWIGINTERN void std_map_Sl_int_Sc_MapPolyline_Interop_Sg__setitem(std::map< int,MapPolyline_Interop > *self,std::map< int,MapPolyline_Interop >::key_type const &key,std::map< int,MapPolyline_Interop >::mapped_type const &x){
        (*self)[key] = x;
      }
SWIGINTERN bool std_map_Sl_int_Sc_MapPolyline_Interop_Sg__ContainsKey(std::map< int,MapPolyline_Interop > *self,std::map< int,MapPolyline_Interop >::key_type const &key){
        std::map< int, MapPolyline_Interop, std::less< int > >::iterator iter = self->find(key);
        return iter != self->end();
      }
SWIGINTERN void std_map_Sl_int_Sc_MapPolyline_Interop_Sg__Add(std::map< int,MapPolyline_Interop > *self,std::map< int,MapPolyline_Interop >::key_type const &key,std::map< int,MapPolyline_Interop >::mapped_type const &value){
        std::map< int, MapPolyline_Interop, std::less< int > >::iterator iter = self->find(key);
        if (iter != self->end())
          throw std::out_of_range("key already exists");
        self->insert(std::pair< int, MapPolyline_Interop >(key, value));
      }
SWIGINTERN bool std_map_Sl_int_Sc_MapPolyline_Interop_Sg__Remove(std::map< int,MapPolyline_Interop > *self,std::map< int,MapPolyline_Interop >::key_type const &key){
        std::map< int, MapPolyline_Interop, std::less< int > >::iterator iter = self->find(key);
        if (iter != self->end()) {
          self->erase(iter);
          return true;
        }
        return false;
      }
SWIGINTERN std::map< int,MapPolyline_Interop,std::less< int > >::iterator *std_map_Sl_int_Sc_MapPolyline_Interop_Sg__create_iterator_begin(std::map< int,MapPolyline_Interop > *self){
        return new std::map< int, MapPolyline_Interop, std::less< int > >::iterator(self->begin());
      }
SWIGINTERN std::map< int,MapPolyline_Interop >::key_type const &std_map_Sl_int_Sc_MapPolyline_Interop_Sg__get_next_key(std::map< int,MapPolyline_Interop > *self,std::map< int,MapPolyline_Interop,std::less< int > >::iterator *swigiterator){
        std::map< int, MapPolyline_Interop, std::less< int > >::iterator iter = *swigiterator;
        (*swigiterator)++;
        return (*iter).first;
      }
SWIGINTERN void std_map_Sl_int_Sc_MapPolyline_Interop_Sg__destroy_iterator(std::map< int,MapPolyline_Interop > *self,std::map< int,MapPolyline_Interop,std::less< int > >::iterator *swigiterator){
        delete swigiterator;
      }
SWIGINTERN std::map< int,MapIcon_Interop >::mapped_type const &std_map_Sl_int_Sc_MapIcon_Interop_Sg__getitem(std::map< int,MapIcon_Interop > *self,std::map< int,MapIcon_Interop >::key_type const &key){
        std::map< int, MapIcon_Interop, std::less< int > >::iterator iter = self->find(key);
        if (iter != self->end())
          return iter->second;
        else
          throw std::out_of_range("key not found");
      }
SWIGINTERN void std_map_Sl_int_Sc_MapIcon_Interop_Sg__setitem(std::map< int,MapIcon_Interop > *self,std::map< int,MapIcon_Interop >::key_type const &key,std::map< int,MapIcon_Interop >::mapped_type const &x){
        (*self)[key] = x;
      }
SWIGINTERN bool std_map_Sl_int_Sc_MapIcon_Interop_Sg__ContainsKey(std::map< int,MapIcon_Interop > *self,std::map< int,MapIcon_Interop >::key_type const &key){
        std::map< int, MapIcon_Interop, std::less< int > >::iterator iter = self->find(key);
        return iter != self->end();
      }
SWIGINTERN void std_map_Sl_int_Sc_MapIcon_Interop_Sg__Add(std::map< int,MapIcon_Interop > *self,std::map< int,MapIcon_Interop >::key_type const &key,std::map< int,MapIcon_Interop >::mapped_type const &value){
        std::map< int, MapIcon_Interop, std::less< int > >::iterator iter = self->find(key);
        if (iter != self->end())
          throw std::out_of_range("key already exists");
        self->insert(std::pair< int, MapIcon_Interop >(key, value));
      }
SWIGINTERN bool std_map_Sl_int_Sc_MapIcon_Interop_Sg__Remove(std::map< int,MapIcon_Interop > *self,std::map< int,MapIcon_Interop >::key_type const &key){
        std::map< int, MapIcon_Interop, std::less< int > >::iterator iter = self->find(key);
        if (iter != self->end()) {
          self->erase(iter);
          return true;
        }
        return false;
      }
SWIGINTERN std::map< int,MapIcon_Interop,std::less< int > >::iterator *std_map_Sl_int_Sc_MapIcon_Interop_Sg__create_iterator_begin(std::map< int,MapIcon_Interop > *self){
        return new std::map< int, MapIcon_Interop, std::less< int > >::iterator(self->begin());
      }
SWIGINTERN std::map< int,MapIcon_Interop >::key_type const &std_map_Sl_int_Sc_MapIcon_Interop_Sg__get_next_key(std::map< int,MapIcon_Interop > *self,std::map< int,MapIcon_Interop,std::less< int > >::iterator *swigiterator){
        std::map< int, MapIcon_Interop, std::less< int > >::iterator iter = *swigiterator;
        (*swigiterator)++;
        return (*iter).first;
      }
SWIGINTERN void std_map_Sl_int_Sc_MapIcon_Interop_Sg__destroy_iterator(std::map< int,MapIcon_Interop > *self,std::map< int,MapIcon_Interop,std::less< int > >::iterator *swigiterator){
        delete swigiterator;
      }

#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void * SWIGSTDCALL CSharp_new_cweeDateTime__SWIG_0() {
  void * jresult ;
  cweeDateTime *result = 0 ;
  
  result = (cweeDateTime *)new cweeDateTime();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_cweeDateTime__SWIG_1(double jarg1) {
  void * jresult ;
  double arg1 ;
  cweeDateTime *result = 0 ;
  
  arg1 = (double)jarg1; 
  result = (cweeDateTime *)new cweeDateTime(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_cweeDateTime_unixTime_set(void * jarg1, double jarg2) {
  cweeDateTime *arg1 = (cweeDateTime *) 0 ;
  double arg2 ;
  
  arg1 = (cweeDateTime *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->unixTime = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_cweeDateTime_unixTime_get(void * jarg1) {
  double jresult ;
  cweeDateTime *arg1 = (cweeDateTime *) 0 ;
  double result;
  
  arg1 = (cweeDateTime *)jarg1; 
  result = (double) ((arg1)->unixTime);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_cweeDateTime_year_set(void * jarg1, int jarg2) {
  cweeDateTime *arg1 = (cweeDateTime *) 0 ;
  int arg2 ;
  
  arg1 = (cweeDateTime *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->year = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_cweeDateTime_year_get(void * jarg1) {
  int jresult ;
  cweeDateTime *arg1 = (cweeDateTime *) 0 ;
  int result;
  
  arg1 = (cweeDateTime *)jarg1; 
  result = (int) ((arg1)->year);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_cweeDateTime_month_set(void * jarg1, int jarg2) {
  cweeDateTime *arg1 = (cweeDateTime *) 0 ;
  int arg2 ;
  
  arg1 = (cweeDateTime *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->month = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_cweeDateTime_month_get(void * jarg1) {
  int jresult ;
  cweeDateTime *arg1 = (cweeDateTime *) 0 ;
  int result;
  
  arg1 = (cweeDateTime *)jarg1; 
  result = (int) ((arg1)->month);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_cweeDateTime_day_set(void * jarg1, int jarg2) {
  cweeDateTime *arg1 = (cweeDateTime *) 0 ;
  int arg2 ;
  
  arg1 = (cweeDateTime *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->day = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_cweeDateTime_day_get(void * jarg1) {
  int jresult ;
  cweeDateTime *arg1 = (cweeDateTime *) 0 ;
  int result;
  
  arg1 = (cweeDateTime *)jarg1; 
  result = (int) ((arg1)->day);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_cweeDateTime_hour_set(void * jarg1, int jarg2) {
  cweeDateTime *arg1 = (cweeDateTime *) 0 ;
  int arg2 ;
  
  arg1 = (cweeDateTime *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->hour = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_cweeDateTime_hour_get(void * jarg1) {
  int jresult ;
  cweeDateTime *arg1 = (cweeDateTime *) 0 ;
  int result;
  
  arg1 = (cweeDateTime *)jarg1; 
  result = (int) ((arg1)->hour);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_cweeDateTime_minute_set(void * jarg1, int jarg2) {
  cweeDateTime *arg1 = (cweeDateTime *) 0 ;
  int arg2 ;
  
  arg1 = (cweeDateTime *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->minute = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_cweeDateTime_minute_get(void * jarg1) {
  int jresult ;
  cweeDateTime *arg1 = (cweeDateTime *) 0 ;
  int result;
  
  arg1 = (cweeDateTime *)jarg1; 
  result = (int) ((arg1)->minute);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_cweeDateTime_second_set(void * jarg1, int jarg2) {
  cweeDateTime *arg1 = (cweeDateTime *) 0 ;
  int arg2 ;
  
  arg1 = (cweeDateTime *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->second = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_cweeDateTime_second_get(void * jarg1) {
  int jresult ;
  cweeDateTime *arg1 = (cweeDateTime *) 0 ;
  int result;
  
  arg1 = (cweeDateTime *)jarg1; 
  result = (int) ((arg1)->second);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_cweeDateTime_milliseconds_set(void * jarg1, int jarg2) {
  cweeDateTime *arg1 = (cweeDateTime *) 0 ;
  int arg2 ;
  
  arg1 = (cweeDateTime *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->milliseconds = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_cweeDateTime_milliseconds_get(void * jarg1) {
  int jresult ;
  cweeDateTime *arg1 = (cweeDateTime *) 0 ;
  int result;
  
  arg1 = (cweeDateTime *)jarg1; 
  result = (int) ((arg1)->milliseconds);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_cweeDateTime(void * jarg1) {
  cweeDateTime *arg1 = (cweeDateTime *) 0 ;
  
  arg1 = (cweeDateTime *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Awaiter() {
  void * jresult ;
  Awaiter *result = 0 ;
  
  result = (Awaiter *)new Awaiter();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Awaiter_IsFinished(void * jarg1) {
  unsigned int jresult ;
  Awaiter *arg1 = (Awaiter *) 0 ;
  bool result;
  
  arg1 = (Awaiter *)jarg1; 
  result = (bool)(arg1)->IsFinished();
  jresult = result; 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_Awaiter_Result(void * jarg1) {
  const char * jresult ;
  Awaiter *arg1 = (Awaiter *) 0 ;
  std::string result;
  
  arg1 = (Awaiter *)jarg1; 
  result = (arg1)->Result();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Awaiter_data_m_set(void * jarg1, void * jarg2) {
  Awaiter *arg1 = (Awaiter *) 0 ;
  std::shared_ptr< std::string > *arg2 = (std::shared_ptr< std::string > *) 0 ;
  
  arg1 = (Awaiter *)jarg1; 
  arg2 = (std::shared_ptr< std::string > *)jarg2; 
  if (arg1) (arg1)->data_m = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Awaiter_data_m_get(void * jarg1) {
  void * jresult ;
  Awaiter *arg1 = (Awaiter *) 0 ;
  std::shared_ptr< std::string > *result = 0 ;
  
  arg1 = (Awaiter *)jarg1; 
  result = (std::shared_ptr< std::string > *)& ((arg1)->data_m);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Awaiter_isFinished_m_set(void * jarg1, void * jarg2) {
  Awaiter *arg1 = (Awaiter *) 0 ;
  std::shared_ptr< bool > *arg2 = (std::shared_ptr< bool > *) 0 ;
  
  arg1 = (Awaiter *)jarg1; 
  arg2 = (std::shared_ptr< bool > *)jarg2; 
  if (arg1) (arg1)->isFinished_m = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Awaiter_isFinished_m_get(void * jarg1) {
  void * jresult ;
  Awaiter *arg1 = (Awaiter *) 0 ;
  std::shared_ptr< bool > *result = 0 ;
  
  arg1 = (Awaiter *)jarg1; 
  result = (std::shared_ptr< bool > *)& ((arg1)->isFinished_m);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Awaiter(void * jarg1) {
  Awaiter *arg1 = (Awaiter *) 0 ;
  
  arg1 = (Awaiter *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SharedMatrix__SWIG_0() {
  void * jresult ;
  SharedMatrix *result = 0 ;
  
  result = (SharedMatrix *)new SharedMatrix();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SharedMatrix__SWIG_1(int jarg1, unsigned int jarg2) {
  void * jresult ;
  int arg1 ;
  bool arg2 ;
  SharedMatrix *result = 0 ;
  
  arg1 = (int)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (SharedMatrix *)new SharedMatrix(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SharedMatrix__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  SharedMatrix *result = 0 ;
  
  arg1 = (int)jarg1; 
  result = (SharedMatrix *)new SharedMatrix(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SharedMatrix__SWIG_3(void * jarg1) {
  void * jresult ;
  SharedMatrix *arg1 = 0 ;
  SharedMatrix *result = 0 ;
  
  arg1 = (SharedMatrix *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SharedMatrix const & is null", 0);
    return 0;
  } 
  result = (SharedMatrix *)new SharedMatrix((SharedMatrix const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SharedMatrix(void * jarg1) {
  SharedMatrix *arg1 = (SharedMatrix *) 0 ;
  
  arg1 = (SharedMatrix *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SharedMatrix_Clear(void * jarg1) {
  SharedMatrix *arg1 = (SharedMatrix *) 0 ;
  
  arg1 = (SharedMatrix *)jarg1; 
  (arg1)->Clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_SharedMatrix_AppendData(void * jarg1, double jarg2, double jarg3, float jarg4) {
  SharedMatrix *arg1 = (SharedMatrix *) 0 ;
  double arg2 ;
  double arg3 ;
  float arg4 ;
  
  arg1 = (SharedMatrix *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (float)jarg4; 
  (arg1)->AppendData(arg2,arg3,arg4);
}


SWIGEXPORT double SWIGSTDCALL CSharp_SharedMatrix_GetValue(void * jarg1, double jarg2, double jarg3) {
  double jresult ;
  SharedMatrix *arg1 = (SharedMatrix *) 0 ;
  double arg2 ;
  double arg3 ;
  double result;
  
  arg1 = (SharedMatrix *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  result = (double)(arg1)->GetValue(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SharedMatrix_GetKnotSeries(void * jarg1, double jarg2, double jarg3, double jarg4, double jarg5, int jarg6, int jarg7) {
  void * jresult ;
  SharedMatrix *arg1 = (SharedMatrix *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  int arg6 ;
  int arg7 ;
  std::vector< double > result;
  
  arg1 = (SharedMatrix *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  result = (arg1)->GetKnotSeries(arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = new std::vector< double >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SharedMatrix_GetTimeSeries(void * jarg1, double jarg2, double jarg3, double jarg4, double jarg5, int jarg6, int jarg7) {
  void * jresult ;
  SharedMatrix *arg1 = (SharedMatrix *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  int arg6 ;
  int arg7 ;
  std::vector< double > result;
  
  arg1 = (SharedMatrix *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  result = (arg1)->GetTimeSeries(arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = new std::vector< double >(result); 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_SharedMatrix_GetMinX(void * jarg1) {
  double jresult ;
  SharedMatrix *arg1 = (SharedMatrix *) 0 ;
  double result;
  
  arg1 = (SharedMatrix *)jarg1; 
  result = (double)(arg1)->GetMinX();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_SharedMatrix_GetMaxX(void * jarg1) {
  double jresult ;
  SharedMatrix *arg1 = (SharedMatrix *) 0 ;
  double result;
  
  arg1 = (SharedMatrix *)jarg1; 
  result = (double)(arg1)->GetMaxX();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_SharedMatrix_GetMinY(void * jarg1) {
  double jresult ;
  SharedMatrix *arg1 = (SharedMatrix *) 0 ;
  double result;
  
  arg1 = (SharedMatrix *)jarg1; 
  result = (double)(arg1)->GetMinY();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_SharedMatrix_GetMaxY(void * jarg1) {
  double jresult ;
  SharedMatrix *arg1 = (SharedMatrix *) 0 ;
  double result;
  
  arg1 = (SharedMatrix *)jarg1; 
  result = (double)(arg1)->GetMaxY();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_SharedMatrix_GetMinValue(void * jarg1) {
  double jresult ;
  SharedMatrix *arg1 = (SharedMatrix *) 0 ;
  double result;
  
  arg1 = (SharedMatrix *)jarg1; 
  result = (double)(arg1)->GetMinValue();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_SharedMatrix_GetMaxValue(void * jarg1) {
  double jresult ;
  SharedMatrix *arg1 = (SharedMatrix *) 0 ;
  double result;
  
  arg1 = (SharedMatrix *)jarg1; 
  result = (double)(arg1)->GetMaxValue();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SharedMatrix_GetNumValues(void * jarg1) {
  int jresult ;
  SharedMatrix *arg1 = (SharedMatrix *) 0 ;
  int result;
  
  arg1 = (SharedMatrix *)jarg1; 
  result = (int)(arg1)->GetNumValues();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SharedMatrix_Index(void * jarg1) {
  int jresult ;
  SharedMatrix *arg1 = (SharedMatrix *) 0 ;
  int result;
  
  arg1 = (SharedMatrix *)jarg1; 
  result = (int)(arg1)->Index();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SharedTimeSeriesPattern__SWIG_0() {
  void * jresult ;
  SharedTimeSeriesPattern *result = 0 ;
  
  result = (SharedTimeSeriesPattern *)new SharedTimeSeriesPattern();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SharedTimeSeriesPattern__SWIG_1(int jarg1, unsigned int jarg2) {
  void * jresult ;
  int arg1 ;
  bool arg2 ;
  SharedTimeSeriesPattern *result = 0 ;
  
  arg1 = (int)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (SharedTimeSeriesPattern *)new SharedTimeSeriesPattern(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SharedTimeSeriesPattern__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  SharedTimeSeriesPattern *result = 0 ;
  
  arg1 = (int)jarg1; 
  result = (SharedTimeSeriesPattern *)new SharedTimeSeriesPattern(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SharedTimeSeriesPattern(void * jarg1) {
  SharedTimeSeriesPattern *arg1 = (SharedTimeSeriesPattern *) 0 ;
  
  arg1 = (SharedTimeSeriesPattern *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SharedTimeSeriesPattern_Clear(void * jarg1) {
  SharedTimeSeriesPattern *arg1 = (SharedTimeSeriesPattern *) 0 ;
  
  arg1 = (SharedTimeSeriesPattern *)jarg1; 
  (arg1)->Clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_SharedTimeSeriesPattern_AppendData(void * jarg1, double jarg2, float jarg3) {
  SharedTimeSeriesPattern *arg1 = (SharedTimeSeriesPattern *) 0 ;
  double arg2 ;
  float arg3 ;
  
  arg1 = (SharedTimeSeriesPattern *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->AppendData(arg2,arg3);
}


SWIGEXPORT float SWIGSTDCALL CSharp_SharedTimeSeriesPattern_GetValue(void * jarg1, double jarg2) {
  float jresult ;
  SharedTimeSeriesPattern *arg1 = (SharedTimeSeriesPattern *) 0 ;
  double arg2 ;
  float result;
  
  arg1 = (SharedTimeSeriesPattern *)jarg1; 
  arg2 = (double)jarg2; 
  result = (float)(arg1)->GetValue(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_SharedTimeSeriesPattern_GetAvgValue(void * jarg1, double jarg2, double jarg3) {
  float jresult ;
  SharedTimeSeriesPattern *arg1 = (SharedTimeSeriesPattern *) 0 ;
  double arg2 ;
  double arg3 ;
  float result;
  
  arg1 = (SharedTimeSeriesPattern *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  result = (float)(arg1)->GetAvgValue(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SharedTimeSeriesPattern_GetTimeSeries(void * jarg1) {
  void * jresult ;
  SharedTimeSeriesPattern *arg1 = (SharedTimeSeriesPattern *) 0 ;
  std::vector< Pair< double,double > > result;
  
  arg1 = (SharedTimeSeriesPattern *)jarg1; 
  result = (arg1)->GetTimeSeries();
  jresult = new std::vector< Pair< double,double > >(result); 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_SharedTimeSeriesPattern_GetMinTime(void * jarg1) {
  double jresult ;
  SharedTimeSeriesPattern *arg1 = (SharedTimeSeriesPattern *) 0 ;
  double result;
  
  arg1 = (SharedTimeSeriesPattern *)jarg1; 
  result = (double)(arg1)->GetMinTime();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_SharedTimeSeriesPattern_GetMaxTime(void * jarg1) {
  double jresult ;
  SharedTimeSeriesPattern *arg1 = (SharedTimeSeriesPattern *) 0 ;
  double result;
  
  arg1 = (SharedTimeSeriesPattern *)jarg1; 
  result = (double)(arg1)->GetMaxTime();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SharedTimeSeriesPattern_GetNumValues(void * jarg1) {
  int jresult ;
  SharedTimeSeriesPattern *arg1 = (SharedTimeSeriesPattern *) 0 ;
  int result;
  
  arg1 = (SharedTimeSeriesPattern *)jarg1; 
  result = (int)(arg1)->GetNumValues();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SharedTimeSeriesPattern_GetInterpolationType(void * jarg1) {
  int jresult ;
  SharedTimeSeriesPattern *arg1 = (SharedTimeSeriesPattern *) 0 ;
  uwp_patternInterpType result;
  
  arg1 = (SharedTimeSeriesPattern *)jarg1; 
  result = (uwp_patternInterpType)(arg1)->GetInterpolationType();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_SharedTimeSeriesPattern_X_Units(void * jarg1) {
  const char * jresult ;
  SharedTimeSeriesPattern *arg1 = (SharedTimeSeriesPattern *) 0 ;
  std::string result;
  
  arg1 = (SharedTimeSeriesPattern *)jarg1; 
  result = (arg1)->X_Units();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_SharedTimeSeriesPattern_Y_Units(void * jarg1) {
  const char * jresult ;
  SharedTimeSeriesPattern *arg1 = (SharedTimeSeriesPattern *) 0 ;
  std::string result;
  
  arg1 = (SharedTimeSeriesPattern *)jarg1; 
  result = (arg1)->Y_Units();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SharedTimeSeriesPattern_Index(void * jarg1) {
  int jresult ;
  SharedTimeSeriesPattern *arg1 = (SharedTimeSeriesPattern *) 0 ;
  int result;
  
  arg1 = (SharedTimeSeriesPattern *)jarg1; 
  result = (int)(arg1)->Index();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SharedString__SWIG_0() {
  void * jresult ;
  SharedString *result = 0 ;
  
  result = (SharedString *)new SharedString();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SharedString__SWIG_1(int jarg1, unsigned int jarg2) {
  void * jresult ;
  int arg1 ;
  bool arg2 ;
  SharedString *result = 0 ;
  
  arg1 = (int)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (SharedString *)new SharedString(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SharedString__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  SharedString *result = 0 ;
  
  arg1 = (int)jarg1; 
  result = (SharedString *)new SharedString(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SharedString(void * jarg1) {
  SharedString *arg1 = (SharedString *) 0 ;
  
  arg1 = (SharedString *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SharedString_Set(void * jarg1, const char * jarg2) {
  SharedString *arg1 = (SharedString *) 0 ;
  std::string arg2 ;
  
  arg1 = (SharedString *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg2)->assign(jarg2); 
  (arg1)->Set(arg2);
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_SharedString_Get(void * jarg1) {
  const char * jresult ;
  SharedString *arg1 = (SharedString *) 0 ;
  std::string result;
  
  arg1 = (SharedString *)jarg1; 
  result = (arg1)->Get();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SharedString_Index(void * jarg1) {
  int jresult ;
  SharedString *arg1 = (SharedString *) 0 ;
  int result;
  
  arg1 = (SharedString *)jarg1; 
  result = (int)(arg1)->Index();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_WaterWatchEnums() {
  void * jresult ;
  WaterWatchEnums *result = 0 ;
  
  result = (WaterWatchEnums *)new WaterWatchEnums();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_WaterWatchEnums(void * jarg1) {
  WaterWatchEnums *arg1 = (WaterWatchEnums *) 0 ;
  
  arg1 = (WaterWatchEnums *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ScriptingNode() {
  void * jresult ;
  ScriptingNode *result = 0 ;
  
  result = (ScriptingNode *)new ScriptingNode();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ScriptingNode(void * jarg1) {
  ScriptingNode *arg1 = (ScriptingNode *) 0 ;
  
  arg1 = (ScriptingNode *)jarg1; 
  delete arg1;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_ScriptingNode_text_get(void * jarg1) {
  const char * jresult ;
  ScriptingNode *arg1 = (ScriptingNode *) 0 ;
  std::string result;
  
  arg1 = (ScriptingNode *)jarg1; 
  result = ((ScriptingNode const *)arg1)->text_get();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ScriptingNode_startLine_get(void * jarg1) {
  int jresult ;
  ScriptingNode *arg1 = (ScriptingNode *) 0 ;
  int result;
  
  arg1 = (ScriptingNode *)jarg1; 
  result = (int)((ScriptingNode const *)arg1)->startLine_get();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ScriptingNode_startColumn_get(void * jarg1) {
  int jresult ;
  ScriptingNode *arg1 = (ScriptingNode *) 0 ;
  int result;
  
  arg1 = (ScriptingNode *)jarg1; 
  result = (int)((ScriptingNode const *)arg1)->startColumn_get();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ScriptingNode_endLine_get(void * jarg1) {
  int jresult ;
  ScriptingNode *arg1 = (ScriptingNode *) 0 ;
  int result;
  
  arg1 = (ScriptingNode *)jarg1; 
  result = (int)((ScriptingNode const *)arg1)->endLine_get();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ScriptingNode_endColumn_get(void * jarg1) {
  int jresult ;
  ScriptingNode *arg1 = (ScriptingNode *) 0 ;
  int result;
  
  arg1 = (ScriptingNode *)jarg1; 
  result = (int)((ScriptingNode const *)arg1)->endColumn_get();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ScriptingNode_type_get(void * jarg1) {
  int jresult ;
  ScriptingNode *arg1 = (ScriptingNode *) 0 ;
  WaterWatchEnums::ScriptNodeType result;
  
  arg1 = (ScriptingNode *)jarg1; 
  result = (WaterWatchEnums::ScriptNodeType)((ScriptingNode const *)arg1)->type_get();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_ScriptingNode_typeHint_get(void * jarg1) {
  const char * jresult ;
  ScriptingNode *arg1 = (ScriptingNode *) 0 ;
  std::string result;
  
  arg1 = (ScriptingNode *)jarg1; 
  result = ((ScriptingNode const *)arg1)->typeHint_get();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ScriptingNode_depth_get(void * jarg1) {
  int jresult ;
  ScriptingNode *arg1 = (ScriptingNode *) 0 ;
  int result;
  
  arg1 = (ScriptingNode *)jarg1; 
  result = (int)((ScriptingNode const *)arg1)->depth_get();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ScriptingNode_text_set(void * jarg1, const char * jarg2) {
  ScriptingNode *arg1 = (ScriptingNode *) 0 ;
  std::string arg2 ;
  
  arg1 = (ScriptingNode *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg2)->assign(jarg2); 
  (arg1)->text_set(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ScriptingNode_startLine_set(void * jarg1, int jarg2) {
  ScriptingNode *arg1 = (ScriptingNode *) 0 ;
  int arg2 ;
  
  arg1 = (ScriptingNode *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->startLine_set(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ScriptingNode_startColumn_set(void * jarg1, int jarg2) {
  ScriptingNode *arg1 = (ScriptingNode *) 0 ;
  int arg2 ;
  
  arg1 = (ScriptingNode *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->startColumn_set(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ScriptingNode_endLine_set(void * jarg1, int jarg2) {
  ScriptingNode *arg1 = (ScriptingNode *) 0 ;
  int arg2 ;
  
  arg1 = (ScriptingNode *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->endLine_set(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ScriptingNode_endColumn_set(void * jarg1, int jarg2) {
  ScriptingNode *arg1 = (ScriptingNode *) 0 ;
  int arg2 ;
  
  arg1 = (ScriptingNode *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->endColumn_set(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ScriptingNode_type_set(void * jarg1, int jarg2) {
  ScriptingNode *arg1 = (ScriptingNode *) 0 ;
  WaterWatchEnums::ScriptNodeType arg2 ;
  
  arg1 = (ScriptingNode *)jarg1; 
  arg2 = (WaterWatchEnums::ScriptNodeType)jarg2; 
  (arg1)->type_set(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ScriptingNode_typeHint_set(void * jarg1, const char * jarg2) {
  ScriptingNode *arg1 = (ScriptingNode *) 0 ;
  std::string arg2 ;
  
  arg1 = (ScriptingNode *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg2)->assign(jarg2); 
  (arg1)->typeHint_set(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ScriptingNode_depth_set(void * jarg1, int jarg2) {
  ScriptingNode *arg1 = (ScriptingNode *) 0 ;
  int arg2 ;
  
  arg1 = (ScriptingNode *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->depth_set(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Color_Interop__SWIG_0() {
  void * jresult ;
  Color_Interop *result = 0 ;
  
  result = (Color_Interop *)new Color_Interop();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Color_Interop__SWIG_1(void * jarg1) {
  void * jresult ;
  Color_Interop *arg1 = 0 ;
  Color_Interop *result = 0 ;
  
  arg1 = (Color_Interop *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Color_Interop const & is null", 0);
    return 0;
  } 
  result = (Color_Interop *)new Color_Interop((Color_Interop const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Color_Interop__SWIG_2(double jarg1, double jarg2, double jarg3, double jarg4) {
  void * jresult ;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  Color_Interop *result = 0 ;
  
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  result = (Color_Interop *)new Color_Interop(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Color_Interop_R_set(void * jarg1, double jarg2) {
  Color_Interop *arg1 = (Color_Interop *) 0 ;
  double arg2 ;
  
  arg1 = (Color_Interop *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->R = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Color_Interop_R_get(void * jarg1) {
  double jresult ;
  Color_Interop *arg1 = (Color_Interop *) 0 ;
  double result;
  
  arg1 = (Color_Interop *)jarg1; 
  result = (double) ((arg1)->R);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Color_Interop_G_set(void * jarg1, double jarg2) {
  Color_Interop *arg1 = (Color_Interop *) 0 ;
  double arg2 ;
  
  arg1 = (Color_Interop *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->G = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Color_Interop_G_get(void * jarg1) {
  double jresult ;
  Color_Interop *arg1 = (Color_Interop *) 0 ;
  double result;
  
  arg1 = (Color_Interop *)jarg1; 
  result = (double) ((arg1)->G);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Color_Interop_B_set(void * jarg1, double jarg2) {
  Color_Interop *arg1 = (Color_Interop *) 0 ;
  double arg2 ;
  
  arg1 = (Color_Interop *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->B = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Color_Interop_B_get(void * jarg1) {
  double jresult ;
  Color_Interop *arg1 = (Color_Interop *) 0 ;
  double result;
  
  arg1 = (Color_Interop *)jarg1; 
  result = (double) ((arg1)->B);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Color_Interop_A_set(void * jarg1, double jarg2) {
  Color_Interop *arg1 = (Color_Interop *) 0 ;
  double arg2 ;
  
  arg1 = (Color_Interop *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->A = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Color_Interop_A_get(void * jarg1) {
  double jresult ;
  Color_Interop *arg1 = (Color_Interop *) 0 ;
  double result;
  
  arg1 = (Color_Interop *)jarg1; 
  result = (double) ((arg1)->A);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Color_Interop(void * jarg1) {
  Color_Interop *arg1 = (Color_Interop *) 0 ;
  
  arg1 = (Color_Interop *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MapIcon_Interop_color_set(void * jarg1, void * jarg2) {
  MapIcon_Interop *arg1 = (MapIcon_Interop *) 0 ;
  Color_Interop *arg2 = (Color_Interop *) 0 ;
  
  arg1 = (MapIcon_Interop *)jarg1; 
  arg2 = (Color_Interop *)jarg2; 
  if (arg1) (arg1)->color = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MapIcon_Interop_color_get(void * jarg1) {
  void * jresult ;
  MapIcon_Interop *arg1 = (MapIcon_Interop *) 0 ;
  Color_Interop *result = 0 ;
  
  arg1 = (MapIcon_Interop *)jarg1; 
  result = (Color_Interop *)& ((arg1)->color);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MapIcon_Interop_size_set(void * jarg1, double jarg2) {
  MapIcon_Interop *arg1 = (MapIcon_Interop *) 0 ;
  double arg2 ;
  
  arg1 = (MapIcon_Interop *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->size = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_MapIcon_Interop_size_get(void * jarg1) {
  double jresult ;
  MapIcon_Interop *arg1 = (MapIcon_Interop *) 0 ;
  double result;
  
  arg1 = (MapIcon_Interop *)jarg1; 
  result = (double) ((arg1)->size);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MapIcon_Interop_longitude_set(void * jarg1, double jarg2) {
  MapIcon_Interop *arg1 = (MapIcon_Interop *) 0 ;
  double arg2 ;
  
  arg1 = (MapIcon_Interop *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->longitude = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_MapIcon_Interop_longitude_get(void * jarg1) {
  double jresult ;
  MapIcon_Interop *arg1 = (MapIcon_Interop *) 0 ;
  double result;
  
  arg1 = (MapIcon_Interop *)jarg1; 
  result = (double) ((arg1)->longitude);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MapIcon_Interop_latitude_set(void * jarg1, double jarg2) {
  MapIcon_Interop *arg1 = (MapIcon_Interop *) 0 ;
  double arg2 ;
  
  arg1 = (MapIcon_Interop *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->latitude = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_MapIcon_Interop_latitude_get(void * jarg1) {
  double jresult ;
  MapIcon_Interop *arg1 = (MapIcon_Interop *) 0 ;
  double result;
  
  arg1 = (MapIcon_Interop *)jarg1; 
  result = (double) ((arg1)->latitude);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MapIcon_Interop_HideOnCollision_set(void * jarg1, unsigned int jarg2) {
  MapIcon_Interop *arg1 = (MapIcon_Interop *) 0 ;
  bool arg2 ;
  
  arg1 = (MapIcon_Interop *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->HideOnCollision = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MapIcon_Interop_HideOnCollision_get(void * jarg1) {
  unsigned int jresult ;
  MapIcon_Interop *arg1 = (MapIcon_Interop *) 0 ;
  bool result;
  
  arg1 = (MapIcon_Interop *)jarg1; 
  result = (bool) ((arg1)->HideOnCollision);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MapIcon_Interop_IconPathGeometry_set(void * jarg1, const char * jarg2) {
  MapIcon_Interop *arg1 = (MapIcon_Interop *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (MapIcon_Interop *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->IconPathGeometry = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_MapIcon_Interop_IconPathGeometry_get(void * jarg1) {
  const char * jresult ;
  MapIcon_Interop *arg1 = (MapIcon_Interop *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (MapIcon_Interop *)jarg1; 
  result = (std::string *) & ((arg1)->IconPathGeometry);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MapIcon_Interop_Label_set(void * jarg1, const char * jarg2) {
  MapIcon_Interop *arg1 = (MapIcon_Interop *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (MapIcon_Interop *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->Label = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_MapIcon_Interop_Label_get(void * jarg1) {
  const char * jresult ;
  MapIcon_Interop *arg1 = (MapIcon_Interop *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (MapIcon_Interop *)jarg1; 
  result = (std::string *) & ((arg1)->Label);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MapIcon_Interop() {
  void * jresult ;
  MapIcon_Interop *result = 0 ;
  
  result = (MapIcon_Interop *)new MapIcon_Interop();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MapIcon_Interop(void * jarg1) {
  MapIcon_Interop *arg1 = (MapIcon_Interop *) 0 ;
  
  arg1 = (MapIcon_Interop *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MapPolyline_Interop_color_set(void * jarg1, void * jarg2) {
  MapPolyline_Interop *arg1 = (MapPolyline_Interop *) 0 ;
  Color_Interop *arg2 = (Color_Interop *) 0 ;
  
  arg1 = (MapPolyline_Interop *)jarg1; 
  arg2 = (Color_Interop *)jarg2; 
  if (arg1) (arg1)->color = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MapPolyline_Interop_color_get(void * jarg1) {
  void * jresult ;
  MapPolyline_Interop *arg1 = (MapPolyline_Interop *) 0 ;
  Color_Interop *result = 0 ;
  
  arg1 = (MapPolyline_Interop *)jarg1; 
  result = (Color_Interop *)& ((arg1)->color);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MapPolyline_Interop_thickness_set(void * jarg1, double jarg2) {
  MapPolyline_Interop *arg1 = (MapPolyline_Interop *) 0 ;
  double arg2 ;
  
  arg1 = (MapPolyline_Interop *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->thickness = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_MapPolyline_Interop_thickness_get(void * jarg1) {
  double jresult ;
  MapPolyline_Interop *arg1 = (MapPolyline_Interop *) 0 ;
  double result;
  
  arg1 = (MapPolyline_Interop *)jarg1; 
  result = (double) ((arg1)->thickness);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MapPolyline_Interop_dashed_set(void * jarg1, unsigned int jarg2) {
  MapPolyline_Interop *arg1 = (MapPolyline_Interop *) 0 ;
  bool arg2 ;
  
  arg1 = (MapPolyline_Interop *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->dashed = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MapPolyline_Interop_dashed_get(void * jarg1) {
  unsigned int jresult ;
  MapPolyline_Interop *arg1 = (MapPolyline_Interop *) 0 ;
  bool result;
  
  arg1 = (MapPolyline_Interop *)jarg1; 
  result = (bool) ((arg1)->dashed);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MapPolyline_Interop_coordinates_set(void * jarg1, void * jarg2) {
  MapPolyline_Interop *arg1 = (MapPolyline_Interop *) 0 ;
  std::vector< Pair< double,double > > *arg2 = (std::vector< Pair< double,double > > *) 0 ;
  
  arg1 = (MapPolyline_Interop *)jarg1; 
  arg2 = (std::vector< Pair< double,double > > *)jarg2; 
  if (arg1) (arg1)->coordinates = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MapPolyline_Interop_coordinates_get(void * jarg1) {
  void * jresult ;
  MapPolyline_Interop *arg1 = (MapPolyline_Interop *) 0 ;
  std::vector< Pair< double,double > > *result = 0 ;
  
  arg1 = (MapPolyline_Interop *)jarg1; 
  result = (std::vector< Pair< double,double > > *)& ((arg1)->coordinates);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MapPolyline_Interop() {
  void * jresult ;
  MapPolyline_Interop *result = 0 ;
  
  result = (MapPolyline_Interop *)new MapPolyline_Interop();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MapPolyline_Interop(void * jarg1) {
  MapPolyline_Interop *arg1 = (MapPolyline_Interop *) 0 ;
  
  arg1 = (MapPolyline_Interop *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MapBackground_Interop_highQuality_set(void * jarg1, unsigned int jarg2) {
  MapBackground_Interop *arg1 = (MapBackground_Interop *) 0 ;
  bool arg2 ;
  
  arg1 = (MapBackground_Interop *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->highQuality = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MapBackground_Interop_highQuality_get(void * jarg1) {
  unsigned int jresult ;
  MapBackground_Interop *arg1 = (MapBackground_Interop *) 0 ;
  bool result;
  
  arg1 = (MapBackground_Interop *)jarg1; 
  result = (bool) ((arg1)->highQuality);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MapBackground_Interop_clipToBounds_set(void * jarg1, unsigned int jarg2) {
  MapBackground_Interop *arg1 = (MapBackground_Interop *) 0 ;
  bool arg2 ;
  
  arg1 = (MapBackground_Interop *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->clipToBounds = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MapBackground_Interop_clipToBounds_get(void * jarg1) {
  unsigned int jresult ;
  MapBackground_Interop *arg1 = (MapBackground_Interop *) 0 ;
  bool result;
  
  arg1 = (MapBackground_Interop *)jarg1; 
  result = (bool) ((arg1)->clipToBounds);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MapBackground_Interop_minValue_set(void * jarg1, double jarg2) {
  MapBackground_Interop *arg1 = (MapBackground_Interop *) 0 ;
  double arg2 ;
  
  arg1 = (MapBackground_Interop *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->minValue = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_MapBackground_Interop_minValue_get(void * jarg1) {
  double jresult ;
  MapBackground_Interop *arg1 = (MapBackground_Interop *) 0 ;
  double result;
  
  arg1 = (MapBackground_Interop *)jarg1; 
  result = (double) ((arg1)->minValue);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MapBackground_Interop_maxValue_set(void * jarg1, double jarg2) {
  MapBackground_Interop *arg1 = (MapBackground_Interop *) 0 ;
  double arg2 ;
  
  arg1 = (MapBackground_Interop *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->maxValue = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_MapBackground_Interop_maxValue_get(void * jarg1) {
  double jresult ;
  MapBackground_Interop *arg1 = (MapBackground_Interop *) 0 ;
  double result;
  
  arg1 = (MapBackground_Interop *)jarg1; 
  result = (double) ((arg1)->maxValue);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MapBackground_Interop_matrix_set(void * jarg1, int jarg2) {
  MapBackground_Interop *arg1 = (MapBackground_Interop *) 0 ;
  int arg2 ;
  
  arg1 = (MapBackground_Interop *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->matrix = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MapBackground_Interop_matrix_get(void * jarg1) {
  int jresult ;
  MapBackground_Interop *arg1 = (MapBackground_Interop *) 0 ;
  int result;
  
  arg1 = (MapBackground_Interop *)jarg1; 
  result = (int) ((arg1)->matrix);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MapBackground_Interop_min_color_set(void * jarg1, void * jarg2) {
  MapBackground_Interop *arg1 = (MapBackground_Interop *) 0 ;
  Color_Interop *arg2 = (Color_Interop *) 0 ;
  
  arg1 = (MapBackground_Interop *)jarg1; 
  arg2 = (Color_Interop *)jarg2; 
  if (arg1) (arg1)->min_color = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MapBackground_Interop_min_color_get(void * jarg1) {
  void * jresult ;
  MapBackground_Interop *arg1 = (MapBackground_Interop *) 0 ;
  Color_Interop *result = 0 ;
  
  arg1 = (MapBackground_Interop *)jarg1; 
  result = (Color_Interop *)& ((arg1)->min_color);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MapBackground_Interop_max_color_set(void * jarg1, void * jarg2) {
  MapBackground_Interop *arg1 = (MapBackground_Interop *) 0 ;
  Color_Interop *arg2 = (Color_Interop *) 0 ;
  
  arg1 = (MapBackground_Interop *)jarg1; 
  arg2 = (Color_Interop *)jarg2; 
  if (arg1) (arg1)->max_color = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MapBackground_Interop_max_color_get(void * jarg1) {
  void * jresult ;
  MapBackground_Interop *arg1 = (MapBackground_Interop *) 0 ;
  Color_Interop *result = 0 ;
  
  arg1 = (MapBackground_Interop *)jarg1; 
  result = (Color_Interop *)& ((arg1)->max_color);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MapBackground_Interop_GetMatrix(double jarg1, double jarg2, double jarg3, double jarg4, int jarg5, int jarg6, void * jarg7) {
  void * jresult ;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  int arg5 ;
  int arg6 ;
  std::vector< MapBackground_Interop > *arg7 = 0 ;
  std::vector< Color_Interop > result;
  
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (std::vector< MapBackground_Interop > *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< MapBackground_Interop > const & is null", 0);
    return 0;
  } 
  result = MapBackground_Interop::GetMatrix(arg1,arg2,arg3,arg4,arg5,arg6,(std::vector< MapBackground_Interop > const &)*arg7);
  jresult = new std::vector< Color_Interop >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MapBackground_Interop() {
  void * jresult ;
  MapBackground_Interop *result = 0 ;
  
  result = (MapBackground_Interop *)new MapBackground_Interop();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MapBackground_Interop(void * jarg1) {
  MapBackground_Interop *arg1 = (MapBackground_Interop *) 0 ;
  
  arg1 = (MapBackground_Interop *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MapLayer_Interop_polylines_set(void * jarg1, void * jarg2) {
  MapLayer_Interop *arg1 = (MapLayer_Interop *) 0 ;
  std::map< int,MapPolyline_Interop,std::less< int > > *arg2 = (std::map< int,MapPolyline_Interop,std::less< int > > *) 0 ;
  
  arg1 = (MapLayer_Interop *)jarg1; 
  arg2 = (std::map< int,MapPolyline_Interop,std::less< int > > *)jarg2; 
  if (arg1) (arg1)->polylines = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MapLayer_Interop_polylines_get(void * jarg1) {
  void * jresult ;
  MapLayer_Interop *arg1 = (MapLayer_Interop *) 0 ;
  std::map< int,MapPolyline_Interop,std::less< int > > *result = 0 ;
  
  arg1 = (MapLayer_Interop *)jarg1; 
  result = (std::map< int,MapPolyline_Interop,std::less< int > > *)& ((arg1)->polylines);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MapLayer_Interop_icons_set(void * jarg1, void * jarg2) {
  MapLayer_Interop *arg1 = (MapLayer_Interop *) 0 ;
  std::map< int,MapIcon_Interop,std::less< int > > *arg2 = (std::map< int,MapIcon_Interop,std::less< int > > *) 0 ;
  
  arg1 = (MapLayer_Interop *)jarg1; 
  arg2 = (std::map< int,MapIcon_Interop,std::less< int > > *)jarg2; 
  if (arg1) (arg1)->icons = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MapLayer_Interop_icons_get(void * jarg1) {
  void * jresult ;
  MapLayer_Interop *arg1 = (MapLayer_Interop *) 0 ;
  std::map< int,MapIcon_Interop,std::less< int > > *result = 0 ;
  
  arg1 = (MapLayer_Interop *)jarg1; 
  result = (std::map< int,MapIcon_Interop,std::less< int > > *)& ((arg1)->icons);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MapLayer_Interop() {
  void * jresult ;
  MapLayer_Interop *result = 0 ;
  
  result = (MapLayer_Interop *)new MapLayer_Interop();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MapLayer_Interop(void * jarg1) {
  MapLayer_Interop *arg1 = (MapLayer_Interop *) 0 ;
  
  arg1 = (MapLayer_Interop *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ScriptObject(void * jarg1) {
  void * jresult ;
  cweeSharedPtr< void > arg1 ;
  cweeSharedPtr< void > *argp1 ;
  ScriptObject *result = 0 ;
  
  argp1 = (cweeSharedPtr< void > *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null cweeSharedPtr< void >", 0);
    return 0;
  }
  arg1 = *argp1; 
  result = (ScriptObject *)new ScriptObject(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ScriptObject(void * jarg1) {
  ScriptObject *arg1 = (ScriptObject *) 0 ;
  
  arg1 = (ScriptObject *)jarg1; 
  delete arg1;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_ScriptObject_Cast_String(void * jarg1) {
  const char * jresult ;
  ScriptObject *arg1 = (ScriptObject *) 0 ;
  std::string result;
  
  arg1 = (ScriptObject *)jarg1; 
  result = (arg1)->Cast_String();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ScriptObject_Cast_Color(void * jarg1) {
  void * jresult ;
  ScriptObject *arg1 = (ScriptObject *) 0 ;
  Color_Interop result;
  
  arg1 = (ScriptObject *)jarg1; 
  result = (arg1)->Cast_Color();
  jresult = new Color_Interop(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ScriptObject_Cast_MapIcon(void * jarg1) {
  void * jresult ;
  ScriptObject *arg1 = (ScriptObject *) 0 ;
  MapIcon_Interop result;
  
  arg1 = (ScriptObject *)jarg1; 
  result = (arg1)->Cast_MapIcon();
  jresult = new MapIcon_Interop(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ScriptObject_Cast_MapPolyline(void * jarg1) {
  void * jresult ;
  ScriptObject *arg1 = (ScriptObject *) 0 ;
  MapPolyline_Interop result;
  
  arg1 = (ScriptObject *)jarg1; 
  result = (arg1)->Cast_MapPolyline();
  jresult = new MapPolyline_Interop(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ScriptObject_Cast_MapLayer(void * jarg1) {
  void * jresult ;
  ScriptObject *arg1 = (ScriptObject *) 0 ;
  MapLayer_Interop result;
  
  arg1 = (ScriptObject *)jarg1; 
  result = (arg1)->Cast_MapLayer();
  jresult = new MapLayer_Interop(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ScriptEngine() {
  void * jresult ;
  ScriptEngine *result = 0 ;
  
  result = (ScriptEngine *)new ScriptEngine();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ScriptEngine(void * jarg1) {
  ScriptEngine *arg1 = (ScriptEngine *) 0 ;
  
  arg1 = (ScriptEngine *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ScriptEngine_DoScript_Cast_VectorStrings(void * jarg1, const char * jarg2) {
  void * jresult ;
  ScriptEngine *arg1 = (ScriptEngine *) 0 ;
  std::string arg2 ;
  std::vector< std::string > result;
  
  arg1 = (ScriptEngine *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg2)->assign(jarg2); 
  result = (arg1)->DoScript_Cast_VectorStrings(arg2);
  jresult = new std::vector< std::string >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ScriptEngine_DoScript_Cast_VectorFloats(void * jarg1, const char * jarg2) {
  void * jresult ;
  ScriptEngine *arg1 = (ScriptEngine *) 0 ;
  std::string arg2 ;
  std::vector< float > result;
  
  arg1 = (ScriptEngine *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg2)->assign(jarg2); 
  result = (arg1)->DoScript_Cast_VectorFloats(arg2);
  jresult = new std::vector< float >(result); 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_ScriptEngine_DoScript(void * jarg1, const char * jarg2) {
  const char * jresult ;
  ScriptEngine *arg1 = (ScriptEngine *) 0 ;
  std::string arg2 ;
  std::string result;
  
  arg1 = (ScriptEngine *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg2)->assign(jarg2); 
  result = (arg1)->DoScript(arg2);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ScriptEngine_DoScriptAsync(void * jarg1, const char * jarg2) {
  void * jresult ;
  ScriptEngine *arg1 = (ScriptEngine *) 0 ;
  std::string arg2 ;
  Awaiter result;
  
  arg1 = (ScriptEngine *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg2)->assign(jarg2); 
  result = (arg1)->DoScriptAsync(arg2);
  jresult = new Awaiter(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ScriptEngine_PreParseScript(void * jarg1, const char * jarg2) {
  void * jresult ;
  ScriptEngine *arg1 = (ScriptEngine *) 0 ;
  std::string arg2 ;
  std::vector< ScriptingNode > result;
  
  arg1 = (ScriptEngine *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg2)->assign(jarg2); 
  result = (arg1)->PreParseScript(arg2);
  jresult = new std::vector< ScriptingNode >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ScriptEngine_CompatibleFunctions(void * jarg1, const char * jarg2) {
  void * jresult ;
  ScriptEngine *arg1 = (ScriptEngine *) 0 ;
  std::string arg2 ;
  std::vector< std::string > result;
  
  arg1 = (ScriptEngine *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg2)->assign(jarg2); 
  result = (arg1)->CompatibleFunctions(arg2);
  jresult = new std::vector< std::string >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ScriptEngine_FunctionsThatStartWith(void * jarg1, const char * jarg2) {
  void * jresult ;
  ScriptEngine *arg1 = (ScriptEngine *) 0 ;
  std::string arg2 ;
  std::vector< std::string > result;
  
  arg1 = (ScriptEngine *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg2)->assign(jarg2); 
  result = (arg1)->FunctionsThatStartWith(arg2);
  jresult = new std::vector< std::string >(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ScriptEngine_StopCurrentScript(void * jarg1) {
  ScriptEngine *arg1 = (ScriptEngine *) 0 ;
  
  arg1 = (ScriptEngine *)jarg1; 
  (arg1)->StopCurrentScript();
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_ScriptEngine_Cast_String(void * jarg1, const char * jarg2) {
  const char * jresult ;
  ScriptEngine *arg1 = (ScriptEngine *) 0 ;
  std::string arg2 ;
  std::string result;
  
  arg1 = (ScriptEngine *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg2)->assign(jarg2); 
  result = (arg1)->Cast_String(arg2);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ScriptEngine_Cast_Color(void * jarg1, const char * jarg2) {
  void * jresult ;
  ScriptEngine *arg1 = (ScriptEngine *) 0 ;
  std::string arg2 ;
  Color_Interop result;
  
  arg1 = (ScriptEngine *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg2)->assign(jarg2); 
  result = (arg1)->Cast_Color(arg2);
  jresult = new Color_Interop(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ScriptEngine_Cast_MapIcon(void * jarg1, const char * jarg2) {
  void * jresult ;
  ScriptEngine *arg1 = (ScriptEngine *) 0 ;
  std::string arg2 ;
  MapIcon_Interop result;
  
  arg1 = (ScriptEngine *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg2)->assign(jarg2); 
  result = (arg1)->Cast_MapIcon(arg2);
  jresult = new MapIcon_Interop(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ScriptEngine_Cast_MapPolyline(void * jarg1, const char * jarg2) {
  void * jresult ;
  ScriptEngine *arg1 = (ScriptEngine *) 0 ;
  std::string arg2 ;
  MapPolyline_Interop result;
  
  arg1 = (ScriptEngine *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg2)->assign(jarg2); 
  result = (arg1)->Cast_MapPolyline(arg2);
  jresult = new MapPolyline_Interop(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ScriptEngine_Cast_MapBackground(void * jarg1, const char * jarg2) {
  void * jresult ;
  ScriptEngine *arg1 = (ScriptEngine *) 0 ;
  std::string arg2 ;
  MapBackground_Interop result;
  
  arg1 = (ScriptEngine *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg2)->assign(jarg2); 
  result = (arg1)->Cast_MapBackground(arg2);
  jresult = new MapBackground_Interop(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ScriptEngine_Cast_MapLayer(void * jarg1, const char * jarg2) {
  void * jresult ;
  ScriptEngine *arg1 = (ScriptEngine *) 0 ;
  std::string arg2 ;
  MapLayer_Interop result;
  
  arg1 = (ScriptEngine *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg2)->assign(jarg2); 
  result = (arg1)->Cast_MapLayer(arg2);
  jresult = new MapLayer_Interop(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ScriptEngine_Cast_VectorFloats(void * jarg1, const char * jarg2) {
  void * jresult ;
  ScriptEngine *arg1 = (ScriptEngine *) 0 ;
  std::string arg2 ;
  std::vector< float > result;
  
  arg1 = (ScriptEngine *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg2)->assign(jarg2); 
  result = (arg1)->Cast_VectorFloats(arg2);
  jresult = new std::vector< float >(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WaterWatch_SubmitToast(const char * jarg1, const char * jarg2) {
  std::string arg1 ;
  std::string arg2 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg1)->assign(jarg1); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg2)->assign(jarg2); 
  WaterWatch::SubmitToast(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2));
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WaterWatch_TryGetToast() {
  void * jresult ;
  Pair< bool,Pair< std::string,std::string > > result;
  
  result = WaterWatch::TryGetToast();
  jresult = new Pair< bool,Pair< std::string,std::string > >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WaterWatch_TryGetAppRequest() {
  void * jresult ;
  Pair< int,Pair< std::string,std::vector< std::string > > > result;
  
  result = WaterWatch::TryGetAppRequest();
  jresult = new Pair< int,Pair< std::string,std::vector< std::string > > >(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WaterWatch_CompleteAppRequest(int jarg1, const char * jarg2) {
  int arg1 ;
  std::string arg2 ;
  
  arg1 = (int)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg2)->assign(jarg2); 
  WaterWatch::CompleteAppRequest(arg1,SWIG_STD_MOVE(arg2));
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_WaterWatch_GetDataDirectory() {
  const char * jresult ;
  std::string result;
  
  result = WaterWatch::GetDataDirectory();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WaterWatch_SetDataDirectory(const char * jarg1) {
  std::string arg1 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg1)->assign(jarg1); 
  WaterWatch::SetDataDirectory(SWIG_STD_MOVE(arg1));
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_WaterWatch_GetTemporaryFilePath(const char * jarg1) {
  const char * jresult ;
  std::string arg1 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg1)->assign(jarg1); 
  result = WaterWatch::GetTemporaryFilePath(SWIG_STD_MOVE(arg1));
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WaterWatch_GeocodeAddress__SWIG_0(const char * jarg1) {
  void * jresult ;
  std::string arg1 ;
  Pair< double,double > result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg1)->assign(jarg1); 
  result = WaterWatch::GeocodeAddress(SWIG_STD_MOVE(arg1));
  jresult = new Pair< double,double >(result); 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_WaterWatch_GeocodeAddress__SWIG_1(double jarg1, double jarg2) {
  const char * jresult ;
  double arg1 ;
  double arg2 ;
  std::string result;
  
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  result = WaterWatch::GeocodeAddress(arg1,arg2);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_WaterWatch_GeocodeElevation(double jarg1, double jarg2) {
  double jresult ;
  double arg1 ;
  double arg2 ;
  double result;
  
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  result = (double)WaterWatch::GeocodeElevation(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WaterWatch_ValidateCoordinates(double jarg1, double jarg2) {
  void * jresult ;
  double arg1 ;
  double arg2 ;
  Pair< double,double > result;
  
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  result = WaterWatch::ValidateCoordinates(arg1,arg2);
  jresult = new Pair< double,double >(result); 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_WaterWatch_Encode_2D_to_1D(double jarg1, double jarg2, double jarg3) {
  double jresult ;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double result;
  
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  result = (double)WaterWatch::Encode_2D_to_1D(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WaterWatch_Decode_1D_to_2D(double jarg1, double jarg2) {
  void * jresult ;
  double arg1 ;
  double arg2 ;
  Pair< double,double > result;
  
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  result = WaterWatch::Decode_1D_to_2D(arg1,arg2);
  jresult = new Pair< double,double >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WaterWatch_PredictNext(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< double > *arg1 = 0 ;
  int arg2 ;
  std::vector< float > result;
  
  arg1 = (std::vector< double > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > const & is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  result = WaterWatch::PredictNext((std::vector< double > const &)*arg1,arg2);
  jresult = new std::vector< float >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WaterWatch_getCurrentTime() {
  void * jresult ;
  cweeDateTime result;
  
  result = WaterWatch::getCurrentTime();
  jresult = new cweeDateTime(result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WaterWatch_RandomInt(int jarg1, int jarg2) {
  int jresult ;
  int arg1 ;
  int arg2 ;
  int result;
  
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)WaterWatch::RandomInt(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_WaterWatch_RandomFloat(float jarg1, float jarg2) {
  float jresult ;
  float arg1 ;
  float arg2 ;
  float result;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  result = (float)WaterWatch::RandomFloat(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_WaterWatch_GetBestMatch(const char * jarg1, void * jarg2) {
  const char * jresult ;
  std::string *arg1 = 0 ;
  std::vector< std::string > *arg2 = 0 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = (std::vector< std::string > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > const & is null", 0);
    return 0;
  } 
  result = WaterWatch::GetBestMatch((std::string const &)*arg1,(std::vector< std::string > const &)*arg2);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WaterWatch_GetNumMultithreadingCores() {
  int jresult ;
  int result;
  
  result = (int)WaterWatch::GetNumMultithreadingCores();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WaterWatch_GetNumLogicalCoresOnMachine() {
  int jresult ;
  int result;
  
  result = (int)WaterWatch::GetNumLogicalCoresOnMachine();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WaterWatch_GetNumPhysicalCoresOnMachine() {
  int jresult ;
  int result;
  
  result = (int)WaterWatch::GetNumPhysicalCoresOnMachine();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_WaterWatch_GetPercentMemoryUsedOfMachine() {
  float jresult ;
  float result;
  
  result = (float)WaterWatch::GetPercentMemoryUsedOfMachine();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_WaterWatch_GetPercentCpuUsedOfMachine() {
  float jresult ;
  float result;
  
  result = (float)WaterWatch::GetPercentCpuUsedOfMachine();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WaterWatch_DoScript(const char * jarg1) {
  void * jresult ;
  std::string arg1 ;
  Awaiter result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg1)->assign(jarg1); 
  result = WaterWatch::DoScript(SWIG_STD_MOVE(arg1));
  jresult = new Awaiter(result); 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_WaterWatch_DoScriptImmediately(const char * jarg1) {
  const char * jresult ;
  std::string arg1 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg1)->assign(jarg1); 
  result = WaterWatch::DoScriptImmediately(SWIG_STD_MOVE(arg1));
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WaterWatch_AddToLog(const char * jarg1, const char * jarg2) {
  std::string arg1 ;
  std::string arg2 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg1)->assign(jarg1); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg2)->assign(jarg2); 
  WaterWatch::AddToLog(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2));
}


SWIGEXPORT double SWIGSTDCALL CSharp_WaterWatch_GetNanosecondsSinceStart() {
  double jresult ;
  double result;
  
  result = (double)WaterWatch::GetNanosecondsSinceStart();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_WaterWatch() {
  void * jresult ;
  WaterWatch *result = 0 ;
  
  result = (WaterWatch *)new WaterWatch();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_WaterWatch(void * jarg1) {
  WaterWatch *arg1 = (WaterWatch *) 0 ;
  
  arg1 = (WaterWatch *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_vector_string_Clear(void * jarg1) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_vector_string_Add(void * jarg1, const char * jarg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  (arg1)->push_back((std::string const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_vector_string_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type result;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  result = ((std::vector< std::string > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_vector_string_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type result;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  result = ((std::vector< std::string > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_vector_string_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type arg2 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (std::vector< std::string >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_vector_string__SWIG_0() {
  void * jresult ;
  std::vector< std::string > *result = 0 ;
  
  result = (std::vector< std::string > *)new std::vector< std::string >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_vector_string__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< std::string > *arg1 = 0 ;
  std::vector< std::string > *result = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > const & is null", 0);
    return 0;
  } 
  result = (std::vector< std::string > *)new std::vector< std::string >((std::vector< std::string > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_vector_string__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< std::string > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< std::string > *)new_std_vector_Sl_std_string_Sg___SWIG_2(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_vector_string_getitemcopy(void * jarg1, int jarg2) {
  const char * jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::string result;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_std_string_Sg__getitemcopy(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_vector_string_getitem(void * jarg1, int jarg2) {
  const char * jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::vector< std::string >::value_type *result = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< std::string >::value_type *) &std_vector_Sl_std_string_Sg__getitem(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_vector_string_setitem(void * jarg1, int jarg2, const char * jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::string *arg3 = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  try {
    std_vector_Sl_std_string_Sg__setitem(arg1,arg2,(std::string const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_vector_string_AddRange(void * jarg1, void * jarg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string > *arg2 = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (std::vector< std::string > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > const & is null", 0);
    return ;
  } 
  std_vector_Sl_std_string_Sg__AddRange(arg1,(std::vector< std::string > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_vector_string_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< std::string > *result = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< std::string > *)std_vector_Sl_std_string_Sg__GetRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_vector_string_Insert(void * jarg1, int jarg2, const char * jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::string *arg3 = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  try {
    std_vector_Sl_std_string_Sg__Insert(arg1,arg2,(std::string const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_vector_string_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::vector< std::string > *arg3 = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< std::string > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_std_string_Sg__InsertRange(arg1,arg2,(std::vector< std::string > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_vector_string_RemoveAt(void * jarg1, int jarg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_std_string_Sg__RemoveAt(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_vector_string_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_std_string_Sg__RemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_vector_string_Repeat(const char * jarg1, int jarg2) {
  void * jresult ;
  std::string *arg1 = 0 ;
  int arg2 ;
  std::vector< std::string > *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< std::string > *)std_vector_Sl_std_string_Sg__Repeat((std::string const &)*arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_vector_string_Reverse__SWIG_0(void * jarg1) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  std_vector_Sl_std_string_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_vector_string_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_std_string_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_vector_string_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::vector< std::string > *arg3 = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< std::string > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_std_string_Sg__SetRange(arg1,arg2,(std::vector< std::string > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_vector_string_Contains(void * jarg1, const char * jarg2) {
  unsigned int jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)std_vector_Sl_std_string_Sg__Contains(arg1,(std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_vector_string_IndexOf(void * jarg1, const char * jarg2) {
  int jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (int)std_vector_Sl_std_string_Sg__IndexOf(arg1,(std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_vector_string_LastIndexOf(void * jarg1, const char * jarg2) {
  int jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (int)std_vector_Sl_std_string_Sg__LastIndexOf(arg1,(std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_vector_string_Remove(void * jarg1, const char * jarg2) {
  unsigned int jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)std_vector_Sl_std_string_Sg__Remove(arg1,(std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_vector_string(void * jarg1) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_pair_timeseries__SWIG_0() {
  void * jresult ;
  Pair< cweeDateTime,float > *result = 0 ;
  
  result = (Pair< cweeDateTime,float > *)new Pair< cweeDateTime,float >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_pair_timeseries__SWIG_1(void * jarg1, float jarg2) {
  void * jresult ;
  cweeDateTime *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  Pair< cweeDateTime,float > *result = 0 ;
  
  arg1 = (cweeDateTime *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "cweeDateTime const & is null", 0);
    return 0;
  } 
  temp2 = (float)jarg2; 
  arg2 = &temp2; 
  result = (Pair< cweeDateTime,float > *)new Pair< cweeDateTime,float >((cweeDateTime const &)*arg1,(float const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_pair_timeseries__SWIG_2(void * jarg1, void * jarg2) {
  void * jresult ;
  cweeDateTime *arg1 = 0 ;
  float *arg2 = 0 ;
  std::unique_ptr< cweeDateTime > rvrdeleter1 ;
  std::unique_ptr< float > rvrdeleter2 ;
  Pair< cweeDateTime,float > *result = 0 ;
  
  arg1 = (cweeDateTime *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "cweeDateTime && is null", 0);
    return 0;
  }
  rvrdeleter1.reset(arg1); 
  arg2 = (float *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "float && is null", 0);
    return 0;
  }
  rvrdeleter2.reset(arg2); 
  result = (Pair< cweeDateTime,float > *)new Pair< cweeDateTime,float >((cweeDateTime &&)*arg1,(float &&)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_pair_timeseries__SWIG_3(void * jarg1) {
  void * jresult ;
  std::pair< cweeDateTime,float > *arg1 = 0 ;
  Pair< cweeDateTime,float > *result = 0 ;
  
  arg1 = (std::pair< cweeDateTime,float > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::pair< cweeDateTime,float > const & is null", 0);
    return 0;
  } 
  result = (Pair< cweeDateTime,float > *)new Pair< cweeDateTime,float >((std::pair< cweeDateTime,float > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pair_timeseries_first_set(void * jarg1, void * jarg2) {
  Pair< cweeDateTime,float > *arg1 = (Pair< cweeDateTime,float > *) 0 ;
  cweeDateTime *arg2 = (cweeDateTime *) 0 ;
  
  arg1 = (Pair< cweeDateTime,float > *)jarg1; 
  arg2 = (cweeDateTime *)jarg2; 
  if (arg1) (arg1)->first = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pair_timeseries_first_get(void * jarg1) {
  void * jresult ;
  Pair< cweeDateTime,float > *arg1 = (Pair< cweeDateTime,float > *) 0 ;
  cweeDateTime *result = 0 ;
  
  arg1 = (Pair< cweeDateTime,float > *)jarg1; 
  result = (cweeDateTime *)& ((arg1)->first);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pair_timeseries_second_set(void * jarg1, float jarg2) {
  Pair< cweeDateTime,float > *arg1 = (Pair< cweeDateTime,float > *) 0 ;
  float arg2 ;
  
  arg1 = (Pair< cweeDateTime,float > *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->second = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_pair_timeseries_second_get(void * jarg1) {
  float jresult ;
  Pair< cweeDateTime,float > *arg1 = (Pair< cweeDateTime,float > *) 0 ;
  float result;
  
  arg1 = (Pair< cweeDateTime,float > *)jarg1; 
  result = (float) ((arg1)->second);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_pair_timeseries(void * jarg1) {
  Pair< cweeDateTime,float > *arg1 = (Pair< cweeDateTime,float > *) 0 ;
  
  arg1 = (Pair< cweeDateTime,float > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_pair_string_vector_string__SWIG_0() {
  void * jresult ;
  Pair< std::string,std::vector< std::string > > *result = 0 ;
  
  result = (Pair< std::string,std::vector< std::string > > *)new Pair< std::string,std::vector< std::string > >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_pair_string_vector_string__SWIG_1(const char * jarg1, void * jarg2) {
  void * jresult ;
  std::string *arg1 = 0 ;
  std::vector< std::string > *arg2 = 0 ;
  Pair< std::string,std::vector< std::string > > *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = (std::vector< std::string > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > const & is null", 0);
    return 0;
  } 
  result = (Pair< std::string,std::vector< std::string > > *)new Pair< std::string,std::vector< std::string > >((std::string const &)*arg1,(std::vector< std::string > const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_pair_string_vector_string__SWIG_2(void * jarg1, void * jarg2) {
  void * jresult ;
  std::string *arg1 = 0 ;
  std::vector< std::string > *arg2 = 0 ;
  std::unique_ptr< std::string > rvrdeleter1 ;
  std::unique_ptr< std::vector< std::string > > rvrdeleter2 ;
  Pair< std::string,std::vector< std::string > > *result = 0 ;
  
  arg1 = (std::string *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::string && is null", 0);
    return 0;
  }
  rvrdeleter1.reset(arg1); 
  arg2 = (std::vector< std::string > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > && is null", 0);
    return 0;
  }
  rvrdeleter2.reset(arg2); 
  result = (Pair< std::string,std::vector< std::string > > *)new Pair< std::string,std::vector< std::string > >((std::string &&)*arg1,(std::vector< std::string > &&)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_pair_string_vector_string__SWIG_3(void * jarg1) {
  void * jresult ;
  std::pair< std::string,std::vector< std::string > > *arg1 = 0 ;
  Pair< std::string,std::vector< std::string > > *result = 0 ;
  
  arg1 = (std::pair< std::string,std::vector< std::string > > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::pair< std::string,std::vector< std::string > > const & is null", 0);
    return 0;
  } 
  result = (Pair< std::string,std::vector< std::string > > *)new Pair< std::string,std::vector< std::string > >((std::pair< std::string,std::vector< std::string > > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pair_string_vector_string_first_set(void * jarg1, const char * jarg2) {
  Pair< std::string,std::vector< std::string > > *arg1 = (Pair< std::string,std::vector< std::string > > *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (Pair< std::string,std::vector< std::string > > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->first = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_pair_string_vector_string_first_get(void * jarg1) {
  const char * jresult ;
  Pair< std::string,std::vector< std::string > > *arg1 = (Pair< std::string,std::vector< std::string > > *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (Pair< std::string,std::vector< std::string > > *)jarg1; 
  result = (std::string *) & ((arg1)->first);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pair_string_vector_string_second_set(void * jarg1, void * jarg2) {
  Pair< std::string,std::vector< std::string > > *arg1 = (Pair< std::string,std::vector< std::string > > *) 0 ;
  std::vector< std::string > *arg2 = (std::vector< std::string > *) 0 ;
  
  arg1 = (Pair< std::string,std::vector< std::string > > *)jarg1; 
  arg2 = (std::vector< std::string > *)jarg2; 
  if (arg1) (arg1)->second = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pair_string_vector_string_second_get(void * jarg1) {
  void * jresult ;
  Pair< std::string,std::vector< std::string > > *arg1 = (Pair< std::string,std::vector< std::string > > *) 0 ;
  std::vector< std::string > *result = 0 ;
  
  arg1 = (Pair< std::string,std::vector< std::string > > *)jarg1; 
  result = (std::vector< std::string > *)& ((arg1)->second);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_pair_string_vector_string(void * jarg1) {
  Pair< std::string,std::vector< std::string > > *arg1 = (Pair< std::string,std::vector< std::string > > *) 0 ;
  
  arg1 = (Pair< std::string,std::vector< std::string > > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_pair_int_pair_string_vector_string__SWIG_0() {
  void * jresult ;
  Pair< int,Pair< std::string,std::vector< std::string > > > *result = 0 ;
  
  result = (Pair< int,Pair< std::string,std::vector< std::string > > > *)new Pair< int,Pair< std::string,std::vector< std::string > > >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_pair_int_pair_string_vector_string__SWIG_1(int jarg1, void * jarg2) {
  void * jresult ;
  int *arg1 = 0 ;
  Pair< std::string,std::vector< std::string > > *arg2 = 0 ;
  int temp1 ;
  Pair< int,Pair< std::string,std::vector< std::string > > > *result = 0 ;
  
  temp1 = (int)jarg1; 
  arg1 = &temp1; 
  arg2 = (Pair< std::string,std::vector< std::string > > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Pair< std::string,std::vector< std::string > > const & is null", 0);
    return 0;
  } 
  result = (Pair< int,Pair< std::string,std::vector< std::string > > > *)new Pair< int,Pair< std::string,std::vector< std::string > > >((int const &)*arg1,(Pair< std::string,std::vector< std::string > > const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_pair_int_pair_string_vector_string__SWIG_2(void * jarg1, void * jarg2) {
  void * jresult ;
  int *arg1 = 0 ;
  Pair< std::string,std::vector< std::string > > *arg2 = 0 ;
  std::unique_ptr< int > rvrdeleter1 ;
  std::unique_ptr< Pair< std::string,std::vector< std::string > > > rvrdeleter2 ;
  Pair< int,Pair< std::string,std::vector< std::string > > > *result = 0 ;
  
  arg1 = (int *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "int && is null", 0);
    return 0;
  }
  rvrdeleter1.reset(arg1); 
  arg2 = (Pair< std::string,std::vector< std::string > > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Pair< std::string,std::vector< std::string > > && is null", 0);
    return 0;
  }
  rvrdeleter2.reset(arg2); 
  result = (Pair< int,Pair< std::string,std::vector< std::string > > > *)new Pair< int,Pair< std::string,std::vector< std::string > > >((int &&)*arg1,(Pair< std::string,std::vector< std::string > > &&)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_pair_int_pair_string_vector_string__SWIG_3(void * jarg1) {
  void * jresult ;
  std::pair< int,Pair< std::string,std::vector< std::string > > > *arg1 = 0 ;
  Pair< int,Pair< std::string,std::vector< std::string > > > *result = 0 ;
  
  arg1 = (std::pair< int,Pair< std::string,std::vector< std::string > > > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::pair< int,Pair< std::string,std::vector< std::string > > > const & is null", 0);
    return 0;
  } 
  result = (Pair< int,Pair< std::string,std::vector< std::string > > > *)new Pair< int,Pair< std::string,std::vector< std::string > > >((std::pair< int,Pair< std::string,std::vector< std::string > > > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pair_int_pair_string_vector_string_first_set(void * jarg1, int jarg2) {
  Pair< int,Pair< std::string,std::vector< std::string > > > *arg1 = (Pair< int,Pair< std::string,std::vector< std::string > > > *) 0 ;
  int arg2 ;
  
  arg1 = (Pair< int,Pair< std::string,std::vector< std::string > > > *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->first = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pair_int_pair_string_vector_string_first_get(void * jarg1) {
  int jresult ;
  Pair< int,Pair< std::string,std::vector< std::string > > > *arg1 = (Pair< int,Pair< std::string,std::vector< std::string > > > *) 0 ;
  int result;
  
  arg1 = (Pair< int,Pair< std::string,std::vector< std::string > > > *)jarg1; 
  result = (int) ((arg1)->first);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pair_int_pair_string_vector_string_second_set(void * jarg1, void * jarg2) {
  Pair< int,Pair< std::string,std::vector< std::string > > > *arg1 = (Pair< int,Pair< std::string,std::vector< std::string > > > *) 0 ;
  Pair< std::string,std::vector< std::string > > *arg2 = (Pair< std::string,std::vector< std::string > > *) 0 ;
  
  arg1 = (Pair< int,Pair< std::string,std::vector< std::string > > > *)jarg1; 
  arg2 = (Pair< std::string,std::vector< std::string > > *)jarg2; 
  if (arg1) (arg1)->second = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pair_int_pair_string_vector_string_second_get(void * jarg1) {
  void * jresult ;
  Pair< int,Pair< std::string,std::vector< std::string > > > *arg1 = (Pair< int,Pair< std::string,std::vector< std::string > > > *) 0 ;
  Pair< std::string,std::vector< std::string > > *result = 0 ;
  
  arg1 = (Pair< int,Pair< std::string,std::vector< std::string > > > *)jarg1; 
  result = (Pair< std::string,std::vector< std::string > > *)& ((arg1)->second);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_pair_int_pair_string_vector_string(void * jarg1) {
  Pair< int,Pair< std::string,std::vector< std::string > > > *arg1 = (Pair< int,Pair< std::string,std::vector< std::string > > > *) 0 ;
  
  arg1 = (Pair< int,Pair< std::string,std::vector< std::string > > > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_pair_double_double__SWIG_0() {
  void * jresult ;
  Pair< double,double > *result = 0 ;
  
  result = (Pair< double,double > *)new Pair< double,double >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_pair_double_double__SWIG_1(double jarg1, double jarg2) {
  void * jresult ;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  Pair< double,double > *result = 0 ;
  
  temp1 = (double)jarg1; 
  arg1 = &temp1; 
  temp2 = (double)jarg2; 
  arg2 = &temp2; 
  result = (Pair< double,double > *)new Pair< double,double >((double const &)*arg1,(double const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_pair_double_double__SWIG_2(void * jarg1, void * jarg2) {
  void * jresult ;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  std::unique_ptr< double > rvrdeleter1 ;
  std::unique_ptr< double > rvrdeleter2 ;
  Pair< double,double > *result = 0 ;
  
  arg1 = (double *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "double && is null", 0);
    return 0;
  }
  rvrdeleter1.reset(arg1); 
  arg2 = (double *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "double && is null", 0);
    return 0;
  }
  rvrdeleter2.reset(arg2); 
  result = (Pair< double,double > *)new Pair< double,double >((double &&)*arg1,(double &&)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_pair_double_double__SWIG_3(void * jarg1) {
  void * jresult ;
  std::pair< double,double > *arg1 = 0 ;
  Pair< double,double > *result = 0 ;
  
  arg1 = (std::pair< double,double > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::pair< double,double > const & is null", 0);
    return 0;
  } 
  result = (Pair< double,double > *)new Pair< double,double >((std::pair< double,double > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pair_double_double_first_set(void * jarg1, double jarg2) {
  Pair< double,double > *arg1 = (Pair< double,double > *) 0 ;
  double arg2 ;
  
  arg1 = (Pair< double,double > *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->first = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_pair_double_double_first_get(void * jarg1) {
  double jresult ;
  Pair< double,double > *arg1 = (Pair< double,double > *) 0 ;
  double result;
  
  arg1 = (Pair< double,double > *)jarg1; 
  result = (double) ((arg1)->first);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pair_double_double_second_set(void * jarg1, double jarg2) {
  Pair< double,double > *arg1 = (Pair< double,double > *) 0 ;
  double arg2 ;
  
  arg1 = (Pair< double,double > *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->second = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_pair_double_double_second_get(void * jarg1) {
  double jresult ;
  Pair< double,double > *arg1 = (Pair< double,double > *) 0 ;
  double result;
  
  arg1 = (Pair< double,double > *)jarg1; 
  result = (double) ((arg1)->second);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_pair_double_double(void * jarg1) {
  Pair< double,double > *arg1 = (Pair< double,double > *) 0 ;
  
  arg1 = (Pair< double,double > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_pair_string_string__SWIG_0() {
  void * jresult ;
  Pair< std::string,std::string > *result = 0 ;
  
  result = (Pair< std::string,std::string > *)new Pair< std::string,std::string >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_pair_string_string__SWIG_1(const char * jarg1, const char * jarg2) {
  void * jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  Pair< std::string,std::string > *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (Pair< std::string,std::string > *)new Pair< std::string,std::string >((std::string const &)*arg1,(std::string const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_pair_string_string__SWIG_2(void * jarg1, void * jarg2) {
  void * jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::unique_ptr< std::string > rvrdeleter1 ;
  std::unique_ptr< std::string > rvrdeleter2 ;
  Pair< std::string,std::string > *result = 0 ;
  
  arg1 = (std::string *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::string && is null", 0);
    return 0;
  }
  rvrdeleter1.reset(arg1); 
  arg2 = (std::string *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::string && is null", 0);
    return 0;
  }
  rvrdeleter2.reset(arg2); 
  result = (Pair< std::string,std::string > *)new Pair< std::string,std::string >((std::string &&)*arg1,(std::string &&)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_pair_string_string__SWIG_3(void * jarg1) {
  void * jresult ;
  std::pair< std::string,std::string > *arg1 = 0 ;
  Pair< std::string,std::string > *result = 0 ;
  
  arg1 = (std::pair< std::string,std::string > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::pair< std::string,std::string > const & is null", 0);
    return 0;
  } 
  result = (Pair< std::string,std::string > *)new Pair< std::string,std::string >((std::pair< std::string,std::string > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pair_string_string_first_set(void * jarg1, const char * jarg2) {
  Pair< std::string,std::string > *arg1 = (Pair< std::string,std::string > *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (Pair< std::string,std::string > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->first = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_pair_string_string_first_get(void * jarg1) {
  const char * jresult ;
  Pair< std::string,std::string > *arg1 = (Pair< std::string,std::string > *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (Pair< std::string,std::string > *)jarg1; 
  result = (std::string *) & ((arg1)->first);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pair_string_string_second_set(void * jarg1, const char * jarg2) {
  Pair< std::string,std::string > *arg1 = (Pair< std::string,std::string > *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (Pair< std::string,std::string > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->second = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_pair_string_string_second_get(void * jarg1) {
  const char * jresult ;
  Pair< std::string,std::string > *arg1 = (Pair< std::string,std::string > *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (Pair< std::string,std::string > *)jarg1; 
  result = (std::string *) & ((arg1)->second);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_pair_string_string(void * jarg1) {
  Pair< std::string,std::string > *arg1 = (Pair< std::string,std::string > *) 0 ;
  
  arg1 = (Pair< std::string,std::string > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_pair_bool_pair_string_string__SWIG_0() {
  void * jresult ;
  Pair< bool,Pair< std::string,std::string > > *result = 0 ;
  
  result = (Pair< bool,Pair< std::string,std::string > > *)new Pair< bool,Pair< std::string,std::string > >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_pair_bool_pair_string_string__SWIG_1(unsigned int jarg1, void * jarg2) {
  void * jresult ;
  bool *arg1 = 0 ;
  Pair< std::string,std::string > *arg2 = 0 ;
  bool temp1 ;
  Pair< bool,Pair< std::string,std::string > > *result = 0 ;
  
  temp1 = jarg1 ? true : false; 
  arg1 = &temp1; 
  arg2 = (Pair< std::string,std::string > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Pair< std::string,std::string > const & is null", 0);
    return 0;
  } 
  result = (Pair< bool,Pair< std::string,std::string > > *)new Pair< bool,Pair< std::string,std::string > >((bool const &)*arg1,(Pair< std::string,std::string > const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_pair_bool_pair_string_string__SWIG_2(void * jarg1, void * jarg2) {
  void * jresult ;
  bool *arg1 = 0 ;
  Pair< std::string,std::string > *arg2 = 0 ;
  std::unique_ptr< bool > rvrdeleter1 ;
  std::unique_ptr< Pair< std::string,std::string > > rvrdeleter2 ;
  Pair< bool,Pair< std::string,std::string > > *result = 0 ;
  
  arg1 = (bool *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "bool && is null", 0);
    return 0;
  }
  rvrdeleter1.reset(arg1); 
  arg2 = (Pair< std::string,std::string > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Pair< std::string,std::string > && is null", 0);
    return 0;
  }
  rvrdeleter2.reset(arg2); 
  result = (Pair< bool,Pair< std::string,std::string > > *)new Pair< bool,Pair< std::string,std::string > >((bool &&)*arg1,(Pair< std::string,std::string > &&)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_pair_bool_pair_string_string__SWIG_3(void * jarg1) {
  void * jresult ;
  std::pair< bool,Pair< std::string,std::string > > *arg1 = 0 ;
  Pair< bool,Pair< std::string,std::string > > *result = 0 ;
  
  arg1 = (std::pair< bool,Pair< std::string,std::string > > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::pair< bool,Pair< std::string,std::string > > const & is null", 0);
    return 0;
  } 
  result = (Pair< bool,Pair< std::string,std::string > > *)new Pair< bool,Pair< std::string,std::string > >((std::pair< bool,Pair< std::string,std::string > > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pair_bool_pair_string_string_first_set(void * jarg1, unsigned int jarg2) {
  Pair< bool,Pair< std::string,std::string > > *arg1 = (Pair< bool,Pair< std::string,std::string > > *) 0 ;
  bool arg2 ;
  
  arg1 = (Pair< bool,Pair< std::string,std::string > > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->first = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pair_bool_pair_string_string_first_get(void * jarg1) {
  unsigned int jresult ;
  Pair< bool,Pair< std::string,std::string > > *arg1 = (Pair< bool,Pair< std::string,std::string > > *) 0 ;
  bool result;
  
  arg1 = (Pair< bool,Pair< std::string,std::string > > *)jarg1; 
  result = (bool) ((arg1)->first);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pair_bool_pair_string_string_second_set(void * jarg1, void * jarg2) {
  Pair< bool,Pair< std::string,std::string > > *arg1 = (Pair< bool,Pair< std::string,std::string > > *) 0 ;
  Pair< std::string,std::string > *arg2 = (Pair< std::string,std::string > *) 0 ;
  
  arg1 = (Pair< bool,Pair< std::string,std::string > > *)jarg1; 
  arg2 = (Pair< std::string,std::string > *)jarg2; 
  if (arg1) (arg1)->second = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pair_bool_pair_string_string_second_get(void * jarg1) {
  void * jresult ;
  Pair< bool,Pair< std::string,std::string > > *arg1 = (Pair< bool,Pair< std::string,std::string > > *) 0 ;
  Pair< std::string,std::string > *result = 0 ;
  
  arg1 = (Pair< bool,Pair< std::string,std::string > > *)jarg1; 
  result = (Pair< std::string,std::string > *)& ((arg1)->second);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_pair_bool_pair_string_string(void * jarg1) {
  Pair< bool,Pair< std::string,std::string > > *arg1 = (Pair< bool,Pair< std::string,std::string > > *) 0 ;
  
  arg1 = (Pair< bool,Pair< std::string,std::string > > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_vector_float_Clear(void * jarg1) {
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  
  arg1 = (std::vector< float > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_vector_float_Add(void * jarg1, float jarg2) {
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  
  arg1 = (std::vector< float > *)jarg1; 
  temp2 = (float)jarg2; 
  arg2 = &temp2; 
  (arg1)->push_back((float const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_vector_float_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  std::vector< float >::size_type result;
  
  arg1 = (std::vector< float > *)jarg1; 
  result = ((std::vector< float > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_vector_float_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  std::vector< float >::size_type result;
  
  arg1 = (std::vector< float > *)jarg1; 
  result = ((std::vector< float > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_vector_float_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  std::vector< float >::size_type arg2 ;
  
  arg1 = (std::vector< float > *)jarg1; 
  arg2 = (std::vector< float >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_vector_float__SWIG_0() {
  void * jresult ;
  std::vector< float > *result = 0 ;
  
  result = (std::vector< float > *)new std::vector< float >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_vector_float__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< float > *arg1 = 0 ;
  std::vector< float > *result = 0 ;
  
  arg1 = (std::vector< float > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< float > const & is null", 0);
    return 0;
  } 
  result = (std::vector< float > *)new std::vector< float >((std::vector< float > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_vector_float__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< float > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< float > *)new_std_vector_Sl_float_Sg___SWIG_2(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_vector_float_getitemcopy(void * jarg1, int jarg2) {
  float jresult ;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  int arg2 ;
  float result;
  
  arg1 = (std::vector< float > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (float)std_vector_Sl_float_Sg__getitemcopy(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_vector_float_getitem(void * jarg1, int jarg2) {
  float jresult ;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  int arg2 ;
  std::vector< float >::value_type *result = 0 ;
  
  arg1 = (std::vector< float > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< float >::value_type *) &std_vector_Sl_float_Sg__getitem(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_vector_float_setitem(void * jarg1, int jarg2, float jarg3) {
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  int arg2 ;
  float *arg3 = 0 ;
  float temp3 ;
  
  arg1 = (std::vector< float > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (float)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_float_Sg__setitem(arg1,arg2,(float const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_vector_float_AddRange(void * jarg1, void * jarg2) {
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  std::vector< float > *arg2 = 0 ;
  
  arg1 = (std::vector< float > *)jarg1; 
  arg2 = (std::vector< float > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< float > const & is null", 0);
    return ;
  } 
  std_vector_Sl_float_Sg__AddRange(arg1,(std::vector< float > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_vector_float_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< float > *result = 0 ;
  
  arg1 = (std::vector< float > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< float > *)std_vector_Sl_float_Sg__GetRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_vector_float_Insert(void * jarg1, int jarg2, float jarg3) {
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  int arg2 ;
  float *arg3 = 0 ;
  float temp3 ;
  
  arg1 = (std::vector< float > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (float)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_float_Sg__Insert(arg1,arg2,(float const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_vector_float_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  int arg2 ;
  std::vector< float > *arg3 = 0 ;
  
  arg1 = (std::vector< float > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< float > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< float > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_float_Sg__InsertRange(arg1,arg2,(std::vector< float > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_vector_float_RemoveAt(void * jarg1, int jarg2) {
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< float > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_float_Sg__RemoveAt(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_vector_float_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< float > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_float_Sg__RemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_vector_float_Repeat(float jarg1, int jarg2) {
  void * jresult ;
  float *arg1 = 0 ;
  int arg2 ;
  float temp1 ;
  std::vector< float > *result = 0 ;
  
  temp1 = (float)jarg1; 
  arg1 = &temp1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< float > *)std_vector_Sl_float_Sg__Repeat((float const &)*arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_vector_float_Reverse__SWIG_0(void * jarg1) {
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  
  arg1 = (std::vector< float > *)jarg1; 
  std_vector_Sl_float_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_vector_float_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< float > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_float_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_vector_float_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  int arg2 ;
  std::vector< float > *arg3 = 0 ;
  
  arg1 = (std::vector< float > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< float > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< float > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_float_Sg__SetRange(arg1,arg2,(std::vector< float > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_vector_float_Contains(void * jarg1, float jarg2) {
  unsigned int jresult ;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  bool result;
  
  arg1 = (std::vector< float > *)jarg1; 
  temp2 = (float)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_vector_Sl_float_Sg__Contains(arg1,(float const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_vector_float_IndexOf(void * jarg1, float jarg2) {
  int jresult ;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  int result;
  
  arg1 = (std::vector< float > *)jarg1; 
  temp2 = (float)jarg2; 
  arg2 = &temp2; 
  result = (int)std_vector_Sl_float_Sg__IndexOf(arg1,(float const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_vector_float_LastIndexOf(void * jarg1, float jarg2) {
  int jresult ;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  int result;
  
  arg1 = (std::vector< float > *)jarg1; 
  temp2 = (float)jarg2; 
  arg2 = &temp2; 
  result = (int)std_vector_Sl_float_Sg__LastIndexOf(arg1,(float const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_vector_float_Remove(void * jarg1, float jarg2) {
  unsigned int jresult ;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  bool result;
  
  arg1 = (std::vector< float > *)jarg1; 
  temp2 = (float)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_vector_Sl_float_Sg__Remove(arg1,(float const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_vector_float(void * jarg1) {
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  
  arg1 = (std::vector< float > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_vector_double_Clear(void * jarg1) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_vector_double_Add(void * jarg1, double jarg2) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  temp2 = (double)jarg2; 
  arg2 = &temp2; 
  (arg1)->push_back((double const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_vector_double_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type result;
  
  arg1 = (std::vector< double > *)jarg1; 
  result = ((std::vector< double > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_vector_double_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type result;
  
  arg1 = (std::vector< double > *)jarg1; 
  result = ((std::vector< double > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_vector_double_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type arg2 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  arg2 = (std::vector< double >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_vector_double__SWIG_0() {
  void * jresult ;
  std::vector< double > *result = 0 ;
  
  result = (std::vector< double > *)new std::vector< double >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_vector_double__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< double > *arg1 = 0 ;
  std::vector< double > *result = 0 ;
  
  arg1 = (std::vector< double > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > const & is null", 0);
    return 0;
  } 
  result = (std::vector< double > *)new std::vector< double >((std::vector< double > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_vector_double__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< double > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< double > *)new_std_vector_Sl_double_Sg___SWIG_2(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_vector_double_getitemcopy(void * jarg1, int jarg2) {
  double jresult ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  int arg2 ;
  double result;
  
  arg1 = (std::vector< double > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (double)std_vector_Sl_double_Sg__getitemcopy(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_vector_double_getitem(void * jarg1, int jarg2) {
  double jresult ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  int arg2 ;
  std::vector< double >::value_type *result = 0 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< double >::value_type *) &std_vector_Sl_double_Sg__getitem(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_vector_double_setitem(void * jarg1, int jarg2, double jarg3) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  int arg2 ;
  double *arg3 = 0 ;
  double temp3 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (double)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_double_Sg__setitem(arg1,arg2,(double const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_vector_double_AddRange(void * jarg1, void * jarg2) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double > *arg2 = 0 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  arg2 = (std::vector< double > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > const & is null", 0);
    return ;
  } 
  std_vector_Sl_double_Sg__AddRange(arg1,(std::vector< double > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_vector_double_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< double > *result = 0 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< double > *)std_vector_Sl_double_Sg__GetRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_vector_double_Insert(void * jarg1, int jarg2, double jarg3) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  int arg2 ;
  double *arg3 = 0 ;
  double temp3 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (double)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_double_Sg__Insert(arg1,arg2,(double const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_vector_double_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  int arg2 ;
  std::vector< double > *arg3 = 0 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< double > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_double_Sg__InsertRange(arg1,arg2,(std::vector< double > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_vector_double_RemoveAt(void * jarg1, int jarg2) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_double_Sg__RemoveAt(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_vector_double_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_double_Sg__RemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_vector_double_Repeat(double jarg1, int jarg2) {
  void * jresult ;
  double *arg1 = 0 ;
  int arg2 ;
  double temp1 ;
  std::vector< double > *result = 0 ;
  
  temp1 = (double)jarg1; 
  arg1 = &temp1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< double > *)std_vector_Sl_double_Sg__Repeat((double const &)*arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_vector_double_Reverse__SWIG_0(void * jarg1) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  std_vector_Sl_double_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_vector_double_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_double_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_vector_double_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  int arg2 ;
  std::vector< double > *arg3 = 0 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< double > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_double_Sg__SetRange(arg1,arg2,(std::vector< double > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_vector_double_Contains(void * jarg1, double jarg2) {
  unsigned int jresult ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  bool result;
  
  arg1 = (std::vector< double > *)jarg1; 
  temp2 = (double)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_vector_Sl_double_Sg__Contains(arg1,(double const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_vector_double_IndexOf(void * jarg1, double jarg2) {
  int jresult ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  int result;
  
  arg1 = (std::vector< double > *)jarg1; 
  temp2 = (double)jarg2; 
  arg2 = &temp2; 
  result = (int)std_vector_Sl_double_Sg__IndexOf(arg1,(double const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_vector_double_LastIndexOf(void * jarg1, double jarg2) {
  int jresult ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  int result;
  
  arg1 = (std::vector< double > *)jarg1; 
  temp2 = (double)jarg2; 
  arg2 = &temp2; 
  result = (int)std_vector_Sl_double_Sg__LastIndexOf(arg1,(double const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_vector_double_Remove(void * jarg1, double jarg2) {
  unsigned int jresult ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  bool result;
  
  arg1 = (std::vector< double > *)jarg1; 
  temp2 = (double)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_vector_Sl_double_Sg__Remove(arg1,(double const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_vector_double(void * jarg1) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_vector_pair_timeseries_Clear(void * jarg1) {
  std::vector< Pair< cweeDateTime,float > > *arg1 = (std::vector< Pair< cweeDateTime,float > > *) 0 ;
  
  arg1 = (std::vector< Pair< cweeDateTime,float > > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_vector_pair_timeseries_Add(void * jarg1, void * jarg2) {
  std::vector< Pair< cweeDateTime,float > > *arg1 = (std::vector< Pair< cweeDateTime,float > > *) 0 ;
  Pair< cweeDateTime,float > *arg2 = 0 ;
  
  arg1 = (std::vector< Pair< cweeDateTime,float > > *)jarg1; 
  arg2 = (Pair< cweeDateTime,float > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Pair< cweeDateTime,float > const & is null", 0);
    return ;
  } 
  (arg1)->push_back((Pair< cweeDateTime,float > const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_vector_pair_timeseries_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< Pair< cweeDateTime,float > > *arg1 = (std::vector< Pair< cweeDateTime,float > > *) 0 ;
  std::vector< Pair< cweeDateTime,float > >::size_type result;
  
  arg1 = (std::vector< Pair< cweeDateTime,float > > *)jarg1; 
  result = ((std::vector< Pair< cweeDateTime,float > > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_vector_pair_timeseries_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< Pair< cweeDateTime,float > > *arg1 = (std::vector< Pair< cweeDateTime,float > > *) 0 ;
  std::vector< Pair< cweeDateTime,float > >::size_type result;
  
  arg1 = (std::vector< Pair< cweeDateTime,float > > *)jarg1; 
  result = ((std::vector< Pair< cweeDateTime,float > > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_vector_pair_timeseries_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< Pair< cweeDateTime,float > > *arg1 = (std::vector< Pair< cweeDateTime,float > > *) 0 ;
  std::vector< Pair< cweeDateTime,float > >::size_type arg2 ;
  
  arg1 = (std::vector< Pair< cweeDateTime,float > > *)jarg1; 
  arg2 = (std::vector< Pair< cweeDateTime,float > >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_vector_pair_timeseries__SWIG_0() {
  void * jresult ;
  std::vector< Pair< cweeDateTime,float > > *result = 0 ;
  
  result = (std::vector< Pair< cweeDateTime,float > > *)new std::vector< Pair< cweeDateTime,float > >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_vector_pair_timeseries__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< Pair< cweeDateTime,float > > *arg1 = 0 ;
  std::vector< Pair< cweeDateTime,float > > *result = 0 ;
  
  arg1 = (std::vector< Pair< cweeDateTime,float > > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< Pair< cweeDateTime,float > > const & is null", 0);
    return 0;
  } 
  result = (std::vector< Pair< cweeDateTime,float > > *)new std::vector< Pair< cweeDateTime,float > >((std::vector< Pair< cweeDateTime,float > > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_vector_pair_timeseries__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< Pair< cweeDateTime,float > > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< Pair< cweeDateTime,float > > *)new_std_vector_Sl_Pair_Sl_cweeDateTime_Sc_float_Sg__Sg___SWIG_2(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_vector_pair_timeseries_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< Pair< cweeDateTime,float > > *arg1 = (std::vector< Pair< cweeDateTime,float > > *) 0 ;
  int arg2 ;
  Pair< cweeDateTime,float > result;
  
  arg1 = (std::vector< Pair< cweeDateTime,float > > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_Pair_Sl_cweeDateTime_Sc_float_Sg__Sg__getitemcopy(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = new Pair< cweeDateTime,float >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_vector_pair_timeseries_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< Pair< cweeDateTime,float > > *arg1 = (std::vector< Pair< cweeDateTime,float > > *) 0 ;
  int arg2 ;
  std::vector< Pair< cweeDateTime,float > >::value_type *result = 0 ;
  
  arg1 = (std::vector< Pair< cweeDateTime,float > > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< Pair< cweeDateTime,float > >::value_type *) &std_vector_Sl_Pair_Sl_cweeDateTime_Sc_float_Sg__Sg__getitem(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_vector_pair_timeseries_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< Pair< cweeDateTime,float > > *arg1 = (std::vector< Pair< cweeDateTime,float > > *) 0 ;
  int arg2 ;
  Pair< cweeDateTime,float > *arg3 = 0 ;
  
  arg1 = (std::vector< Pair< cweeDateTime,float > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Pair< cweeDateTime,float > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Pair< cweeDateTime,float > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_Pair_Sl_cweeDateTime_Sc_float_Sg__Sg__setitem(arg1,arg2,(Pair< cweeDateTime,float > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_vector_pair_timeseries_AddRange(void * jarg1, void * jarg2) {
  std::vector< Pair< cweeDateTime,float > > *arg1 = (std::vector< Pair< cweeDateTime,float > > *) 0 ;
  std::vector< Pair< cweeDateTime,float > > *arg2 = 0 ;
  
  arg1 = (std::vector< Pair< cweeDateTime,float > > *)jarg1; 
  arg2 = (std::vector< Pair< cweeDateTime,float > > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< Pair< cweeDateTime,float > > const & is null", 0);
    return ;
  } 
  std_vector_Sl_Pair_Sl_cweeDateTime_Sc_float_Sg__Sg__AddRange(arg1,(std::vector< Pair< cweeDateTime,float > > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_vector_pair_timeseries_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< Pair< cweeDateTime,float > > *arg1 = (std::vector< Pair< cweeDateTime,float > > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< Pair< cweeDateTime,float > > *result = 0 ;
  
  arg1 = (std::vector< Pair< cweeDateTime,float > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< Pair< cweeDateTime,float > > *)std_vector_Sl_Pair_Sl_cweeDateTime_Sc_float_Sg__Sg__GetRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_vector_pair_timeseries_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< Pair< cweeDateTime,float > > *arg1 = (std::vector< Pair< cweeDateTime,float > > *) 0 ;
  int arg2 ;
  Pair< cweeDateTime,float > *arg3 = 0 ;
  
  arg1 = (std::vector< Pair< cweeDateTime,float > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Pair< cweeDateTime,float > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Pair< cweeDateTime,float > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_Pair_Sl_cweeDateTime_Sc_float_Sg__Sg__Insert(arg1,arg2,(Pair< cweeDateTime,float > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_vector_pair_timeseries_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< Pair< cweeDateTime,float > > *arg1 = (std::vector< Pair< cweeDateTime,float > > *) 0 ;
  int arg2 ;
  std::vector< Pair< cweeDateTime,float > > *arg3 = 0 ;
  
  arg1 = (std::vector< Pair< cweeDateTime,float > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< Pair< cweeDateTime,float > > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< Pair< cweeDateTime,float > > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_Pair_Sl_cweeDateTime_Sc_float_Sg__Sg__InsertRange(arg1,arg2,(std::vector< Pair< cweeDateTime,float > > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_vector_pair_timeseries_RemoveAt(void * jarg1, int jarg2) {
  std::vector< Pair< cweeDateTime,float > > *arg1 = (std::vector< Pair< cweeDateTime,float > > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< Pair< cweeDateTime,float > > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_Pair_Sl_cweeDateTime_Sc_float_Sg__Sg__RemoveAt(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_vector_pair_timeseries_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< Pair< cweeDateTime,float > > *arg1 = (std::vector< Pair< cweeDateTime,float > > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< Pair< cweeDateTime,float > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_Pair_Sl_cweeDateTime_Sc_float_Sg__Sg__RemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_vector_pair_timeseries_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  Pair< cweeDateTime,float > *arg1 = 0 ;
  int arg2 ;
  std::vector< Pair< cweeDateTime,float > > *result = 0 ;
  
  arg1 = (Pair< cweeDateTime,float > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Pair< cweeDateTime,float > const & is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< Pair< cweeDateTime,float > > *)std_vector_Sl_Pair_Sl_cweeDateTime_Sc_float_Sg__Sg__Repeat((Pair< cweeDateTime,float > const &)*arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_vector_pair_timeseries_Reverse__SWIG_0(void * jarg1) {
  std::vector< Pair< cweeDateTime,float > > *arg1 = (std::vector< Pair< cweeDateTime,float > > *) 0 ;
  
  arg1 = (std::vector< Pair< cweeDateTime,float > > *)jarg1; 
  std_vector_Sl_Pair_Sl_cweeDateTime_Sc_float_Sg__Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_vector_pair_timeseries_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< Pair< cweeDateTime,float > > *arg1 = (std::vector< Pair< cweeDateTime,float > > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< Pair< cweeDateTime,float > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_Pair_Sl_cweeDateTime_Sc_float_Sg__Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_vector_pair_timeseries_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< Pair< cweeDateTime,float > > *arg1 = (std::vector< Pair< cweeDateTime,float > > *) 0 ;
  int arg2 ;
  std::vector< Pair< cweeDateTime,float > > *arg3 = 0 ;
  
  arg1 = (std::vector< Pair< cweeDateTime,float > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< Pair< cweeDateTime,float > > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< Pair< cweeDateTime,float > > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_Pair_Sl_cweeDateTime_Sc_float_Sg__Sg__SetRange(arg1,arg2,(std::vector< Pair< cweeDateTime,float > > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_vector_pair_timeseries(void * jarg1) {
  std::vector< Pair< cweeDateTime,float > > *arg1 = (std::vector< Pair< cweeDateTime,float > > *) 0 ;
  
  arg1 = (std::vector< Pair< cweeDateTime,float > > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_vector_pair_double_double_Clear(void * jarg1) {
  std::vector< Pair< double,double > > *arg1 = (std::vector< Pair< double,double > > *) 0 ;
  
  arg1 = (std::vector< Pair< double,double > > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_vector_pair_double_double_Add(void * jarg1, void * jarg2) {
  std::vector< Pair< double,double > > *arg1 = (std::vector< Pair< double,double > > *) 0 ;
  Pair< double,double > *arg2 = 0 ;
  
  arg1 = (std::vector< Pair< double,double > > *)jarg1; 
  arg2 = (Pair< double,double > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Pair< double,double > const & is null", 0);
    return ;
  } 
  (arg1)->push_back((Pair< double,double > const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_vector_pair_double_double_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< Pair< double,double > > *arg1 = (std::vector< Pair< double,double > > *) 0 ;
  std::vector< Pair< double,double > >::size_type result;
  
  arg1 = (std::vector< Pair< double,double > > *)jarg1; 
  result = ((std::vector< Pair< double,double > > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_vector_pair_double_double_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< Pair< double,double > > *arg1 = (std::vector< Pair< double,double > > *) 0 ;
  std::vector< Pair< double,double > >::size_type result;
  
  arg1 = (std::vector< Pair< double,double > > *)jarg1; 
  result = ((std::vector< Pair< double,double > > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_vector_pair_double_double_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< Pair< double,double > > *arg1 = (std::vector< Pair< double,double > > *) 0 ;
  std::vector< Pair< double,double > >::size_type arg2 ;
  
  arg1 = (std::vector< Pair< double,double > > *)jarg1; 
  arg2 = (std::vector< Pair< double,double > >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_vector_pair_double_double__SWIG_0() {
  void * jresult ;
  std::vector< Pair< double,double > > *result = 0 ;
  
  result = (std::vector< Pair< double,double > > *)new std::vector< Pair< double,double > >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_vector_pair_double_double__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< Pair< double,double > > *arg1 = 0 ;
  std::vector< Pair< double,double > > *result = 0 ;
  
  arg1 = (std::vector< Pair< double,double > > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< Pair< double,double > > const & is null", 0);
    return 0;
  } 
  result = (std::vector< Pair< double,double > > *)new std::vector< Pair< double,double > >((std::vector< Pair< double,double > > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_vector_pair_double_double__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< Pair< double,double > > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< Pair< double,double > > *)new_std_vector_Sl_Pair_Sl_double_Sc_double_Sg__Sg___SWIG_2(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_vector_pair_double_double_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< Pair< double,double > > *arg1 = (std::vector< Pair< double,double > > *) 0 ;
  int arg2 ;
  Pair< double,double > result;
  
  arg1 = (std::vector< Pair< double,double > > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_Pair_Sl_double_Sc_double_Sg__Sg__getitemcopy(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = new Pair< double,double >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_vector_pair_double_double_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< Pair< double,double > > *arg1 = (std::vector< Pair< double,double > > *) 0 ;
  int arg2 ;
  std::vector< Pair< double,double > >::value_type *result = 0 ;
  
  arg1 = (std::vector< Pair< double,double > > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< Pair< double,double > >::value_type *) &std_vector_Sl_Pair_Sl_double_Sc_double_Sg__Sg__getitem(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_vector_pair_double_double_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< Pair< double,double > > *arg1 = (std::vector< Pair< double,double > > *) 0 ;
  int arg2 ;
  Pair< double,double > *arg3 = 0 ;
  
  arg1 = (std::vector< Pair< double,double > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Pair< double,double > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Pair< double,double > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_Pair_Sl_double_Sc_double_Sg__Sg__setitem(arg1,arg2,(Pair< double,double > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_vector_pair_double_double_AddRange(void * jarg1, void * jarg2) {
  std::vector< Pair< double,double > > *arg1 = (std::vector< Pair< double,double > > *) 0 ;
  std::vector< Pair< double,double > > *arg2 = 0 ;
  
  arg1 = (std::vector< Pair< double,double > > *)jarg1; 
  arg2 = (std::vector< Pair< double,double > > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< Pair< double,double > > const & is null", 0);
    return ;
  } 
  std_vector_Sl_Pair_Sl_double_Sc_double_Sg__Sg__AddRange(arg1,(std::vector< Pair< double,double > > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_vector_pair_double_double_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< Pair< double,double > > *arg1 = (std::vector< Pair< double,double > > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< Pair< double,double > > *result = 0 ;
  
  arg1 = (std::vector< Pair< double,double > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< Pair< double,double > > *)std_vector_Sl_Pair_Sl_double_Sc_double_Sg__Sg__GetRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_vector_pair_double_double_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< Pair< double,double > > *arg1 = (std::vector< Pair< double,double > > *) 0 ;
  int arg2 ;
  Pair< double,double > *arg3 = 0 ;
  
  arg1 = (std::vector< Pair< double,double > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Pair< double,double > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Pair< double,double > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_Pair_Sl_double_Sc_double_Sg__Sg__Insert(arg1,arg2,(Pair< double,double > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_vector_pair_double_double_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< Pair< double,double > > *arg1 = (std::vector< Pair< double,double > > *) 0 ;
  int arg2 ;
  std::vector< Pair< double,double > > *arg3 = 0 ;
  
  arg1 = (std::vector< Pair< double,double > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< Pair< double,double > > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< Pair< double,double > > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_Pair_Sl_double_Sc_double_Sg__Sg__InsertRange(arg1,arg2,(std::vector< Pair< double,double > > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_vector_pair_double_double_RemoveAt(void * jarg1, int jarg2) {
  std::vector< Pair< double,double > > *arg1 = (std::vector< Pair< double,double > > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< Pair< double,double > > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_Pair_Sl_double_Sc_double_Sg__Sg__RemoveAt(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_vector_pair_double_double_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< Pair< double,double > > *arg1 = (std::vector< Pair< double,double > > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< Pair< double,double > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_Pair_Sl_double_Sc_double_Sg__Sg__RemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_vector_pair_double_double_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  Pair< double,double > *arg1 = 0 ;
  int arg2 ;
  std::vector< Pair< double,double > > *result = 0 ;
  
  arg1 = (Pair< double,double > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Pair< double,double > const & is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< Pair< double,double > > *)std_vector_Sl_Pair_Sl_double_Sc_double_Sg__Sg__Repeat((Pair< double,double > const &)*arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_vector_pair_double_double_Reverse__SWIG_0(void * jarg1) {
  std::vector< Pair< double,double > > *arg1 = (std::vector< Pair< double,double > > *) 0 ;
  
  arg1 = (std::vector< Pair< double,double > > *)jarg1; 
  std_vector_Sl_Pair_Sl_double_Sc_double_Sg__Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_vector_pair_double_double_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< Pair< double,double > > *arg1 = (std::vector< Pair< double,double > > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< Pair< double,double > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_Pair_Sl_double_Sc_double_Sg__Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_vector_pair_double_double_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< Pair< double,double > > *arg1 = (std::vector< Pair< double,double > > *) 0 ;
  int arg2 ;
  std::vector< Pair< double,double > > *arg3 = 0 ;
  
  arg1 = (std::vector< Pair< double,double > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< Pair< double,double > > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< Pair< double,double > > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_Pair_Sl_double_Sc_double_Sg__Sg__SetRange(arg1,arg2,(std::vector< Pair< double,double > > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_vector_pair_double_double(void * jarg1) {
  std::vector< Pair< double,double > > *arg1 = (std::vector< Pair< double,double > > *) 0 ;
  
  arg1 = (std::vector< Pair< double,double > > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_vector_scriptingnode_Clear(void * jarg1) {
  std::vector< ScriptingNode > *arg1 = (std::vector< ScriptingNode > *) 0 ;
  
  arg1 = (std::vector< ScriptingNode > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_vector_scriptingnode_Add(void * jarg1, void * jarg2) {
  std::vector< ScriptingNode > *arg1 = (std::vector< ScriptingNode > *) 0 ;
  ScriptingNode *arg2 = 0 ;
  
  arg1 = (std::vector< ScriptingNode > *)jarg1; 
  arg2 = (ScriptingNode *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ScriptingNode const & is null", 0);
    return ;
  } 
  (arg1)->push_back((ScriptingNode const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_vector_scriptingnode_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< ScriptingNode > *arg1 = (std::vector< ScriptingNode > *) 0 ;
  std::vector< ScriptingNode >::size_type result;
  
  arg1 = (std::vector< ScriptingNode > *)jarg1; 
  result = ((std::vector< ScriptingNode > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_vector_scriptingnode_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< ScriptingNode > *arg1 = (std::vector< ScriptingNode > *) 0 ;
  std::vector< ScriptingNode >::size_type result;
  
  arg1 = (std::vector< ScriptingNode > *)jarg1; 
  result = ((std::vector< ScriptingNode > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_vector_scriptingnode_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< ScriptingNode > *arg1 = (std::vector< ScriptingNode > *) 0 ;
  std::vector< ScriptingNode >::size_type arg2 ;
  
  arg1 = (std::vector< ScriptingNode > *)jarg1; 
  arg2 = (std::vector< ScriptingNode >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_vector_scriptingnode__SWIG_0() {
  void * jresult ;
  std::vector< ScriptingNode > *result = 0 ;
  
  result = (std::vector< ScriptingNode > *)new std::vector< ScriptingNode >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_vector_scriptingnode__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< ScriptingNode > *arg1 = 0 ;
  std::vector< ScriptingNode > *result = 0 ;
  
  arg1 = (std::vector< ScriptingNode > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< ScriptingNode > const & is null", 0);
    return 0;
  } 
  result = (std::vector< ScriptingNode > *)new std::vector< ScriptingNode >((std::vector< ScriptingNode > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_vector_scriptingnode__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< ScriptingNode > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< ScriptingNode > *)new_std_vector_Sl_ScriptingNode_Sg___SWIG_2(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_vector_scriptingnode_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< ScriptingNode > *arg1 = (std::vector< ScriptingNode > *) 0 ;
  int arg2 ;
  ScriptingNode result;
  
  arg1 = (std::vector< ScriptingNode > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_ScriptingNode_Sg__getitemcopy(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = new ScriptingNode(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_vector_scriptingnode_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< ScriptingNode > *arg1 = (std::vector< ScriptingNode > *) 0 ;
  int arg2 ;
  std::vector< ScriptingNode >::value_type *result = 0 ;
  
  arg1 = (std::vector< ScriptingNode > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< ScriptingNode >::value_type *) &std_vector_Sl_ScriptingNode_Sg__getitem(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_vector_scriptingnode_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< ScriptingNode > *arg1 = (std::vector< ScriptingNode > *) 0 ;
  int arg2 ;
  ScriptingNode *arg3 = 0 ;
  
  arg1 = (std::vector< ScriptingNode > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (ScriptingNode *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ScriptingNode const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_ScriptingNode_Sg__setitem(arg1,arg2,(ScriptingNode const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_vector_scriptingnode_AddRange(void * jarg1, void * jarg2) {
  std::vector< ScriptingNode > *arg1 = (std::vector< ScriptingNode > *) 0 ;
  std::vector< ScriptingNode > *arg2 = 0 ;
  
  arg1 = (std::vector< ScriptingNode > *)jarg1; 
  arg2 = (std::vector< ScriptingNode > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< ScriptingNode > const & is null", 0);
    return ;
  } 
  std_vector_Sl_ScriptingNode_Sg__AddRange(arg1,(std::vector< ScriptingNode > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_vector_scriptingnode_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< ScriptingNode > *arg1 = (std::vector< ScriptingNode > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< ScriptingNode > *result = 0 ;
  
  arg1 = (std::vector< ScriptingNode > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< ScriptingNode > *)std_vector_Sl_ScriptingNode_Sg__GetRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_vector_scriptingnode_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< ScriptingNode > *arg1 = (std::vector< ScriptingNode > *) 0 ;
  int arg2 ;
  ScriptingNode *arg3 = 0 ;
  
  arg1 = (std::vector< ScriptingNode > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (ScriptingNode *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ScriptingNode const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_ScriptingNode_Sg__Insert(arg1,arg2,(ScriptingNode const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_vector_scriptingnode_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< ScriptingNode > *arg1 = (std::vector< ScriptingNode > *) 0 ;
  int arg2 ;
  std::vector< ScriptingNode > *arg3 = 0 ;
  
  arg1 = (std::vector< ScriptingNode > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< ScriptingNode > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< ScriptingNode > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_ScriptingNode_Sg__InsertRange(arg1,arg2,(std::vector< ScriptingNode > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_vector_scriptingnode_RemoveAt(void * jarg1, int jarg2) {
  std::vector< ScriptingNode > *arg1 = (std::vector< ScriptingNode > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< ScriptingNode > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_ScriptingNode_Sg__RemoveAt(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_vector_scriptingnode_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< ScriptingNode > *arg1 = (std::vector< ScriptingNode > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< ScriptingNode > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_ScriptingNode_Sg__RemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_vector_scriptingnode_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  ScriptingNode *arg1 = 0 ;
  int arg2 ;
  std::vector< ScriptingNode > *result = 0 ;
  
  arg1 = (ScriptingNode *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ScriptingNode const & is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< ScriptingNode > *)std_vector_Sl_ScriptingNode_Sg__Repeat((ScriptingNode const &)*arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_vector_scriptingnode_Reverse__SWIG_0(void * jarg1) {
  std::vector< ScriptingNode > *arg1 = (std::vector< ScriptingNode > *) 0 ;
  
  arg1 = (std::vector< ScriptingNode > *)jarg1; 
  std_vector_Sl_ScriptingNode_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_vector_scriptingnode_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< ScriptingNode > *arg1 = (std::vector< ScriptingNode > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< ScriptingNode > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_ScriptingNode_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_vector_scriptingnode_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< ScriptingNode > *arg1 = (std::vector< ScriptingNode > *) 0 ;
  int arg2 ;
  std::vector< ScriptingNode > *arg3 = 0 ;
  
  arg1 = (std::vector< ScriptingNode > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< ScriptingNode > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< ScriptingNode > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_ScriptingNode_Sg__SetRange(arg1,arg2,(std::vector< ScriptingNode > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_vector_scriptingnode(void * jarg1) {
  std::vector< ScriptingNode > *arg1 = (std::vector< ScriptingNode > *) 0 ;
  
  arg1 = (std::vector< ScriptingNode > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_vector_background_Clear(void * jarg1) {
  std::vector< MapBackground_Interop > *arg1 = (std::vector< MapBackground_Interop > *) 0 ;
  
  arg1 = (std::vector< MapBackground_Interop > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_vector_background_Add(void * jarg1, void * jarg2) {
  std::vector< MapBackground_Interop > *arg1 = (std::vector< MapBackground_Interop > *) 0 ;
  MapBackground_Interop *arg2 = 0 ;
  
  arg1 = (std::vector< MapBackground_Interop > *)jarg1; 
  arg2 = (MapBackground_Interop *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MapBackground_Interop const & is null", 0);
    return ;
  } 
  (arg1)->push_back((MapBackground_Interop const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_vector_background_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< MapBackground_Interop > *arg1 = (std::vector< MapBackground_Interop > *) 0 ;
  std::vector< MapBackground_Interop >::size_type result;
  
  arg1 = (std::vector< MapBackground_Interop > *)jarg1; 
  result = ((std::vector< MapBackground_Interop > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_vector_background_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< MapBackground_Interop > *arg1 = (std::vector< MapBackground_Interop > *) 0 ;
  std::vector< MapBackground_Interop >::size_type result;
  
  arg1 = (std::vector< MapBackground_Interop > *)jarg1; 
  result = ((std::vector< MapBackground_Interop > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_vector_background_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< MapBackground_Interop > *arg1 = (std::vector< MapBackground_Interop > *) 0 ;
  std::vector< MapBackground_Interop >::size_type arg2 ;
  
  arg1 = (std::vector< MapBackground_Interop > *)jarg1; 
  arg2 = (std::vector< MapBackground_Interop >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_vector_background__SWIG_0() {
  void * jresult ;
  std::vector< MapBackground_Interop > *result = 0 ;
  
  result = (std::vector< MapBackground_Interop > *)new std::vector< MapBackground_Interop >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_vector_background__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< MapBackground_Interop > *arg1 = 0 ;
  std::vector< MapBackground_Interop > *result = 0 ;
  
  arg1 = (std::vector< MapBackground_Interop > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< MapBackground_Interop > const & is null", 0);
    return 0;
  } 
  result = (std::vector< MapBackground_Interop > *)new std::vector< MapBackground_Interop >((std::vector< MapBackground_Interop > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_vector_background__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< MapBackground_Interop > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< MapBackground_Interop > *)new_std_vector_Sl_MapBackground_Interop_Sg___SWIG_2(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_vector_background_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< MapBackground_Interop > *arg1 = (std::vector< MapBackground_Interop > *) 0 ;
  int arg2 ;
  MapBackground_Interop result;
  
  arg1 = (std::vector< MapBackground_Interop > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_MapBackground_Interop_Sg__getitemcopy(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = new MapBackground_Interop(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_vector_background_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< MapBackground_Interop > *arg1 = (std::vector< MapBackground_Interop > *) 0 ;
  int arg2 ;
  std::vector< MapBackground_Interop >::value_type *result = 0 ;
  
  arg1 = (std::vector< MapBackground_Interop > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< MapBackground_Interop >::value_type *) &std_vector_Sl_MapBackground_Interop_Sg__getitem(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_vector_background_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< MapBackground_Interop > *arg1 = (std::vector< MapBackground_Interop > *) 0 ;
  int arg2 ;
  MapBackground_Interop *arg3 = 0 ;
  
  arg1 = (std::vector< MapBackground_Interop > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (MapBackground_Interop *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MapBackground_Interop const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_MapBackground_Interop_Sg__setitem(arg1,arg2,(MapBackground_Interop const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_vector_background_AddRange(void * jarg1, void * jarg2) {
  std::vector< MapBackground_Interop > *arg1 = (std::vector< MapBackground_Interop > *) 0 ;
  std::vector< MapBackground_Interop > *arg2 = 0 ;
  
  arg1 = (std::vector< MapBackground_Interop > *)jarg1; 
  arg2 = (std::vector< MapBackground_Interop > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< MapBackground_Interop > const & is null", 0);
    return ;
  } 
  std_vector_Sl_MapBackground_Interop_Sg__AddRange(arg1,(std::vector< MapBackground_Interop > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_vector_background_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< MapBackground_Interop > *arg1 = (std::vector< MapBackground_Interop > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< MapBackground_Interop > *result = 0 ;
  
  arg1 = (std::vector< MapBackground_Interop > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< MapBackground_Interop > *)std_vector_Sl_MapBackground_Interop_Sg__GetRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_vector_background_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< MapBackground_Interop > *arg1 = (std::vector< MapBackground_Interop > *) 0 ;
  int arg2 ;
  MapBackground_Interop *arg3 = 0 ;
  
  arg1 = (std::vector< MapBackground_Interop > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (MapBackground_Interop *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MapBackground_Interop const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_MapBackground_Interop_Sg__Insert(arg1,arg2,(MapBackground_Interop const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_vector_background_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< MapBackground_Interop > *arg1 = (std::vector< MapBackground_Interop > *) 0 ;
  int arg2 ;
  std::vector< MapBackground_Interop > *arg3 = 0 ;
  
  arg1 = (std::vector< MapBackground_Interop > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< MapBackground_Interop > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< MapBackground_Interop > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_MapBackground_Interop_Sg__InsertRange(arg1,arg2,(std::vector< MapBackground_Interop > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_vector_background_RemoveAt(void * jarg1, int jarg2) {
  std::vector< MapBackground_Interop > *arg1 = (std::vector< MapBackground_Interop > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< MapBackground_Interop > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_MapBackground_Interop_Sg__RemoveAt(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_vector_background_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< MapBackground_Interop > *arg1 = (std::vector< MapBackground_Interop > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< MapBackground_Interop > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_MapBackground_Interop_Sg__RemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_vector_background_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  MapBackground_Interop *arg1 = 0 ;
  int arg2 ;
  std::vector< MapBackground_Interop > *result = 0 ;
  
  arg1 = (MapBackground_Interop *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MapBackground_Interop const & is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< MapBackground_Interop > *)std_vector_Sl_MapBackground_Interop_Sg__Repeat((MapBackground_Interop const &)*arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_vector_background_Reverse__SWIG_0(void * jarg1) {
  std::vector< MapBackground_Interop > *arg1 = (std::vector< MapBackground_Interop > *) 0 ;
  
  arg1 = (std::vector< MapBackground_Interop > *)jarg1; 
  std_vector_Sl_MapBackground_Interop_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_vector_background_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< MapBackground_Interop > *arg1 = (std::vector< MapBackground_Interop > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< MapBackground_Interop > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_MapBackground_Interop_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_vector_background_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< MapBackground_Interop > *arg1 = (std::vector< MapBackground_Interop > *) 0 ;
  int arg2 ;
  std::vector< MapBackground_Interop > *arg3 = 0 ;
  
  arg1 = (std::vector< MapBackground_Interop > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< MapBackground_Interop > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< MapBackground_Interop > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_MapBackground_Interop_Sg__SetRange(arg1,arg2,(std::vector< MapBackground_Interop > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_vector_background(void * jarg1) {
  std::vector< MapBackground_Interop > *arg1 = (std::vector< MapBackground_Interop > *) 0 ;
  
  arg1 = (std::vector< MapBackground_Interop > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_vector_colors_Clear(void * jarg1) {
  std::vector< Color_Interop > *arg1 = (std::vector< Color_Interop > *) 0 ;
  
  arg1 = (std::vector< Color_Interop > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_vector_colors_Add(void * jarg1, void * jarg2) {
  std::vector< Color_Interop > *arg1 = (std::vector< Color_Interop > *) 0 ;
  Color_Interop *arg2 = 0 ;
  
  arg1 = (std::vector< Color_Interop > *)jarg1; 
  arg2 = (Color_Interop *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Color_Interop const & is null", 0);
    return ;
  } 
  (arg1)->push_back((Color_Interop const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_vector_colors_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< Color_Interop > *arg1 = (std::vector< Color_Interop > *) 0 ;
  std::vector< Color_Interop >::size_type result;
  
  arg1 = (std::vector< Color_Interop > *)jarg1; 
  result = ((std::vector< Color_Interop > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_vector_colors_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< Color_Interop > *arg1 = (std::vector< Color_Interop > *) 0 ;
  std::vector< Color_Interop >::size_type result;
  
  arg1 = (std::vector< Color_Interop > *)jarg1; 
  result = ((std::vector< Color_Interop > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_vector_colors_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< Color_Interop > *arg1 = (std::vector< Color_Interop > *) 0 ;
  std::vector< Color_Interop >::size_type arg2 ;
  
  arg1 = (std::vector< Color_Interop > *)jarg1; 
  arg2 = (std::vector< Color_Interop >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_vector_colors__SWIG_0() {
  void * jresult ;
  std::vector< Color_Interop > *result = 0 ;
  
  result = (std::vector< Color_Interop > *)new std::vector< Color_Interop >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_vector_colors__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< Color_Interop > *arg1 = 0 ;
  std::vector< Color_Interop > *result = 0 ;
  
  arg1 = (std::vector< Color_Interop > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< Color_Interop > const & is null", 0);
    return 0;
  } 
  result = (std::vector< Color_Interop > *)new std::vector< Color_Interop >((std::vector< Color_Interop > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_vector_colors__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< Color_Interop > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< Color_Interop > *)new_std_vector_Sl_Color_Interop_Sg___SWIG_2(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_vector_colors_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< Color_Interop > *arg1 = (std::vector< Color_Interop > *) 0 ;
  int arg2 ;
  Color_Interop result;
  
  arg1 = (std::vector< Color_Interop > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_Color_Interop_Sg__getitemcopy(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = new Color_Interop(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_vector_colors_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< Color_Interop > *arg1 = (std::vector< Color_Interop > *) 0 ;
  int arg2 ;
  std::vector< Color_Interop >::value_type *result = 0 ;
  
  arg1 = (std::vector< Color_Interop > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< Color_Interop >::value_type *) &std_vector_Sl_Color_Interop_Sg__getitem(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_vector_colors_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< Color_Interop > *arg1 = (std::vector< Color_Interop > *) 0 ;
  int arg2 ;
  Color_Interop *arg3 = 0 ;
  
  arg1 = (std::vector< Color_Interop > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Color_Interop *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Color_Interop const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_Color_Interop_Sg__setitem(arg1,arg2,(Color_Interop const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_vector_colors_AddRange(void * jarg1, void * jarg2) {
  std::vector< Color_Interop > *arg1 = (std::vector< Color_Interop > *) 0 ;
  std::vector< Color_Interop > *arg2 = 0 ;
  
  arg1 = (std::vector< Color_Interop > *)jarg1; 
  arg2 = (std::vector< Color_Interop > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< Color_Interop > const & is null", 0);
    return ;
  } 
  std_vector_Sl_Color_Interop_Sg__AddRange(arg1,(std::vector< Color_Interop > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_vector_colors_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< Color_Interop > *arg1 = (std::vector< Color_Interop > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< Color_Interop > *result = 0 ;
  
  arg1 = (std::vector< Color_Interop > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< Color_Interop > *)std_vector_Sl_Color_Interop_Sg__GetRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_vector_colors_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< Color_Interop > *arg1 = (std::vector< Color_Interop > *) 0 ;
  int arg2 ;
  Color_Interop *arg3 = 0 ;
  
  arg1 = (std::vector< Color_Interop > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Color_Interop *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Color_Interop const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_Color_Interop_Sg__Insert(arg1,arg2,(Color_Interop const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_vector_colors_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< Color_Interop > *arg1 = (std::vector< Color_Interop > *) 0 ;
  int arg2 ;
  std::vector< Color_Interop > *arg3 = 0 ;
  
  arg1 = (std::vector< Color_Interop > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< Color_Interop > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< Color_Interop > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_Color_Interop_Sg__InsertRange(arg1,arg2,(std::vector< Color_Interop > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_vector_colors_RemoveAt(void * jarg1, int jarg2) {
  std::vector< Color_Interop > *arg1 = (std::vector< Color_Interop > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< Color_Interop > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_Color_Interop_Sg__RemoveAt(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_vector_colors_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< Color_Interop > *arg1 = (std::vector< Color_Interop > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< Color_Interop > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_Color_Interop_Sg__RemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_vector_colors_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  Color_Interop *arg1 = 0 ;
  int arg2 ;
  std::vector< Color_Interop > *result = 0 ;
  
  arg1 = (Color_Interop *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Color_Interop const & is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< Color_Interop > *)std_vector_Sl_Color_Interop_Sg__Repeat((Color_Interop const &)*arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_vector_colors_Reverse__SWIG_0(void * jarg1) {
  std::vector< Color_Interop > *arg1 = (std::vector< Color_Interop > *) 0 ;
  
  arg1 = (std::vector< Color_Interop > *)jarg1; 
  std_vector_Sl_Color_Interop_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_vector_colors_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< Color_Interop > *arg1 = (std::vector< Color_Interop > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< Color_Interop > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_Color_Interop_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_vector_colors_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< Color_Interop > *arg1 = (std::vector< Color_Interop > *) 0 ;
  int arg2 ;
  std::vector< Color_Interop > *arg3 = 0 ;
  
  arg1 = (std::vector< Color_Interop > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< Color_Interop > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< Color_Interop > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_Color_Interop_Sg__SetRange(arg1,arg2,(std::vector< Color_Interop > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_vector_colors(void * jarg1) {
  std::vector< Color_Interop > *arg1 = (std::vector< Color_Interop > *) 0 ;
  
  arg1 = (std::vector< Color_Interop > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_map_int_background__SWIG_0() {
  void * jresult ;
  std::map< int,MapBackground_Interop > *result = 0 ;
  
  result = (std::map< int,MapBackground_Interop > *)new std::map< int,MapBackground_Interop >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_map_int_background__SWIG_1(void * jarg1) {
  void * jresult ;
  std::map< int,MapBackground_Interop > *arg1 = 0 ;
  std::map< int,MapBackground_Interop > *result = 0 ;
  
  arg1 = (std::map< int,MapBackground_Interop > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::map< int,MapBackground_Interop > const & is null", 0);
    return 0;
  } 
  result = (std::map< int,MapBackground_Interop > *)new std::map< int,MapBackground_Interop >((std::map< int,MapBackground_Interop > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_map_int_background_size(void * jarg1) {
  unsigned long jresult ;
  std::map< int,MapBackground_Interop > *arg1 = (std::map< int,MapBackground_Interop > *) 0 ;
  std::map< int,MapBackground_Interop >::size_type result;
  
  arg1 = (std::map< int,MapBackground_Interop > *)jarg1; 
  result = ((std::map< int,MapBackground_Interop > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_map_int_background_empty(void * jarg1) {
  unsigned int jresult ;
  std::map< int,MapBackground_Interop > *arg1 = (std::map< int,MapBackground_Interop > *) 0 ;
  bool result;
  
  arg1 = (std::map< int,MapBackground_Interop > *)jarg1; 
  result = (bool)((std::map< int,MapBackground_Interop > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_map_int_background_Clear(void * jarg1) {
  std::map< int,MapBackground_Interop > *arg1 = (std::map< int,MapBackground_Interop > *) 0 ;
  
  arg1 = (std::map< int,MapBackground_Interop > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_map_int_background_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::map< int,MapBackground_Interop > *arg1 = (std::map< int,MapBackground_Interop > *) 0 ;
  std::map< int,MapBackground_Interop >::key_type *arg2 = 0 ;
  std::map< int,MapBackground_Interop >::key_type temp2 ;
  std::map< int,MapBackground_Interop >::mapped_type *result = 0 ;
  
  arg1 = (std::map< int,MapBackground_Interop > *)jarg1; 
  temp2 = (std::map< int,MapBackground_Interop >::key_type)jarg2; 
  arg2 = &temp2; 
  try {
    result = (std::map< int,MapBackground_Interop >::mapped_type *) &std_map_Sl_int_Sc_MapBackground_Interop_Sg__getitem(arg1,(int const &)*arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_map_int_background_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::map< int,MapBackground_Interop > *arg1 = (std::map< int,MapBackground_Interop > *) 0 ;
  std::map< int,MapBackground_Interop >::key_type *arg2 = 0 ;
  std::map< int,MapBackground_Interop >::mapped_type *arg3 = 0 ;
  std::map< int,MapBackground_Interop >::key_type temp2 ;
  
  arg1 = (std::map< int,MapBackground_Interop > *)jarg1; 
  temp2 = (std::map< int,MapBackground_Interop >::key_type)jarg2; 
  arg2 = &temp2; 
  arg3 = (std::map< int,MapBackground_Interop >::mapped_type *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::map< int,MapBackground_Interop >::mapped_type const & is null", 0);
    return ;
  } 
  std_map_Sl_int_Sc_MapBackground_Interop_Sg__setitem(arg1,(int const &)*arg2,(MapBackground_Interop const &)*arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_map_int_background_ContainsKey(void * jarg1, int jarg2) {
  unsigned int jresult ;
  std::map< int,MapBackground_Interop > *arg1 = (std::map< int,MapBackground_Interop > *) 0 ;
  std::map< int,MapBackground_Interop >::key_type *arg2 = 0 ;
  std::map< int,MapBackground_Interop >::key_type temp2 ;
  bool result;
  
  arg1 = (std::map< int,MapBackground_Interop > *)jarg1; 
  temp2 = (std::map< int,MapBackground_Interop >::key_type)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_map_Sl_int_Sc_MapBackground_Interop_Sg__ContainsKey(arg1,(int const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_map_int_background_Add(void * jarg1, int jarg2, void * jarg3) {
  std::map< int,MapBackground_Interop > *arg1 = (std::map< int,MapBackground_Interop > *) 0 ;
  std::map< int,MapBackground_Interop >::key_type *arg2 = 0 ;
  std::map< int,MapBackground_Interop >::mapped_type *arg3 = 0 ;
  std::map< int,MapBackground_Interop >::key_type temp2 ;
  
  arg1 = (std::map< int,MapBackground_Interop > *)jarg1; 
  temp2 = (std::map< int,MapBackground_Interop >::key_type)jarg2; 
  arg2 = &temp2; 
  arg3 = (std::map< int,MapBackground_Interop >::mapped_type *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::map< int,MapBackground_Interop >::mapped_type const & is null", 0);
    return ;
  } 
  try {
    std_map_Sl_int_Sc_MapBackground_Interop_Sg__Add(arg1,(int const &)*arg2,(MapBackground_Interop const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_map_int_background_Remove(void * jarg1, int jarg2) {
  unsigned int jresult ;
  std::map< int,MapBackground_Interop > *arg1 = (std::map< int,MapBackground_Interop > *) 0 ;
  std::map< int,MapBackground_Interop >::key_type *arg2 = 0 ;
  std::map< int,MapBackground_Interop >::key_type temp2 ;
  bool result;
  
  arg1 = (std::map< int,MapBackground_Interop > *)jarg1; 
  temp2 = (std::map< int,MapBackground_Interop >::key_type)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_map_Sl_int_Sc_MapBackground_Interop_Sg__Remove(arg1,(int const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_map_int_background_create_iterator_begin(void * jarg1) {
  void * jresult ;
  std::map< int,MapBackground_Interop > *arg1 = (std::map< int,MapBackground_Interop > *) 0 ;
  std::map< int,MapBackground_Interop,std::less< int > >::iterator *result = 0 ;
  
  arg1 = (std::map< int,MapBackground_Interop > *)jarg1; 
  result = (std::map< int,MapBackground_Interop,std::less< int > >::iterator *)std_map_Sl_int_Sc_MapBackground_Interop_Sg__create_iterator_begin(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_map_int_background_get_next_key(void * jarg1, void * jarg2) {
  int jresult ;
  std::map< int,MapBackground_Interop > *arg1 = (std::map< int,MapBackground_Interop > *) 0 ;
  std::map< int,MapBackground_Interop,std::less< int > >::iterator *arg2 = (std::map< int,MapBackground_Interop,std::less< int > >::iterator *) 0 ;
  std::map< int,MapBackground_Interop >::key_type *result = 0 ;
  
  arg1 = (std::map< int,MapBackground_Interop > *)jarg1; 
  arg2 = (std::map< int,MapBackground_Interop,std::less< int > >::iterator *)jarg2; 
  result = (std::map< int,MapBackground_Interop >::key_type *) &std_map_Sl_int_Sc_MapBackground_Interop_Sg__get_next_key(arg1,arg2);
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_map_int_background_destroy_iterator(void * jarg1, void * jarg2) {
  std::map< int,MapBackground_Interop > *arg1 = (std::map< int,MapBackground_Interop > *) 0 ;
  std::map< int,MapBackground_Interop,std::less< int > >::iterator *arg2 = (std::map< int,MapBackground_Interop,std::less< int > >::iterator *) 0 ;
  
  arg1 = (std::map< int,MapBackground_Interop > *)jarg1; 
  arg2 = (std::map< int,MapBackground_Interop,std::less< int > >::iterator *)jarg2; 
  std_map_Sl_int_Sc_MapBackground_Interop_Sg__destroy_iterator(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_map_int_background(void * jarg1) {
  std::map< int,MapBackground_Interop > *arg1 = (std::map< int,MapBackground_Interop > *) 0 ;
  
  arg1 = (std::map< int,MapBackground_Interop > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_map_int_polyline__SWIG_0() {
  void * jresult ;
  std::map< int,MapPolyline_Interop > *result = 0 ;
  
  result = (std::map< int,MapPolyline_Interop > *)new std::map< int,MapPolyline_Interop >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_map_int_polyline__SWIG_1(void * jarg1) {
  void * jresult ;
  std::map< int,MapPolyline_Interop > *arg1 = 0 ;
  std::map< int,MapPolyline_Interop > *result = 0 ;
  
  arg1 = (std::map< int,MapPolyline_Interop > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::map< int,MapPolyline_Interop > const & is null", 0);
    return 0;
  } 
  result = (std::map< int,MapPolyline_Interop > *)new std::map< int,MapPolyline_Interop >((std::map< int,MapPolyline_Interop > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_map_int_polyline_size(void * jarg1) {
  unsigned long jresult ;
  std::map< int,MapPolyline_Interop > *arg1 = (std::map< int,MapPolyline_Interop > *) 0 ;
  std::map< int,MapPolyline_Interop >::size_type result;
  
  arg1 = (std::map< int,MapPolyline_Interop > *)jarg1; 
  result = ((std::map< int,MapPolyline_Interop > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_map_int_polyline_empty(void * jarg1) {
  unsigned int jresult ;
  std::map< int,MapPolyline_Interop > *arg1 = (std::map< int,MapPolyline_Interop > *) 0 ;
  bool result;
  
  arg1 = (std::map< int,MapPolyline_Interop > *)jarg1; 
  result = (bool)((std::map< int,MapPolyline_Interop > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_map_int_polyline_Clear(void * jarg1) {
  std::map< int,MapPolyline_Interop > *arg1 = (std::map< int,MapPolyline_Interop > *) 0 ;
  
  arg1 = (std::map< int,MapPolyline_Interop > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_map_int_polyline_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::map< int,MapPolyline_Interop > *arg1 = (std::map< int,MapPolyline_Interop > *) 0 ;
  std::map< int,MapPolyline_Interop >::key_type *arg2 = 0 ;
  std::map< int,MapPolyline_Interop >::key_type temp2 ;
  std::map< int,MapPolyline_Interop >::mapped_type *result = 0 ;
  
  arg1 = (std::map< int,MapPolyline_Interop > *)jarg1; 
  temp2 = (std::map< int,MapPolyline_Interop >::key_type)jarg2; 
  arg2 = &temp2; 
  try {
    result = (std::map< int,MapPolyline_Interop >::mapped_type *) &std_map_Sl_int_Sc_MapPolyline_Interop_Sg__getitem(arg1,(int const &)*arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_map_int_polyline_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::map< int,MapPolyline_Interop > *arg1 = (std::map< int,MapPolyline_Interop > *) 0 ;
  std::map< int,MapPolyline_Interop >::key_type *arg2 = 0 ;
  std::map< int,MapPolyline_Interop >::mapped_type *arg3 = 0 ;
  std::map< int,MapPolyline_Interop >::key_type temp2 ;
  
  arg1 = (std::map< int,MapPolyline_Interop > *)jarg1; 
  temp2 = (std::map< int,MapPolyline_Interop >::key_type)jarg2; 
  arg2 = &temp2; 
  arg3 = (std::map< int,MapPolyline_Interop >::mapped_type *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::map< int,MapPolyline_Interop >::mapped_type const & is null", 0);
    return ;
  } 
  std_map_Sl_int_Sc_MapPolyline_Interop_Sg__setitem(arg1,(int const &)*arg2,(MapPolyline_Interop const &)*arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_map_int_polyline_ContainsKey(void * jarg1, int jarg2) {
  unsigned int jresult ;
  std::map< int,MapPolyline_Interop > *arg1 = (std::map< int,MapPolyline_Interop > *) 0 ;
  std::map< int,MapPolyline_Interop >::key_type *arg2 = 0 ;
  std::map< int,MapPolyline_Interop >::key_type temp2 ;
  bool result;
  
  arg1 = (std::map< int,MapPolyline_Interop > *)jarg1; 
  temp2 = (std::map< int,MapPolyline_Interop >::key_type)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_map_Sl_int_Sc_MapPolyline_Interop_Sg__ContainsKey(arg1,(int const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_map_int_polyline_Add(void * jarg1, int jarg2, void * jarg3) {
  std::map< int,MapPolyline_Interop > *arg1 = (std::map< int,MapPolyline_Interop > *) 0 ;
  std::map< int,MapPolyline_Interop >::key_type *arg2 = 0 ;
  std::map< int,MapPolyline_Interop >::mapped_type *arg3 = 0 ;
  std::map< int,MapPolyline_Interop >::key_type temp2 ;
  
  arg1 = (std::map< int,MapPolyline_Interop > *)jarg1; 
  temp2 = (std::map< int,MapPolyline_Interop >::key_type)jarg2; 
  arg2 = &temp2; 
  arg3 = (std::map< int,MapPolyline_Interop >::mapped_type *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::map< int,MapPolyline_Interop >::mapped_type const & is null", 0);
    return ;
  } 
  try {
    std_map_Sl_int_Sc_MapPolyline_Interop_Sg__Add(arg1,(int const &)*arg2,(MapPolyline_Interop const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_map_int_polyline_Remove(void * jarg1, int jarg2) {
  unsigned int jresult ;
  std::map< int,MapPolyline_Interop > *arg1 = (std::map< int,MapPolyline_Interop > *) 0 ;
  std::map< int,MapPolyline_Interop >::key_type *arg2 = 0 ;
  std::map< int,MapPolyline_Interop >::key_type temp2 ;
  bool result;
  
  arg1 = (std::map< int,MapPolyline_Interop > *)jarg1; 
  temp2 = (std::map< int,MapPolyline_Interop >::key_type)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_map_Sl_int_Sc_MapPolyline_Interop_Sg__Remove(arg1,(int const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_map_int_polyline_create_iterator_begin(void * jarg1) {
  void * jresult ;
  std::map< int,MapPolyline_Interop > *arg1 = (std::map< int,MapPolyline_Interop > *) 0 ;
  std::map< int,MapPolyline_Interop,std::less< int > >::iterator *result = 0 ;
  
  arg1 = (std::map< int,MapPolyline_Interop > *)jarg1; 
  result = (std::map< int,MapPolyline_Interop,std::less< int > >::iterator *)std_map_Sl_int_Sc_MapPolyline_Interop_Sg__create_iterator_begin(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_map_int_polyline_get_next_key(void * jarg1, void * jarg2) {
  int jresult ;
  std::map< int,MapPolyline_Interop > *arg1 = (std::map< int,MapPolyline_Interop > *) 0 ;
  std::map< int,MapPolyline_Interop,std::less< int > >::iterator *arg2 = (std::map< int,MapPolyline_Interop,std::less< int > >::iterator *) 0 ;
  std::map< int,MapPolyline_Interop >::key_type *result = 0 ;
  
  arg1 = (std::map< int,MapPolyline_Interop > *)jarg1; 
  arg2 = (std::map< int,MapPolyline_Interop,std::less< int > >::iterator *)jarg2; 
  result = (std::map< int,MapPolyline_Interop >::key_type *) &std_map_Sl_int_Sc_MapPolyline_Interop_Sg__get_next_key(arg1,arg2);
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_map_int_polyline_destroy_iterator(void * jarg1, void * jarg2) {
  std::map< int,MapPolyline_Interop > *arg1 = (std::map< int,MapPolyline_Interop > *) 0 ;
  std::map< int,MapPolyline_Interop,std::less< int > >::iterator *arg2 = (std::map< int,MapPolyline_Interop,std::less< int > >::iterator *) 0 ;
  
  arg1 = (std::map< int,MapPolyline_Interop > *)jarg1; 
  arg2 = (std::map< int,MapPolyline_Interop,std::less< int > >::iterator *)jarg2; 
  std_map_Sl_int_Sc_MapPolyline_Interop_Sg__destroy_iterator(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_map_int_polyline(void * jarg1) {
  std::map< int,MapPolyline_Interop > *arg1 = (std::map< int,MapPolyline_Interop > *) 0 ;
  
  arg1 = (std::map< int,MapPolyline_Interop > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_map_int_icon__SWIG_0() {
  void * jresult ;
  std::map< int,MapIcon_Interop > *result = 0 ;
  
  result = (std::map< int,MapIcon_Interop > *)new std::map< int,MapIcon_Interop >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_map_int_icon__SWIG_1(void * jarg1) {
  void * jresult ;
  std::map< int,MapIcon_Interop > *arg1 = 0 ;
  std::map< int,MapIcon_Interop > *result = 0 ;
  
  arg1 = (std::map< int,MapIcon_Interop > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::map< int,MapIcon_Interop > const & is null", 0);
    return 0;
  } 
  result = (std::map< int,MapIcon_Interop > *)new std::map< int,MapIcon_Interop >((std::map< int,MapIcon_Interop > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_map_int_icon_size(void * jarg1) {
  unsigned long jresult ;
  std::map< int,MapIcon_Interop > *arg1 = (std::map< int,MapIcon_Interop > *) 0 ;
  std::map< int,MapIcon_Interop >::size_type result;
  
  arg1 = (std::map< int,MapIcon_Interop > *)jarg1; 
  result = ((std::map< int,MapIcon_Interop > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_map_int_icon_empty(void * jarg1) {
  unsigned int jresult ;
  std::map< int,MapIcon_Interop > *arg1 = (std::map< int,MapIcon_Interop > *) 0 ;
  bool result;
  
  arg1 = (std::map< int,MapIcon_Interop > *)jarg1; 
  result = (bool)((std::map< int,MapIcon_Interop > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_map_int_icon_Clear(void * jarg1) {
  std::map< int,MapIcon_Interop > *arg1 = (std::map< int,MapIcon_Interop > *) 0 ;
  
  arg1 = (std::map< int,MapIcon_Interop > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_map_int_icon_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::map< int,MapIcon_Interop > *arg1 = (std::map< int,MapIcon_Interop > *) 0 ;
  std::map< int,MapIcon_Interop >::key_type *arg2 = 0 ;
  std::map< int,MapIcon_Interop >::key_type temp2 ;
  std::map< int,MapIcon_Interop >::mapped_type *result = 0 ;
  
  arg1 = (std::map< int,MapIcon_Interop > *)jarg1; 
  temp2 = (std::map< int,MapIcon_Interop >::key_type)jarg2; 
  arg2 = &temp2; 
  try {
    result = (std::map< int,MapIcon_Interop >::mapped_type *) &std_map_Sl_int_Sc_MapIcon_Interop_Sg__getitem(arg1,(int const &)*arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_map_int_icon_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::map< int,MapIcon_Interop > *arg1 = (std::map< int,MapIcon_Interop > *) 0 ;
  std::map< int,MapIcon_Interop >::key_type *arg2 = 0 ;
  std::map< int,MapIcon_Interop >::mapped_type *arg3 = 0 ;
  std::map< int,MapIcon_Interop >::key_type temp2 ;
  
  arg1 = (std::map< int,MapIcon_Interop > *)jarg1; 
  temp2 = (std::map< int,MapIcon_Interop >::key_type)jarg2; 
  arg2 = &temp2; 
  arg3 = (std::map< int,MapIcon_Interop >::mapped_type *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::map< int,MapIcon_Interop >::mapped_type const & is null", 0);
    return ;
  } 
  std_map_Sl_int_Sc_MapIcon_Interop_Sg__setitem(arg1,(int const &)*arg2,(MapIcon_Interop const &)*arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_map_int_icon_ContainsKey(void * jarg1, int jarg2) {
  unsigned int jresult ;
  std::map< int,MapIcon_Interop > *arg1 = (std::map< int,MapIcon_Interop > *) 0 ;
  std::map< int,MapIcon_Interop >::key_type *arg2 = 0 ;
  std::map< int,MapIcon_Interop >::key_type temp2 ;
  bool result;
  
  arg1 = (std::map< int,MapIcon_Interop > *)jarg1; 
  temp2 = (std::map< int,MapIcon_Interop >::key_type)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_map_Sl_int_Sc_MapIcon_Interop_Sg__ContainsKey(arg1,(int const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_map_int_icon_Add(void * jarg1, int jarg2, void * jarg3) {
  std::map< int,MapIcon_Interop > *arg1 = (std::map< int,MapIcon_Interop > *) 0 ;
  std::map< int,MapIcon_Interop >::key_type *arg2 = 0 ;
  std::map< int,MapIcon_Interop >::mapped_type *arg3 = 0 ;
  std::map< int,MapIcon_Interop >::key_type temp2 ;
  
  arg1 = (std::map< int,MapIcon_Interop > *)jarg1; 
  temp2 = (std::map< int,MapIcon_Interop >::key_type)jarg2; 
  arg2 = &temp2; 
  arg3 = (std::map< int,MapIcon_Interop >::mapped_type *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::map< int,MapIcon_Interop >::mapped_type const & is null", 0);
    return ;
  } 
  try {
    std_map_Sl_int_Sc_MapIcon_Interop_Sg__Add(arg1,(int const &)*arg2,(MapIcon_Interop const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_map_int_icon_Remove(void * jarg1, int jarg2) {
  unsigned int jresult ;
  std::map< int,MapIcon_Interop > *arg1 = (std::map< int,MapIcon_Interop > *) 0 ;
  std::map< int,MapIcon_Interop >::key_type *arg2 = 0 ;
  std::map< int,MapIcon_Interop >::key_type temp2 ;
  bool result;
  
  arg1 = (std::map< int,MapIcon_Interop > *)jarg1; 
  temp2 = (std::map< int,MapIcon_Interop >::key_type)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_map_Sl_int_Sc_MapIcon_Interop_Sg__Remove(arg1,(int const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_map_int_icon_create_iterator_begin(void * jarg1) {
  void * jresult ;
  std::map< int,MapIcon_Interop > *arg1 = (std::map< int,MapIcon_Interop > *) 0 ;
  std::map< int,MapIcon_Interop,std::less< int > >::iterator *result = 0 ;
  
  arg1 = (std::map< int,MapIcon_Interop > *)jarg1; 
  result = (std::map< int,MapIcon_Interop,std::less< int > >::iterator *)std_map_Sl_int_Sc_MapIcon_Interop_Sg__create_iterator_begin(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_map_int_icon_get_next_key(void * jarg1, void * jarg2) {
  int jresult ;
  std::map< int,MapIcon_Interop > *arg1 = (std::map< int,MapIcon_Interop > *) 0 ;
  std::map< int,MapIcon_Interop,std::less< int > >::iterator *arg2 = (std::map< int,MapIcon_Interop,std::less< int > >::iterator *) 0 ;
  std::map< int,MapIcon_Interop >::key_type *result = 0 ;
  
  arg1 = (std::map< int,MapIcon_Interop > *)jarg1; 
  arg2 = (std::map< int,MapIcon_Interop,std::less< int > >::iterator *)jarg2; 
  result = (std::map< int,MapIcon_Interop >::key_type *) &std_map_Sl_int_Sc_MapIcon_Interop_Sg__get_next_key(arg1,arg2);
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_map_int_icon_destroy_iterator(void * jarg1, void * jarg2) {
  std::map< int,MapIcon_Interop > *arg1 = (std::map< int,MapIcon_Interop > *) 0 ;
  std::map< int,MapIcon_Interop,std::less< int > >::iterator *arg2 = (std::map< int,MapIcon_Interop,std::less< int > >::iterator *) 0 ;
  
  arg1 = (std::map< int,MapIcon_Interop > *)jarg1; 
  arg2 = (std::map< int,MapIcon_Interop,std::less< int > >::iterator *)jarg2; 
  std_map_Sl_int_Sc_MapIcon_Interop_Sg__destroy_iterator(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_map_int_icon(void * jarg1) {
  std::map< int,MapIcon_Interop > *arg1 = (std::map< int,MapIcon_Interop > *) 0 ;
  
  arg1 = (std::map< int,MapIcon_Interop > *)jarg1; 
  delete arg1;
}


#ifdef __cplusplus
}
#endif

