//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.1.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class ScriptEngine : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal ScriptEngine(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ScriptEngine obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(ScriptEngine obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~ScriptEngine() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          ConvPINVOKE.delete_ScriptEngine(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public ScriptEngine() : this(ConvPINVOKE.new_ScriptEngine(), true) {
  }

  public vector_string DoScript_Cast_VectorStrings(string command) {
    vector_string ret = new vector_string(ConvPINVOKE.ScriptEngine_DoScript_Cast_VectorStrings(swigCPtr, command), true);
    if (ConvPINVOKE.SWIGPendingException.Pending) throw ConvPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public vector_float DoScript_Cast_VectorFloats(string command) {
    vector_float ret = new vector_float(ConvPINVOKE.ScriptEngine_DoScript_Cast_VectorFloats(swigCPtr, command), true);
    if (ConvPINVOKE.SWIGPendingException.Pending) throw ConvPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string DoScript(string command) {
    string ret = ConvPINVOKE.ScriptEngine_DoScript(swigCPtr, command);
    if (ConvPINVOKE.SWIGPendingException.Pending) throw ConvPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Awaiter DoScriptAsync(string command) {
    Awaiter ret = new Awaiter(ConvPINVOKE.ScriptEngine_DoScriptAsync(swigCPtr, command), true);
    if (ConvPINVOKE.SWIGPendingException.Pending) throw ConvPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public vector_scriptingnode PreParseScript(string command) {
    vector_scriptingnode ret = new vector_scriptingnode(ConvPINVOKE.ScriptEngine_PreParseScript(swigCPtr, command), true);
    if (ConvPINVOKE.SWIGPendingException.Pending) throw ConvPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public vector_string CompatibleFunctions(string TypeName) {
    vector_string ret = new vector_string(ConvPINVOKE.ScriptEngine_CompatibleFunctions(swigCPtr, TypeName), true);
    if (ConvPINVOKE.SWIGPendingException.Pending) throw ConvPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public vector_string FunctionsThatStartWith(string startsWith) {
    vector_string ret = new vector_string(ConvPINVOKE.ScriptEngine_FunctionsThatStartWith(swigCPtr, startsWith), true);
    if (ConvPINVOKE.SWIGPendingException.Pending) throw ConvPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void StopCurrentScript() {
    ConvPINVOKE.ScriptEngine_StopCurrentScript(swigCPtr);
  }

  public string Cast_String(string command) {
    string ret = ConvPINVOKE.ScriptEngine_Cast_String(swigCPtr, command);
    if (ConvPINVOKE.SWIGPendingException.Pending) throw ConvPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Color_Interop Cast_Color(string command) {
    Color_Interop ret = new Color_Interop(ConvPINVOKE.ScriptEngine_Cast_Color(swigCPtr, command), true);
    if (ConvPINVOKE.SWIGPendingException.Pending) throw ConvPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public MapIcon_Interop Cast_MapIcon(string command) {
    MapIcon_Interop ret = new MapIcon_Interop(ConvPINVOKE.ScriptEngine_Cast_MapIcon(swigCPtr, command), true);
    if (ConvPINVOKE.SWIGPendingException.Pending) throw ConvPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public MapPolyline_Interop Cast_MapPolyline(string command) {
    MapPolyline_Interop ret = new MapPolyline_Interop(ConvPINVOKE.ScriptEngine_Cast_MapPolyline(swigCPtr, command), true);
    if (ConvPINVOKE.SWIGPendingException.Pending) throw ConvPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public MapPolygon_Interop Cast_MapPolygon(string command) {
    MapPolygon_Interop ret = new MapPolygon_Interop(ConvPINVOKE.ScriptEngine_Cast_MapPolygon(swigCPtr, command), true);
    if (ConvPINVOKE.SWIGPendingException.Pending) throw ConvPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public MapBackground_Interop Cast_MapBackground(string command) {
    MapBackground_Interop ret = new MapBackground_Interop(ConvPINVOKE.ScriptEngine_Cast_MapBackground(swigCPtr, command), true);
    if (ConvPINVOKE.SWIGPendingException.Pending) throw ConvPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public MapLayer_Interop Cast_MapLayer(string command) {
    MapLayer_Interop ret = new MapLayer_Interop(ConvPINVOKE.ScriptEngine_Cast_MapLayer(swigCPtr, command), true);
    if (ConvPINVOKE.SWIGPendingException.Pending) throw ConvPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public vector_float Cast_VectorFloats(string command) {
    vector_float ret = new vector_float(ConvPINVOKE.ScriptEngine_Cast_VectorFloats(swigCPtr, command), true);
    if (ConvPINVOKE.SWIGPendingException.Pending) throw ConvPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
