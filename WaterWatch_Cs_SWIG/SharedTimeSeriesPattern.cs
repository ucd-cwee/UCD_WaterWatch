//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.1.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class SharedTimeSeriesPattern : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal SharedTimeSeriesPattern(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SharedTimeSeriesPattern obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SharedTimeSeriesPattern obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~SharedTimeSeriesPattern() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          ConvPINVOKE.delete_SharedTimeSeriesPattern(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public SharedTimeSeriesPattern() : this(ConvPINVOKE.new_SharedTimeSeriesPattern__SWIG_0(), true) {
  }

  public SharedTimeSeriesPattern(int index, bool deleteDataWhenScopeEnds) : this(ConvPINVOKE.new_SharedTimeSeriesPattern__SWIG_1(index, deleteDataWhenScopeEnds), true) {
  }

  public SharedTimeSeriesPattern(int index) : this(ConvPINVOKE.new_SharedTimeSeriesPattern__SWIG_2(index), true) {
  }

  public void Clear() {
    ConvPINVOKE.SharedTimeSeriesPattern_Clear(swigCPtr);
  }

  public void AppendData(double time, float value) {
    ConvPINVOKE.SharedTimeSeriesPattern_AppendData(swigCPtr, time, value);
  }

  public float GetValue(double time) {
    float ret = ConvPINVOKE.SharedTimeSeriesPattern_GetValue(swigCPtr, time);
    return ret;
  }

  public float GetAvgValue(double time1, double time2) {
    float ret = ConvPINVOKE.SharedTimeSeriesPattern_GetAvgValue(swigCPtr, time1, time2);
    return ret;
  }

  public vector_pair_double_double GetTimeSeries() {
    vector_pair_double_double ret = new vector_pair_double_double(ConvPINVOKE.SharedTimeSeriesPattern_GetTimeSeries(swigCPtr), true);
    return ret;
  }

  public double GetMinTime() {
    double ret = ConvPINVOKE.SharedTimeSeriesPattern_GetMinTime(swigCPtr);
    return ret;
  }

  public double GetMaxTime() {
    double ret = ConvPINVOKE.SharedTimeSeriesPattern_GetMaxTime(swigCPtr);
    return ret;
  }

  public int GetNumValues() {
    int ret = ConvPINVOKE.SharedTimeSeriesPattern_GetNumValues(swigCPtr);
    return ret;
  }

  public uwp_patternInterpType GetInterpolationType() {
    uwp_patternInterpType ret = (uwp_patternInterpType)ConvPINVOKE.SharedTimeSeriesPattern_GetInterpolationType(swigCPtr);
    return ret;
  }

  public string X_Units() {
    string ret = ConvPINVOKE.SharedTimeSeriesPattern_X_Units(swigCPtr);
    return ret;
  }

  public string Y_Units() {
    string ret = ConvPINVOKE.SharedTimeSeriesPattern_Y_Units(swigCPtr);
    return ret;
  }

  public int Index() {
    int ret = ConvPINVOKE.SharedTimeSeriesPattern_Index(swigCPtr);
    return ret;
  }

}
