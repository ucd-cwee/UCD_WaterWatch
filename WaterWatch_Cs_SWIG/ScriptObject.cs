//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.1.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class ScriptObject : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal ScriptObject(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ScriptObject obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(ScriptObject obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~ScriptObject() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          ConvPINVOKE.delete_ScriptObject(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public ScriptObject(SWIGTYPE_p_cweeSharedPtrT_void_t p) : this(ConvPINVOKE.new_ScriptObject(SWIGTYPE_p_cweeSharedPtrT_void_t.getCPtr(p)), true) {
    if (ConvPINVOKE.SWIGPendingException.Pending) throw ConvPINVOKE.SWIGPendingException.Retrieve();
  }

  public string Cast_String() {
    string ret = ConvPINVOKE.ScriptObject_Cast_String(swigCPtr);
    return ret;
  }

  public Color_Interop Cast_Color() {
    Color_Interop ret = new Color_Interop(ConvPINVOKE.ScriptObject_Cast_Color(swigCPtr), true);
    return ret;
  }

  public MapIcon_Interop Cast_MapIcon() {
    MapIcon_Interop ret = new MapIcon_Interop(ConvPINVOKE.ScriptObject_Cast_MapIcon(swigCPtr), true);
    return ret;
  }

  public MapPolyline_Interop Cast_MapPolyline() {
    MapPolyline_Interop ret = new MapPolyline_Interop(ConvPINVOKE.ScriptObject_Cast_MapPolyline(swigCPtr), true);
    return ret;
  }

  public MapPolygon_Interop Cast_MapPolygon() {
    MapPolygon_Interop ret = new MapPolygon_Interop(ConvPINVOKE.ScriptObject_Cast_MapPolygon(swigCPtr), true);
    return ret;
  }

  public MapLayer_Interop Cast_MapLayer() {
    MapLayer_Interop ret = new MapLayer_Interop(ConvPINVOKE.ScriptObject_Cast_MapLayer(swigCPtr), true);
    return ret;
  }

}
